{"config":{"indexing":"full","lang":["en","ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"引言 机器人的发展横跨七八十年，经历了三个重要时期。 2000年前 ，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面的驱动器、伺服电机、减速机、控制器等设备，这是机器人的 电气时代 。 2000年后 ，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的 数字时代 ，不过这也是机器人大时代的前夜。 2015年之后 ，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发， 智能机器人时代 正式拉开序幕。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角—— Robot Operating System 。 教程链接汇总 课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/90 博客泡圈： https://www.guyuehome.com/","text_tokens":["八十","，","主角","井喷","过程","和","工业","释放","circledetail","丰富","按照","链接","七八十年","七八十","驱动","必将","多","但是","驱动器","没有","id","2000","了","https","book","依然","这是","传感","并","三个","之后","出现","要求",":","家庭","_","更加","随着","业生","时代","的","我们","最为","视觉","执行","发展","应用","软件","人类","操作系统","年","缺少","有限","减速","工业生产","机器","爆发","class","90","汽车","操作","逐渐","算机","劳动力","关注","源码","操控","是","快速","博客","自动","。","ros2","时期","载体","类型","引言","思考","、","系统","system","bubble","正式","伺服","只能","太","俗称","主要","伺服电机","仿生","后","教程","operating","人工","减速机","就是","问答","大","人工智能","横跨","工厂","环境","控制","经历","不过","七八","：","视频",".","而言","检测","提出","服务","智能","ai","教器","不断","十年","于","guyuehome","成为","图文","技术","命令","21","tutorials","由示","生产","开发","更","四足","gitee","之一","课程","完全","最佳","感知","电机","这","2015","汇总","狗","高","此时","前夜","电气","驾驶","帮助","动作","自主","拉开","数字","对","github","热点","劳动"," ","感器","—","com","控制器","www","/","年前","也","序幕","状","拉开序幕","动力","计算","agv","计算机","重要","设备","八十年","传感器","智能化","局部","呈","robot","泡圈","等","层面","送餐","机器人","不断丰富"],"title":"引言","title_tokens":["引言"]},{"location":"#_1","text":"机器人的发展横跨七八十年，经历了三个重要时期。 2000年前 ，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面的驱动器、伺服电机、减速机、控制器等设备，这是机器人的 电气时代 。 2000年后 ，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的 数字时代 ，不过这也是机器人大时代的前夜。 2015年之后 ，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发， 智能机器人时代 正式拉开序幕。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角—— Robot Operating System 。","text_tokens":["八十","，","主角","井喷","过程","和","工业","释放","丰富","按照","七八十年","七八十","驱动","必将","多","但是","驱动器","没有","2000","了","依然","这是","传感","并","三个","之后","出现","要求","家庭","更加","随着","业生","时代","的","我们","最为","视觉","执行","发展","应用","软件","人类","操作系统","年","缺少","有限","减速","工业生产","机器","爆发","汽车","操作","逐渐","算机","劳动力","关注","操控","是","快速","自动","。","时期","载体","类型","思考","、","系统","system","正式","伺服","只能","太","俗称","主要","伺服电机","仿生","后","operating","人工","减速机","就是","大","人工智能","横跨","工厂","环境","控制","经历","不过","七八","而言","检测","提出","服务","智能","ai","教器","不断","十年","于","成为","技术","命令","由示","生产","开发","更","四足","之一","课程","完全","最佳","感知","电机","这","2015","狗","高","此时","前夜","电气","驾驶","帮助","动作","自主","拉开","数字","对","热点","劳动"," ","感器","—","控制器","年前","也","序幕","状","拉开序幕","动力","计算","agv","计算机","重要","设备","八十年","传感器","智能化","局部","呈","robot","等","层面","送餐","机器人","不断丰富"],"title":"引言","title_tokens":["引言"]},{"location":"#_2","text":"课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/90 博客泡圈： https://www.guyuehome.com/","text_tokens":["：","circledetail","视频",".","class","90","github","源码","id"," ","https","book","博客","guyuehome","com","www","图文","ros2","/","21","tutorials",":","bubble","_","gitee","课程","泡圈","教程","问答"],"title":"教程链接汇总","title_tokens":["汇总","链接","教程"]},{"location":"about/","text":"学机器人，上古月居 古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。 版权声明 古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["一体","，","通过","建立","面向未来","和","生态","抄录","法律","高质量","微控","复制","图书","有权","企业","违反","究其","所有","限于","华语","创新","武汉","+","法律责任","@","的","知名","联系","上","使用","交流学习","捆绑","社区","赋能","如需","优质","年","课件","单位","至今","有限","机器","或","明者","声明","对本","源码","是","版权","产品","均","依法","。","实践","线上","面向","个人","、","古月","上述","学习者","书面","许可","万人","拥有","合作","其它","学","进行","质量","包括","视频","》",".","内容","人才培养","致力","《","被","ros","120","不","交流","ai","居","未来","不得","guyuehome","地区","精锋","平台","与","传播","请","开发","万字","致力于","销售","众多","1000","课程","畅销","将","模式","为","有限公司","镜像","累积","超过","追究","（","提供","公司","科技","校企","用户","集","合法","未经","创建","作品","及"," ","高质","）","任何","com","www","小时","学习","brand","仅限","追究其","网站","责任","声明者","努力","授权","培养","修改","2011","构建","出版","但","人才","等","高校","机器人","本"],"title":"关于我们","title_tokens":["关于","我们"]},{"location":"about/#_1","text":"古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。","text_tokens":["一体","，","通过","建立","面向未来","生态","高质量","图书","企业","华语","创新","+","的","知名","交流学习","社区","赋能","优质","年","至今","机器","是","。","实践","线上","面向","、","古月","学习者","万人","合作","质量","视频","》",".","内容","人才培养","致力","《","ros","120","交流","ai","居","未来","guyuehome","地区","平台","与","开发","万字","致力于","众多","1000","课程","畅销","模式","为","累积","超过","（","提供","校企","用户","集","创建","及"," ","高质","）","com","www","小时","学习","努力","培养","2011","构建","出版","人才","等","高校","机器人"],"title":"学机器人，上古月居","title_tokens":["居","，","古月","上","机器人","学","机器"]},{"location":"about/#_2","text":"古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["，","和","抄录","法律","微控","复制","有权","违反","究其","所有","限于","武汉","法律责任","@","的","联系","使用","捆绑","如需","课件","单位","有限","或","明者","声明","对本","源码","版权","产品","均","依法","。","、","古月","上述","书面","许可","拥有","其它","进行","包括","视频",".","被","不","居","不得","guyuehome","精锋","请","传播","与","销售","将","课程","为","有限公司","镜像","追究","公司","科技","用户","合法","未经","作品"," ","任何","com","学习","brand","仅限","追究其","网站","责任","声明者","授权","修改","但","等","个人","本"],"title":"版权声明","title_tokens":["版权","声明"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/","text":"ROS/ROS2是什么 智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。 ROS的诞生 对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人—— PR2 ，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。 ROS的发展 ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称 ROSCon ，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。 ROS的特点 ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。 ROS的社区 社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。 参考资料 关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["后期","叠","讲解","willow","柔性","上去","能够","工业","快","嵌入式","频繁","2010","论坛","增长速度","大有可为","方法","更为","到","虽然","实验室","尝试","站","越来","正式版","工具","下","以","时候","可能","虽好","曲线","选择","一切","一大步","离不开","传感","采购","而生","促使","有志","跨平台","讨论","涉及","初期","软件系统","解决","一款","维基百科","随着","时代","很多","一家","上","使用","有没有","发展","不要","团队","“","多年","？","针对","同理","发表","万万","好","2014","微软","进步","把","汽车","疫情","工程师","这些","来","做饭","25","其实","是","又","制造","不仅","b","新增","大部","。","长期","系统","模块","迅猛","神秘","数据库","电路","万人","受限于","同样","肩负","所学","此后","进行","这位","大步","问答","类似","高度","很快","控制","推进","一堂","其他","核心","身影","而言","多万","一次","为例","提出","原型","服务","肩负着","踏上","一些","普遍","上边","几百","神兵","这里","整理","全书","嘉宾","intel","介于","看中","笔记","名称","大家","高效","万左右","完全","最佳","从","齐聚一堂","全人","支持","第一","discourse","该","主阵地","百万","此时","早期","作为","这样","当时","打","这个","帮助","发布","找到","五年","创始","推出","商业","garage","用户","什么","向前","绝对","做出","人形","笔记本","斯坦福大学","应用软件","第一次","手机","personal","日常","资本","数据","world","turtlebot","浪潮","年底","加上","智慧","举办","四项","动力","起点","百科全书","改为","重要","乐意","此","已有","风险","时至今日","家","头发","层面","5","简单","关于","扫地","，","多媒体系统","过程","通过","全","一大","肩膀","棒","生态","远","如何","不到","接下来","说明","扩展","得以","直接","官方","案例","注意","清晰","无聊","实验","但是","百科","推动","全人类","index","目标","怀揣","月底","年轻","有","历经","今日","2","游戏","基本","率","还有","推荐","风险投资","望而却步","人类","革命","年","资金","更新","迎来","一下","毛巾","搜索","工程","机器","入门教程","掌握","人","以叠","现在","复杂","2012","想到","源码","模块化","活跃度","浏览量","项目","两个","而","使命","已经","、","多媒体","许可","起","索引","可为","会","多项","投资","终于","主要","或者","起来","月","真的","就是","维基","活跃","成功","功能","普及","欢迎","配合","成本","为了","：","访问","进入","却","带领","所有人","之上","而且","被","成果","代码","不","容易","度","生态系统","相关","不断","kinect","总体","真正","提取","成为","org","大量","水下","无疑","不乏","一大笔","更","提问","同一","之旅","因","让","以上","2015","中","无论是","万","强悍","亚马逊","进化","2017","几乎","图","限性","效率","分钟","公司","对","150","每年","因为","开发工具","更好","轮子","基于","部分","原因","感器","各项","—","便宜","亚马","/","新","网站","整合","重新","媒体","努力","来到","领域","你","局限","近两年","场景","2011","一定","托管","参考","有人","绝大部分","说干就干","xbox","版","做法","然后","2007","和","零","来看","特性","深知","既然","用于","四大","剪头发","维基百","重量","多","2022","一群","了","采用","跟随","一个","还","受限","复合","加","标志","限于","专业","自身","甚至","新鲜事","的","知识","最为","重量级","缩短","软件","总而言之","新鲜","在","复用","不断更新","方向","面纱","造","引擎","动机","沉淀","长远","创意","才","着","围绕","机械","增长","臂","接下","时间轴","100","量级","每个","可以","联合","收拾","都","只","斯坦福","这一波","衣服","暴露","正在","处理","巨人","开始","圈","system","没想到","正式","各种","用","组成","正如","却步","充足","前","packages","趋势","分享","效果","如果","宽松","条","做成","operating","记录","特点","linux","大大","大学","要","最后","步伐","250","想法","参考资料","苹果","板块","那","洗衣",".","内容","15","上图","roscon","一系","一步","answers","全新","120","啦","全球","大笔","从中","居","给","之内","于","没想","20","集合","友好","张图","直到","提高","只要","最高","开源","将","上市","大部分","个","掀起","为","40","之","速度","他们","具备","提供","其次","浏览","性能","几个","年轻人","泡泡","代","答案","福大","全球化","事情","认识一下","阵地"," ","呢","首先","局限性","入门","叫做","学习","存储","笔记本电脑","humble","零部件","pr2","查看","台球","实现","看到","据库","底盘","几年","通信","智能化","传感器","完成","conference","自己","人才","下来","就","差不多","个人","还是","本","一段","结晶","两年","几百万","部件","包","时间","一起","适用","第一个","向前走","没有","这群","不是","一届","ubuntu","通常","游戏机","这是","并","繁荣","算是","所有","wiki","商业化","做到","不多","广泛","青年","80","我们","简称","移动","之王","研究","本身","应用","轰动","社区","操作系统","设计","当初","体系","木头","至今","机制","；","对于","一系列","由","学术","做","世界","操作","左右","诞生","逐渐","独立","”","人数","助推","跑","干","物体","其中","ros1","投了","无论","产品","陪","快速","代表","ros2","线上","美妙","古月","问题","情况","后续","移动机器人","同年","元素","关键","明智","教程","详细","系列","非常","玩耍","大","横跨","嵌入","不开","同时","经历","只想","统统","视频","确定","很","来自","款","成熟","各种各样","聊天","等等","ros","智能","尽量","一样","总称","为什么","生态系","资料","外观","技术","价格便宜","巨大","光靠","熨烫","加快","平台","绝大","回到","开发","不下","各样","课程","一套","版本","居高不下","这","许可证","电脑","体感","活动","同学","不想","稳定","方式","访问量","挑战","大会","资源","精致","github","向","迭代","越来越","别人","windows","希望","页面","了解","爆款","图中","任何","回答","一大笔钱","近几年","野蛮","标准","给出","也","每","认识","出来","变为","单独","价格","低","a","原本","肯定","google","熟悉","来讲","利器","robot","c","所以","等","这款","框架","比如","机器人","开发者"],"title":"ROS和ROS2是什么","title_tokens":["ros2","ros","和","是","什么"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#rosros2","text":"智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。","text_tokens":["高度","？","，","方向","进化","面纱","全","一下","那","接下","机器","对","挑战","接下来","带领","什么","操作","量级","提出","ros","一起","向","重量","智能","是","又","认识一下"," ","了","呢","。","ros2","正在","而生","巨大","嘉宾","系统","开发","大家","认识","神秘","时代","掀起","场景","的","我们","智能化","这","重量级","应用","下来","就","机器人","中","这位","操作系统"],"title":"ROS/ROS2是什么","title_tokens":["ros2","/","ros","是","什么"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros","text":"对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人—— PR2 ，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。","text_tokens":["，","后期","叠","2007","一大","柔性","和","深知","如何","不到","既然","部件","用于","得以","虽然","剪头发","实验室","尝试","一起","无聊","实验","多","但是","越来","向前走","没有","不是","时候","一群","了","可能","推动","一个","还","一切","一大步","并","而生","有志","所有","有","涉及","初期","软件系统","2","专业","一款","甚至","青年","的","我们","很多","上","研究","有没有","软件","应用","轰动","在","团队","操作系统","针对","？","年","资金","设计","木头","才","毛巾","对于","机械","一系列","机器","学术","做","100","人","以叠","操作","复杂","诞生","独立","可以","联合","做饭","干","物体","是","收拾","其中","都","只","斯坦福","陪","。","衣服","处理","已经","、","问题","系统","圈","用","组成","充足","分享","如果","电路","条","同样","或者","系列","非常","就是","真的","大步","玩耍","类似","横跨","很快","大学","要","最后","想法","功能","苹果","那","：","洗衣","机器人","却","很","所有人","一次","款","一系","聊天","而且","为例","原型","ros","不","服务","容易","智能","一些","从中","之内","为什么","成为","外观","技术","光靠","熨烫","整理","平台","开发","更","只要","同一","高效","大家","一套","个","因","这","第一","中","此时","这样","当时","所以","他们","强悍","打","这个","帮助","不想","找到","图","效率","分钟","精致","什么","性能","向前","因为","做出","代","越来越","答案","基于","福大","斯坦福大学","应用软件","别人","事情","手机","personal","第一次"," ","呢","图中","—","标准","零部件","pr2","给出","也","台球","实现","看到","出来","你","重要","低","肯定","5","完成","robot","自己","等","家","有人","层面","就","个人","这款","说干就干","头发","框架"],"title":"ROS的诞生","title_tokens":["ros","诞生","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_1","text":"ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称 ROSCon ，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。","text_tokens":["版","扫地","，","后期","讲解","过程","2007","willow","一大","和","能够","两年","几百万","2010","到","直接","官方","时间","注意","适用","第一个","多","但是","2022","越来","正式版","一届","这群","下","ubuntu","虽好","了","采用","推动","跟随","游戏机","一个","受限","这是","传感","月底","年轻","所有","标志","历经","限于","游戏","一款","随着","时代","的","我们","一家","简称","风险投资","使用","望而却步","软件","应用","发展","在","团队","操作系统","多年","年","万万","设计","2014","当初","微软","迎来","着","增长","机器","时间轴","做","人","把","操作","现在","诞生","2012","疫情","逐渐","可以","每个","想到","助推","其中","是","投了","不仅","斯坦福","快速","项目","大部","。","暴露","ros2","而","使命","线上","个人","已经","、","问题","开始","系统","长期","system","圈","没想到","正式","起","各种","却步","前","分享","会","同年","受限于","投资","关键","肩负","终于","教程","此后","operating","进行","大","类似","大大","很快","大学","控制","步伐","成功","一堂","功能","普及","经历","只想","成本","为了","进入","确定","来自","身影","款","roscon","成熟","各种各样","之上","提出","原型","被","ros","全新","服务","肩负着","全球","一样","大笔","给","kinect","几百","真正","于","没想","这里","成为","提取","价格便宜","加快","绝大","不乏","intel","一大笔","回到","介于","看中","更","名称","不下","开发","笔记","直到","开源","各样","大部分","版本","居高不下","从","齐聚一堂","让","这","支持","第一","2015","为","该","百万","中","早期","电脑","体感","他们","亚马逊","2017","这个","发布","五年","创始","稳定","限性","推出","公司","商业","garage","大会","每年","因为","年轻人","迭代","越来越","笔记本","福大","斯坦福大学","部分","了解","原因"," ","资本","爆款","感器","world","—","turtlebot","便宜","亚马","一大笔钱","年底","野蛮","局限性","叫做","加上","笔记本电脑","humble","pr2","也","每","举办","变为","起点","单独","出来","价格","底盘","改为","近两年","局限","原本","5","几年","重要","2011","传感器","熟悉","robot","conference","风险","绝大部分","所以","就","自己","等","机器人","开发者","本","xbox"],"title":"ROS的发展","title_tokens":["ros","发展","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_2","text":"ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。","text_tokens":["，","做法","多媒体系统","结晶","和","上去","肩膀","零","生态","嵌入式","工业","远","特性","用于","到","直接","四大","时间","案例","一起","多","站","向前走","工具","以","越来","不是","通常","了","全人类","一个","还","采购","目标","繁荣","怀揣","复合","促使","并","跨平台","有","今日","自身","商业化","率","做到","广泛","的","我们","很多","一家","移动","上","使用","缩短","本身","软件","发展","应用","社区","在","复用","不要","“","同理","人类","造","设计","引擎","动机","体系","沉淀","长远","至今","创意","进步","围绕","机制","机械","臂","；","由","机器","着","做","把","汽车","可以","这些","”","来","跑","模块化","是","ros1","制造","无论","都","产品","快速","b","新增","。","代表","ros2","巨人","已经","、","系统","多媒体","许可","模块","各种","正如","组成","分享","移动机器人","会","多项","宽松","明智","做成","非常","就是","特点","linux","推进","嵌入","最后","同时","功能","那","统统","核心","：","身影","各种各样","一步","成果","ros","被","智能","尽量","全球","生态系统","总称","普遍","给","生态系","这里","成为","技术","集合","水下","平台","友好","开发","更","提高","大家","各样","将","开源","上市","完全","从","全人","支持","这","许可证","中","无论是","之","这样","他们","这个","具备","公司","商业","对","向前","开发工具","人形","轮子","越来越","别人","windows","全球化","部分"," ","新","智慧","标准","整合","重新","也","媒体","实现","看到","领域","a","通信","此","智能化","来讲","已有","c","时至今日","家","自己","人才","比如","机器人","还是","就","下来","简单"],"title":"ROS的特点","title_tokens":["ros","的","特点"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_3","text":"社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。","text_tokens":["关于","，","通过","快","和","棒","频繁","来看","说明","论坛","增长速度","大有可为","包","更为","到","维基百","清晰","多","越来","百科","曲线","选择","了","index","一个","这是","加","算是","讨论","wiki","有","基本","维基百科","不多","新鲜事","的","我们","很多","最为","80","上","使用","发展","应用","总而言之","新鲜","在","社区","发表","？","革命","；","增长","机器","人","左右","现在","每个","可以","这些","人数","助推","源码","其实","是","25","其中","活跃度","都","快速","浏览量","这一波","大部","。","代表","两个","正在","已经","、","问题","情况","各种","packages","趋势","迅猛","索引","可为","会","如果","数据库","万人","元素","教程","起来","月","非常","就是","问答","记录","维基","活跃","大","250","功能","其他","核心","：","访问",".","很","而言","15","多万","上图","提出","answers","等等","ros","不","全球","度","相关","上边","总体","神兵","这里","20","成为","org","无疑","绝大","张图","开发","大家","最高","万左右","大部分","最佳","从","以上","这","discourse","40","中","作为","万","速度","活动","发布","方式","访问量","资源","150","浏览","什么","用户","几个","绝对","越来越","希望","页面","日常","部分"," ","各项","数据","呢","任何","回答","浪潮","近几年","新","学习","存储","查看","网站","整合","每","也","四项","动力","据库","看到","你","重要","乐意","几年","利器","等","绝大部分","就","比如","差不多","机器人","开发者","本"],"title":"ROS的社区","title_tokens":["ros","社区","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#_1","text":"关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["一段","关于","，","然后","和","扩展","方法","一起","工具","百科","一个","还","离不开","所有","有","解决","还有","的","我们","推荐","最为","之王","知识","使用","社区","在","不断更新","好","更新","搜索","工程","机器","入门教程","掌握","世界","工程师","可以","是","都","项目","大部","。","ros2","美妙","古月","问题","开始","效果","后续","分享","会","万人","主要","教程","所学","详细","不开","要","参考资料","最后","欢迎","配合","板块","视频","内容","代码","ros","120","啦","踏上","不断","居","这里","资料","成为","技术","大量","全书","绝大","开发","提问","大家","之旅","开源","将","课程","大部分","从","这","主阵地","中","作为","几乎","同学","这个","找到","提供","其次","几个","github","更好","泡泡","部分","阵地"," ","—","首先","入门","学习","网站","也","努力","来到","你","百科全书","重要","google","一定","托管","参考","绝大部分","机器人","本"],"title":"参考资料","title_tokens":["资料","参考","参考资料"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/","text":"ROS2对比ROS1 在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。 ROS1的局限性 首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。 全新的ROS2 ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。 ROS2 vs ROS1 系统架构 在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。 DDS通信 ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。 核心概念 ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。 编码方式 再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。 命令行 最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随教程，你就会慢慢理解这些特性。","text_tokens":["主角","讲解","建立","专注","哪些","能够","频繁","嵌入式","编译器","python3","应该","丰富","宕机","方法","到","千差万别","虽然","5g","一致","加入","可靠","先进","不用","越来","下","工具","mcu","时候","可能","选择","角度","先","实力","rostopic","如","跨平台","大幅度","软件系统","解决","精力","一款","更加","指挥","随着","上手","运行","时代","无法","很多","继续","不难","上","使用","深入","一家","分散","是从","发展","移植性","省略","不要","？","针对","理器","保留","推倒重来","python","好","受制于","安装","到底","部署","搬","确实","把","汽车","这些","发布者","来","其实","是","c++","慢慢","1ms","不仅","大部","。","之外","体现","一旦","系统","二代","可选项","批量","级别","总之","同样","定性","进行","学","第二代","类似","控制","管理器","单兵","作战","国际","内存","协作","以下几点","其他","核心","而言","底层","服务","强壮","一些","几百","这里","一团乱麻","勿躁","个体","收","性","请","可靠性","不会","原有","生产","存在","名称","打交道","可移植","大家","amr","最佳","各位","从","连接","支持","第一","动力学","写","该","高","百万","一一","这样","运算","这个","看看","发布","找到","不能","相比","符合","商业","用户","什么","受制","复杂度","进程","手机","另","保证","数据","二个","幅度","航天","除此之外","间层","格局","实时性","面向对象","完整","再","尤其","能","研发","动力","切记","高昂","接收","重要","设备","策略","陆续","风险","可移植性","开发成本","层面","天翻地覆","过来","可读性","历史","简单","，","适合","印象","通过","过程","全","如何","借鉴","说明","通信接口","国际标准","直接","共享内存","驱动","诟病","注意","听说","减少","建筑","对系统","但是","最大","升级","稍安","目标","怀揣","怎样","诸多","小伙","有","图片","编程语言","分布式","基本","行人","android","率","网络","还有","接触","通用性","适配","布式","变化","库会","唯一","不同","多功能","从而","借助","命令行","一下","工程","机器","发","角色","工作","复杂","良好","方便","层","项目","分布","多个","两个","而","类型","使命","已经","、","消失","运动","打成","fastrtps","安全","毛坯","客户","只能","会","另外","配置","左侧","主要","后","或者","opensplice","就是","这台","dds","含义","稳定性","细节","之初","环境","选项","需求","成功","图像","批量生产","普及","一团乱","功能","成本","为了","走向","整体","：","看","最早","带领","之上","代码","常","不","毛坯房","相关","不断","过去","总体","why","真正","大量","编码方式","wifi","周期","走","集成","与","更","新一代","解密","一种","导致","rosrun","相对","让","完善","意义","以上","会成","换成","也许","中","下边","以及","概念","不太","几乎","理解","运动学","几点","编译系统","暂且","限性","听","便于","除了","公司","对","主","面对","因为","更好","某","变革","基于","vs","部分","广泛应用","—","新版","/","重新","你","局限","翻地","远比","场景","出错","不难理解","一定","开发方式","绝大部分","历史使命","语言","颠覆性","接入","不断涌现","基础","然后","下要","和","自家","上升","来看","特性","只是","应用层","陌生","实时","按照","用于","middleware","多","一代","了","跟随","一个","还","完","变得","三个","之后","是否","要求","可读","课时","甚至","致使","改","的","最为","发现","结合","现有","之前","软件","编程","时","难度","在","复用","两者","轻松","长远","揭秘","discovery","乱麻","或","不再","得","对比","所示","每个","可以","分解","一页","run","差异","一行","都","是因为","自动","处理","没","面向","市场","开始","保障","以下","各种","用","简单明了","充足","发成","优化","如果","信息","黑客","rosbuild","属性","当","做成","项目管理","交道","通用","一团","linux","产品化","指定","依赖","要","推倒","最后","那","较","调试","初次","干掉","彼此","用到","全新","一步","真实","单兵作战","啦","全球","给","未来","于","考虑","比","张图","提高","只要","基本保障","面临","开源","中间层","api","将","大部分","第二个","为","而已","很大","它","他们","流程","具备","至关重要","提供","macos","翻新","性能","udp","答案","尽力","想要","发送"," ","微控制器","呢","软件开发","即可","tcp","首先","控制器","局限性","叫做","学习","安全性","切换","pr2","体验","里","实现","catkin","举","计算","道坎","不好","阶段","管理","通信","修改","成","大部头","内部","当然","完成","但","自己","就","驾驶","本","ceo","名字","明显","自","可选","几百万","带来","封装","颠覆","通信协议","链接","之间","时间","master","适用","第一个","过","除此","表示","没有","不是","消费","企业","接口","解算","依然","灵活","有线","并","编译","出现","所有","移植","还会","消费市场","topic","家庭","似乎","定义","第二种","例子","只有","做到","广泛","前方","大致","算力","启动","我们","简称","研究","么","架构","rmw","应用","社区","操作系统","交付","厂家","地方","物","设计","伙伴","机制","有限","系统工程","；","搭载","对于","一本","rtos","学术","小伙伴","做","接近","操作","诞生","独立","足够","经常","突然","成功经验","其中","纠结","ros1","无论","产品","协议","方案","标准化","ros2","提","部头","最终","大幅","问题","100ms","最","二种","入侵","后续","生活","装修","重来","至关","教程","总结","雷达","非常","一边","大","常用","有且","第二","嵌入","满足","同时","不过","小","盖","他","款","各种各样","ros","电脑系统","只不过","工作站","智能","尽量","一样","编写","为什么","不够","完整性","担忧","行为","中间","联网","命令","巨大","平台","涌现","全部","绝大","丢","内","调用","迁移","开发","各样","课程","一套","更换","版本","由于","更具","放在","编码","这","colcon","右侧","不爽","更接","电脑","具体","力学","条件","稳定","（","干扰","对象","话题","交给","强","方式","节点","挑战","资源","产品开发","程序","ament","越来越","windows","售价","了解","迈过","任何","）","共享","去","信号","经验","延迟","标准","担心","也","学术研究","测试","每","总体而言","走向市场","能力","需要","原本","肯定","加密","房子","熟悉","来讲","网络连接","等","框架","所以","比如","客户端","机器人","开发者","厂商","最新"],"title":"ROS2对比ROS1","title_tokens":["ros2","对比","ros1"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2ros1","text":"在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。","text_tokens":["？","，","第二","看看","和","来看","到底","或","大","做","对比","ros","听说","不","多","过","其中","ros1"," ","一个","。","ros2","学习","有","能","二代","名称","你","从","的","我们","这","上","使用","么","也许","之前","就","就是","第二代","变化","在"],"title":"ROS2对比ROS1","title_tokens":["ros2","对比","ros1"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros1","text":"首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。","text_tokens":["不断涌现","，","主角","适合","和","来看","嵌入式","实时","用于","虽然","时间","第一个","但是","一代","可靠","先进","不用","没有","了","一个","目标","有线","并","实力","出现","有","家庭","一款","更加","似乎","甚至","随着","网络","运行","致使","算力","的","我们","上","研究","发展","应用","软件","在","？","针对","地方","设计","有限","；","搭载","机器","学术","汽车","工作","复杂","良好","独立","可以","足够","诞生","是","ros1","都","产品","是因为","大部","自动","。","ros2","处理","类型","最终","已经","问题","市场","系统","各种","用","充足","只能","入侵","会","黑客","批量","级别","做成","或者","就是","这台","类似","嵌入","要","单兵","作战","批量生产","普及","成本","为了","走向","那","：","小","最早","他","款","ros","不","服务","工作站","单兵作战","一些","不断","为什么","why","不够","担忧","平台","涌现","绝大","丢","可靠性","开发","生产","新一代","课程","大部分","由于","从","连接","让","这","支持","第一","中","这样","它","驾驶","具体","运算","找到","条件","干扰","具备","资源","什么","因为","答案","售价","部分"," ","保证","数据","呢","—","首先","航天","pr2","也","学术研究","走向市场","能力","计算","高昂","设备","翻地","原本","通信","内部","当然","完成","网络连接","自己","绝大部分","风险","就","框架","比如","机器人","天翻地覆","历史"],"title":"ROS1的局限性","title_tokens":["局限","局限性","的","限性","ros1"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2","text":"ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。","text_tokens":["能够","编译器","python3","宕机","方法","到","千差万别","虽然","可靠","越来","不用","工具","下","mcu","时候","可能","选择","跨平台","一款","更加","运行","时代","无法","很多","继续","上","使用","保留","理器","针对","？","推倒重来","python","好","受制于","部署","把","汽车","这些","是","c++","1ms","不仅","。","体现","一旦","系统","定性","进行","类似","控制","管理器","协作","以下几点","强壮","个体","性","不会","原有","大家","amr","最佳","连接","第一","动力学","这样","这个","不能","相比","受制","手机","数据","格局","实时性","完整","尤其","能","研发","动力","策略","风险","层面","简单","历史","，","适合","全","如何","借鉴","说明","直接","建筑","对系统","但是","升级","怀揣","怎样","诸多","有","分布式","基本","行人","android","网络","通用性","布式","变化","不同","借助","一下","工程","机器","角色","复杂","工作","方便","项目","分布","两个","使命","已经","、","运动","打成","安全","毛坯","会","后","或者","就是","dds","稳定性","细节","之初","环境","需求","成功","为了","走向","：","之上","代码","不","毛坯房","过去","真正","大量","wifi","周期","与","更","解密","一种","导致","相对","让","中","以及","运动学","几点","编译系统","除了","对","面对","变革","新版","重新","远比","场景","出错","一定","历史使命","语言","颠覆性","基础","下要","和","来看","特性","只是","实时","用于","多","了","一个","还","要求","课时","甚至","的","发现","结合","软件","在","长远","不再","得","可以","分解","差异","都","自动","市场","保障","以下","各种","用","优化","黑客","rosbuild","项目管理","通用","linux","产品化","要","推倒","那","较","调试","全新","给","未来","于","考虑","比","基本保障","面临","api","为","很大","它","他们","流程","具备","提供","macos","翻新","性能","尽力"," ","发送","微控制器","呢","控制器","叫做","安全性","体验","实现","catkin","不好","阶段","管理","通信","修改","完成","但","自己","就","驾驶","明显","颠覆","链接","之间","master","第一个","没有","不是","消费","接口","解算","并","编译","出现","所有","移植","还会","消费市场","第二种","做到","前方","算力","我们","架构","应用","操作系统","设计","机制","系统工程","搭载","rtos","操作","独立","经常","成功经验","纠结","ros1","无论","产品","方案","标准化","ros2","提","最终","问题","100ms","二种","入侵","后续","生活","装修","重来","大","第二","满足","同时","盖","各种各样","ros","电脑系统","智能","尽量","编写","完整性","行为","巨大","平台","全部","内","开发","各样","课程","更具","这","colcon","电脑","具体","力学","稳定","（","强","节点","挑战","ament","越来越","windows","任何","）","去","信号","经验","标准","也","测试","需要","房子","原本","肯定","加密","网络连接","等","所以","框架","比如","机器人","开发者","最新"],"title":"全新的ROS2","title_tokens":["全新","ros2","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2-vs-ros1","text":"","text_tokens":[],"title":"ROS2 vs ROS1","title_tokens":[" ","ros2","vs","ros1"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_1","text":"在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。","text_tokens":["，","明显","自","印象","通过","建立","哪些","和","频繁","可选","应用层","应该","封装","通信接口","通信协议","方法","共享内存","驱动","master","注意","过","时候","了","接口","一个","先","变得","并","所有","有","更加","指挥","只有","大致","的","我们","很多","不难","发现","上","深入","架构","接触","是从","应用","变化","在","库会","操作系统","理器","两者","从而","好","机制","安装","discovery","乱麻","rtos","角色","得","对比","把","操作","复杂","可以","这些","突然","是","ros1","都","协议","层","。","ros2","而","、","消失","开始","系统","最","简单明了","客户","可选项","后续","会","如果","信息","另外","左侧","至关","主要","交道","进行","雷达","就是","dds","一团","类似","有且","linux","选项","依赖","管理器","图像","不过","内存","一团乱","整体","那","看","底层","彼此","ros","不","只不过","一样","一团乱麻","中间","大量","走","请","调用","内","张图","开发","打交道","大家","中间层","将","一套","更换","连接","让","这","完善","右侧","会成","写","中","而已","这样","它","下边","不太","这个","发布","理解","找到","稳定","至关重要","提供","方式","听","macos","公司","节点","程序","udp","进程","名字","基于","windows","了解"," ","数据","共享","—","tcp","间层","学习","再","标准","也","里","接收","重要","需要","管理","肯定","通信","成","不难理解","但","框架","就","比如","客户端","简单","ceo"],"title":"系统架构","title_tokens":["系统","架构"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#dds","text":"ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。","text_tokens":["接入","，","然后","专注","能够","频繁","自家","带来","如何","应该","丰富","通信协议","按照","国际标准","master","诟病","5g","听说","适用","middleware","多","减少","加入","最大","不用","不是","选择","了","接口","一个","先","完","灵活","目标","并","三个","是否","移植","软件系统","解决","精力","基本","更加","定义","例子","率","广泛","还有","无法","的","我们","改","一家","简称","么","rmw","适配","软件","应用","时","变化","在","社区","省略","复用","唯一","不同","？","交付","厂家","物","设计","好","轻松","安装","对于","部署","机器","发","做","得","把","复杂","每个","可以","这些","其实","是","一行","ros1","纠结","都","协议","产品","。","多个","ros2","之外","、","fastrtps","问题","系统","各种","用","最","发成","优化","会","如果","属性","配置","总之","opensplice","就是","dds","类似","指定","满足","要","需求","功能","国际","不过","其他","成本","为了","机器人","底层","代码","ros","常","不","一样","一些","给","这里","于","联网","收","简单","丢","更","开发","提高","只要","开源","更换","一种","版本","放在","让","这","写","该","为","不爽","高","中","这样","这个","稳定","交给","提供","相比","除了","符合","商业","用户","性能","复杂度","某","产品开发","udp","程序","基于","另","想要","部分"," ","广泛应用","数据","tcp","/","切换","再","延迟","标准","每","也","重新","实现","举","加密","通信","场景","肯定","熟悉","来讲","当然","等","所以","就","层面","比如","开发成本","过来","厂商"],"title":"DDS通信","title_tokens":["通信","dds"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_2","text":"ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。","text_tokens":["保留","概念","，","以及","第二","几乎","讲解","伙伴","和","方式","几百万","便于","陌生","应该","小伙伴","方法","到","这些","ros","一致","不","含义","过","尽量","全球","其中","部分","ros1","没有","不用"," ","了","几百","二个","这里","依然","。","ros2","并","学习","已经","小伙","有","迁移","也","担心","开发","存在","大家","课程","如果","第二个","广泛","各位","会","从","的","我们","很多","意义","熟悉","使用","开发方式","百万","应用","非常","中","就","开发者","在","一一","本"],"title":"核心概念","title_tokens":["概念","核心"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_3","text":"再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。","text_tokens":["，","过程","和","特性","如何","方法","多","可读性","角度","企业","稍安","一个","如","之后","移植","图片","编程语言","可读","的","我们","发现","编程","软件","移植性","难度","在","不要","一本","机器","接近","确实","搬","操作","所示","一页","发布者","来","是","ros1","大部","项目","。","ros2","两个","面向","部头","用","后续","会","当","同样","教程","学","一边","不过","而言","带领","用到","一步","真实","一些","总体","勿躁","更","开发","提高","可移植","大家","课程","版本","从","编码","这","写","更接","中","具体","看看","发布","对象","具备","暂且","方式","更好","程序"," ","迈过","软件开发","面向对象","学习","再","也","总体而言","切记","实现","道坎","大部头","来讲","语言","可移植性","就","机器人"],"title":"编码方式","title_tokens":["编码方式","编码","方式"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_4","text":"最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随教程，你就会慢慢理解这些特性。","text_tokens":["，","印象","上升","和","特性","master","除此","表示","工具","下","选择","了","跟随","一个","rostopic","大幅度","所有","有","topic","上手","大致","的","我们","启动","最为","分散","现有","编程","变化","难度","在","多功能","好","命令行","揭秘","做","对比","把","独立","这些","run","是","慢慢","ros1","都","。","ros2","没","之外","大幅","后续","会","如果","教程","总结","就是","dds","常用","控制","最后","功能","：","核心","而言","初次","干掉","ros","啦","相关","命令","集成","开发","更","大家","一种","rosrun","相对","以上","换成","中","概念","理解","话题","节点","对","主","某"," ","即可","—","幅度","除此之外","再","每","也","你","通信","陆续","就","比如"],"title":"命令行","title_tokens":["命令行","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/","text":"ROS2安装方法 本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。 Linux系统简介 时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。 Ubuntu系统简介 我们后续课程使用到的Linux发行版就是 ubuntu系统 。 Ubuntu诞生于2004年10月份， 每六个月发布一个新版本 ，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。 Ubuntu虚拟机安装 虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下： 1. 下载系统镜像 下载链接： https://ubuntu.com/download/desktop 2. 在虚拟机中创建系统 3. 设置虚拟机硬盘大小 4. 设置Ubuntu镜像路径 5. 启动虚拟机 6. 设置用户名和密码 7. 等待系统安装 8. 完成安装 Ubuntu系统安装好后，大家可以先随意使用熟悉一下。 ROS2系统安装 接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下： 1. 设置编码 $ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8 2. 添加源 $ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844 3. 安装ROS2 $ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop 4. 设置环境变量 $ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。 ROS2示例测试 为了验证ROS2安装成功，我们可以通过以下示例进行测试。 示例一：命令行示例 先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。 示例二：小海龟仿真示例 再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。","text_tokens":["相同","终端","讲解","快","source","互联网","修复","应用程序","gnupg","应该","方法","到","虽然","加入","越来","以","下","正常","选择","时候","可能","分别","先","准备","failed","实力","turtlesim","持续","pro",">","运行","林纳斯","lsb","按键","很多","上","使用","占据","发展","背景","dpkg","“","？","位置","好","紧随","安装","把","html","opt","发布者","来","真理","可","是","不仅","每隔","。","之外","长期","系统","个人爱好","-","上下左右","cpp","第一句","迅猛","bashrc","蕴藏","一石激起千层浪","进行","外衣","其他软件","吧","控制","其他","核心","底层","一次","激起","为例","服务","一些","下载","出","这里","开放","locales","务器","比较","请","8","原有","一应","大家","之一","ssl","从","install","支持","第一","该","此时","architecture","蓝色","这样","发挥","这个","发扬","发布","优先","o","商业","数字","list","用户","什么","密码","绝对","尚","应用软件","第一次","上层","硬盘","保证","数据","激发","world","二个","除此之外","加上","再","精神","前先要","setup","重要","已有","硬件","print","目前","5","芬兰","关于","，","适合","通过","过程","顺序","node","如何","04","说明","接下来","源","界面","直接","变量","但是","最大","升级","&&","任务","2004","有","evaluation","合适","2","tee","小海龟","基本","10","反馈","订阅","网络","http","--","接触","如下","]","中将","唯一","demo","不同","年","动手","者","desktop","传输","命令行","更新","影响","一下","机器","行列","变动","后缀","现在","工作","算机","免费","二","多个","githubusercontent","两个","已经","一句","、","衡量","运动","点击","多人","编辑器","用户名","signed","会","经典","另外","主要","后","或者","起来","月","就是","人工","dds","环境","普通","成功","功能","好者","伴随","为了","：","1991","发行",")","提到","之上","学生","export","代码","不","验证","成为","org","大量","turtle","与","更","内核","月份","一种","让","vmware","ubuntu22.04","fedora","中","无论是","发行版","概念","不太","试试","curl","公司","可视","除了","对","每年","发扬光大","因为","by","字符","放到","en","7","热爱","sources","—","收费","源代码","路径","to","新","/","keyrings","deb","重新","all","6","teleop","领域","你","nodes","场景","一定","参考","量","说干就干","3","版","先要","和","1","六个","光大","最好","多","bash","2022","俱全","37844","share","采用","了","https","一个","还","华丽","之后","二句","是否","奥义",":","=","甚至","gen","的","最为","listener","4","之前","软件","时","出于","在","虚拟机","codename","一位","update","地址","[","乐于","接下","或","~","大学生","可以","维护","run","关注","步骤","环境变量","us","都","只","六个月","并用","打包","开始","gpg","以下","各种","packages","效果","hello","分享","如果","指标","通用","人工智能","原理","linux","依赖","大学","添加","户名","键盘",".","unix","虚拟","好后","upgrade","$","啦","兼容","大小","给","之内","未来","于","一应俱全","编号","千层浪","key","任何人","考虑","18","上下","并且","开源","locale","将","第二个","个","本相","一直","检验","echo","节","当中","workstation","爱好者","macos","sudo","浏览","性能","叫","摩拳擦掌","准确","自行","海龟","示例","想要","设置"," ","软件开发","呢","www","叫做","keyring","humble","至此","实现","计算","看到","utf","计算机","usr","管理","通信","成","但","构建","完成","自己","千层","就","下来","个人","还是","本","提交","名字","动手做","爱好","两年","紧随其后","链接","时间","master","一起","适用","这套","第一个","除此","表示","dev","bug","没有","报错","企业","ubuntu","一","基本相同","依然","并","archive","出现","仿真器","移植","互联","_","22","d","arch","字符串","多用户","我们","启动","介绍","其","应用","其后","操作系统","raw","技术实力","设计","lang","有限","服务器","多用","做","小海","操作","一般","诞生","左右","等待","”","其中","无论","快速","文件","main","决定","试一试","实践","ros2","centos","代表","rosdistro","问题","情况","redhat","最","后续","null","建议","擦掌","教程","大","常用","第二","同时","\"","etc","通讯","唯一标准","很","他","成熟","各种各样","各个","何人","等等","ros","命名","ubuntu20.04","智能","一样","guyuehome","资料","联网","会加","技术","命令","真器","传播","connect","回到","看出","开发","编辑","release","各样","download","课程","一套","版本","模式","编码","这","|","镜像","电脑","(","lc","稳定","热情","节点","指令","py","环境变","第二句","程序","多任务","创建","越来越","windows","lts","探索","了解","吸引","绑定","随意","操作界面","任何","products","com","简介","可视化","浏览器","标准","如遇","也","每","apt","测试","仿真","需要","原本","强大","操作方法","熟悉","来讲","等","所以","比如","机器人","开发者","os","talker"],"title":"ROS2安装方法","title_tokens":["安装","ros2","方法"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2","text":"本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。","text_tokens":["linux","，","先要","安装","一下","底层","操作","一起","了解","—","。","ros2","前先要","系统","最","重要","一种","节","的","我们","本","操作系统"],"title":"ROS2安装方法","title_tokens":["安装","ros2","方法"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#linux","text":"时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。","text_tokens":["相同","，","适合","讲解","通过","过程","动手做","爱好","和","互联网","修复","应用程序","应该","方法","光大","到","界面","虽然","时间","最好","一起","适用","这套","多","加入","越来","bug","没有","下","企业","ubuntu","了","一个","还","基本相同","先","等","说干就干","并","实力","华丽","任务","之后","出现","有","互联","基本","反馈","甚至","林纳斯","的","多用户","很多","我们","上","使用","其","发展","应用","之前","软件","出于","在","唯一","操作系统","不同","？","年","动手","技术实力","设计","一位","有限","安装","乐于","服务器","或","行列","多用","做","把","操作","现在","一般","大学生","可以","算机","维护","免费","真理","是","其中","不仅","都","快速","决定","。","实践","并用","ros2","打包","centos","已经","、","衡量","问题","系统","个人爱好","情况","多人","各种","redhat","最","迅猛","分享","会","另外","主要","教程","后","一石激起千层浪","起来","或者","就是","指标","通用","大","原理","常用","linux","外衣","依赖","大学","功能","好者","伴随","其他","核心","1991","唯一标准","unix","发行","他","底层","提到","成熟","之上","各种各样","激起","学生","何人","代码","等等","命名","不","服务","兼容","一样","一些","给","开放","千层浪","联网","成为","任何人","技术","大量","务器","传播","与","回到","原有","更","并且","内核","开发","之一","开源","各样","一套","版本","模式","本相","支持","这","fedora","中","检验","此时","镜像","发行版","当中","概念","不太","这个","发扬","爱好者","稳定","热情","macos","公司","可视","商业","对","用户","发扬光大","每年","性能","什么","叫","程序","多任务","准确","越来越","windows","放到","尚","应用软件","热爱","吸引","绑定"," ","操作界面","激发","任何","—","收费","源代码","呢","叫做","可视化","加上","标准","精神","重新","也","每","实现","计算","看到","计算机","重要","需要","管理","原本","场景","强大","成","熟悉","已有","来讲","但","操作方法","参考","自己","千层","硬件","就","量","目前","个人","开发者","芬兰","所以","本","比如","提交","名字"],"title":"Linux系统简介","title_tokens":["系统","linux","简介"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu","text":"我们后续课程使用到的Linux发行版就是 ubuntu系统 。 Ubuntu诞生于2004年10月份， 每六个月发布一个新版本 ，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。","text_tokens":["版","，","讲解","顺序","通过","快","互联网","两年","如何","紧随其后","六个","04","方法","到","直接","多","除此","但是","2022","俱全","升级","表示","以","最大","ubuntu","选择","时候","可能","了","一个","还","依然","2004","持续","出现","有","移植","之后","合适","互联","10","22","网络","的","我们","很多","介绍","上","使用","占据","4","接触","软件","应用","之前","其后","时","在","虚拟机","不同","年","位置","好","更新","影响","紧随","安装","一下","机器","变动","或","后缀","诞生","可以","免费","维护","关注","其中","是","无论","都","只","每隔","六个月","文件","试一试","。","代表","之外","已经","、","长期","系统","各种","编辑器","效果","后续","会","如果","建议","擦掌","教程","主要","月","进行","就是","人工","人工智能","常用","linux","环境","普通","其他","为了","通讯","发行","很","一次","为例","各个","虚拟","ubuntu20.04","智能","之内","未来","出","于","这里","一应俱全","编号","资料","联网","会加","考虑","比较","18","看出","一应","开发","月份","编辑","更","大家","课程","版本","个","从","让","一直","ubuntu22.04","支持","第一","中","无论是","发行版","电脑","这样","发挥","发布","优先","稳定","除了","数字","用户","浏览","开发者","性能","绝对","因为","摩拳擦掌","自行","windows","第一次","lts","上层","想要","硬盘"," ","保证","软件开发","除此之外","新","浏览器","再","每","也","领域","你","重要","5","熟悉","已有","一定","硬件","自己","等","所以","就","比如","参考","机器人","还是","本"],"title":"Ubuntu系统简介","title_tokens":["系统","简介","ubuntu"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu_1","text":"虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下：","text_tokens":["相同","环境","，","其他软件","同时","和","安装","地址","其他","：",".","之上","操作","html","虚拟","工作","可以","自行","步骤","啦","是"," ","采用","下载","https","一个","products","这里","com","www","。","多个","并","准备","/","叫做","请","pro","开始","系统",":","-","evaluation","大家","运行","另外","的","我们","让","vmware","已有","构建","完成","后","软件","如下","就","在","虚拟机","workstation"],"title":"Ubuntu虚拟机安装","title_tokens":["安装","虚拟","虚拟机","ubuntu"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1","text":"下载链接： https://ubuntu.com/download/desktop","text_tokens":["download","/","desktop",":","：","ubuntu"," ",".","下载","https","链接","com"],"title":"1. 下载系统镜像","title_tokens":["1","系统","镜像"," ",".","下载"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2","text":"","text_tokens":[],"title":"2. 在虚拟机中创建系统","title_tokens":["虚拟","创建","系统","2","中"," ",".","在","虚拟机"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3","text":"","text_tokens":[],"title":"3. 设置虚拟机硬盘大小","title_tokens":["虚拟","大小","硬盘","设置"," ",".","虚拟机","3"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4-ubuntu","text":"","text_tokens":[],"title":"4. 设置Ubuntu镜像路径","title_tokens":["路径","设置","4","镜像","ubuntu"," ","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#5","text":"","text_tokens":[],"title":"5. 启动虚拟机","title_tokens":["虚拟"," ","启动","5",".","虚拟机"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#6","text":"","text_tokens":[],"title":"6. 设置用户名和密码","title_tokens":["户名","和","设置"," ",".","用户名","6","用户","密码"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#7","text":"","text_tokens":[],"title":"7. 等待系统安装","title_tokens":["等待","7","系统","安装"," ","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#8","text":"Ubuntu系统安装好后，大家可以先随意使用熟悉一下。","text_tokens":["。","，","好后","可以","熟悉","使用","系统","安装","一下","随意","ubuntu","大家","先"],"title":"8. 完成安装","title_tokens":["8","完成","安装"," ","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_1","text":"接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下：","text_tokens":["，","安装","：","接下","接下来","把","到","可以","步骤","ubuntu","了","。","ros2","系统","我们","下来","就","中","如下"],"title":"ROS2系统安装","title_tokens":["系统","ros2","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1_1","text":"$ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8","text_tokens":["lc","lang","update",".","sudo","export","$","en","us"," ","&&","locales","8","apt","-","_","all","=","locale","gen","utf","install"],"title":"1. 设置编码","title_tokens":["编码","1","设置"," ","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2_1","text":"$ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844","text_tokens":["，","source","gnupg","master","37844","dev","share","报错","ubuntu","https","&&","failed","archive",":","tee","_",">","=","d","lsb","arch","http","--","]","dpkg","“","raw","codename","update","[","”","可","main","ros2","githubusercontent","rosdistro","gpg","-","packages","signed","null","\"","etc",".",")","$","ros","guyuehome","key","org","connect","release","ssl","install","|","architecture","echo","(","curl","o","sudo","list","by"," ","sources","to","com","www","/","keyrings","keyring","deb","如遇","apt","usr","参考","print","os"],"title":"2. 添加源","title_tokens":["添加","2"," ",".","源"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3-ros2","text":"$ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop","text_tokens":["upgrade","$","install","ros","humble","desktop","update","apt","-"," ","sudo"],"title":"3. 安装ROS2","title_tokens":["ros2","安装"," ",".","3"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4","text":"$ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。","text_tokens":["，","\"","好","source","安装",".","~","opt","$","ros","bash"," ","了","。","ros2","/","已经","humble","系统","至此",">","setup","bashrc","就","中","在","echo"],"title":"4. 设置环境变量","title_tokens":["环境变","环境","变量","环境变量","4","设置"," ","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_2","text":"为了验证ROS2安装成功，我们可以通过以下示例进行测试。","text_tokens":["。","ros2","，","可以","成功","我们","通过","示例","安装","为了","以下","进行","测试","验证"],"title":"ROS2示例测试","title_tokens":["测试","ros2","示例"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_1","text":"先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。","text_tokens":["，","吧","试试","第二","者","终端","发布","通过","传输","：","节点","说明","底层","py","字符","$","run","发布者","来","第一个","”","没有","正常"," ","数据","“","一个","二个","先","world","。","ros2","两个","命令","是否","问题","系统","以下","cpp","_","hello","订阅","如果","重要","第二个","nodes","字符串","的","通信","启动","最为","listener","第一","中","dds","在","talker","demo"],"title":"示例一：命令行示例","title_tokens":["命令","命令行","示例","一","："]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_2","text":"再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。","text_tokens":["关于","，","第二","控制","终端","成功","键盘","安装","：","node","指令","节点","小海","左右","可以","ros","海龟","$","来","run","第二句","示例","”","啦","探索"," ","分别","一个","—","试一试","。","key","ros2","两个","真器","turtlesim","持续","一句","再","仿真器","turtle","二句","运动","仿真","奥义","小海龟","点击","上下","_","上下左右","至此","第一句","teleop","后续","将","经典","运行","蕴藏","的","启动","按键","我们","中将","上","第一","教程","该","如下","中","就","背景","在","蓝色","“"],"title":"示例二：小海龟仿真示例","title_tokens":["小海","海龟","示例","仿真","小海龟","：","二"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/","text":"ROS2命令行操作 在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。 Linux中的命令行 类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。 启动方式 回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。 常用命令操作 我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。 ROS2中的命令行 ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。 运行节点程序 想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 查看节点信息 当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim 查看话题信息 当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose 发布话题消息 想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\" 发送服务请求 一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\" 发送动作目标 想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\" 录制控制命令 系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["相同","终端","哪些","逛来逛去","rotate","能够","cmd","约束","到","虽然","主目录","实验室","尝试","以","工具","不用","下","正常","时候","可能","选择","angular","角度","参数","先","alt","规则","turtlesim","rotateabsolute","解决","精心","列出",">","死机","随着","info","运行","怎么","很多","继续","深入","上","使用","而是","执行","背景","“","保留","？","好","确实","把","右键","一二","觉得","这些","来","感觉","当前","是","又","慢慢","权限","。","件夹","有点","感兴趣","标目","系统","-","pub","适应","呀","进行","类似","twist","控制","想","其他","ls","至于","核心","复制到","一二十","一次","为例","服务","geometry","这种","一些","出","这里","原有","体操","看中","笔记","名称","大家","完全","看不到","1.8","第一","该","此时","rosbag","这样","这个","硬","发布","看看","这项","推出","改了","炫酷","2.0","统管","用户","什么","list","绝对","移入","什么样","笔记本","第一次","既","另","x","哪","数据","action","子目录","加上","再","知道","魅力","目标目录","拷贝到","重要","枯燥","此","写字","段","感兴","根据","，","例如","看似","name","通过","产生","显示","专门","node","如何","04","不到","接下来","0.0","直接","mkdir","案例","复制","实验","但是","找",",","目标","删除","管理员","则","有","2","拷贝","小海龟","改变","既定","文件夹","具体操作","还有","文件名称","当前工作","--","接触","]","如下","逛来","不同","命令行","y","一下","搜索","查","工作","goal","窗口","多个","很少","忙","已经","、","ctrl","子目","材料","}","send","编辑器","请求","会","pwd","主要","后","从来","起来","或者","就是","选项","需求","功能","：","带领","度高","受","被","不","容易","所在","跟","录制","turtle","保持","与","数量","集成","更","一种","死记硬背","后边","随身带","十个","让","以上","中","turtle1","17","概念","不太","动作","转","可视","定制","对","兴趣","发指","msgs","因为","某","z","字符","原因","—","路径","总","/","随身","目","play","cd","t","teleop","你","场景","一定","terminal","3","二十个","改名","和","1","只是","帮上","其上","不变","现出","列表","多","rate","2022","快捷键","absolute","vel","新建","了","总有","一个","还","msg","想象",":","spawn","绝对路径","cp","的","商场","结合","死记","现有","之前","软件","'","一二十个","语法","在","…","科幻电影","轻松","[","接下","或","0.2","必不可少","可以","run","都","若","record","衣服","gedit","{","各种","用","买","如果","信息","黑客","一点","太","每次","linux","指定","一只","11","要","呈现出","键盘","调试","初次","内容",".","一系","一步","用到","$","啦","干什么","linear","并不一定","未来","于","key","二十","mv","布料","电影","将","进一步","一直","为","40","echo","它","call","目的","自主","提供","sudo","感受","海龟","目录","服装","及","文件名","想要"," ","多种","即可","呢","令人发指","发送","播放","bag","便捷","叫做","学习","笔记本电脑","记忆","输入","科幻","查看","体验","0","实现","本节","看到","地","管理","成","但","多到","完成","自己","就","下来","还是","本","系统管理员","复现","背","链接","一起","第一个","快捷","表示","一","没有","不是","pose","灵活","并","仿真器","所有","topic","_","里边","+","大致","异常","我们","启动","srv","某段","应用","打开","消息","<","设计","至今","机制","对于","一系列","由","源文件","孤单","小海","操作","”","难以","rm","无论","均","文件","试一试","麻烦","ros2","令人","片段","问题","某个","详细信息","rosbag2","一件","呈现","详细","系列","一边","常用","满足","\"","不过","小","逛去","不一","很","ros","35","商家","一样","为什么","真器","命令","调用","不可","回到","编辑","service","子","这","电脑","款式","具体","手","及其","话题","方式","体会","指令","节点","动","精心设计","常用命令","程序","创建","了解","去","db3","可视化","做好","也","仿真","每","深色","需要","熟悉","来讲","鼠标","等","所以","theta","比如"],"title":"ROS2命令行操作","title_tokens":["操作","ros2","命令行","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2","text":"在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。","text_tokens":["，","不太","命令行","调试","带领","一次","小海","到","感受","一步","案例","可以","海龟","多","第一次","工具","时候"," ","了","可能","—","。","ros2","有点","命令","学习","魅力","小海龟","更","适应","大家","本节","随着","将","会","如果","重要","运行","一种","的","我们","进一步","深入","第一","使用","接触","一定","之前","中","在"],"title":"ROS2命令行操作","title_tokens":["操作","ros2","命令行","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#linux","text":"类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。","text_tokens":["，","看似","逛来逛去","和","能够","约束","其上","虽然","现出","多","但是","工具","没有","不是","时候","了","总有","一个","先","灵活","规则","并","想象","所有","解决","精心","里边","既定","的","异常","我们","商场","很多","使用","结合","现有","软件","在","逛来","保留","？","科幻电影","设计","命令行","至今","对于","必不可少","操作","可以","这些","来","是","无论","都","。","衣服","麻烦","片段","已经","、","问题","材料","各种","买","会","一点","呀","一件","起来","呈现","就是","每次","类似","linux","满足","需求","功能","呈现出","其他","小","逛去","不一","度高","受","被","ros","不","容易","服务","这种","商家","一样","一些","并不一定","为什么","于","这里","命令","不可","布料","看中","电影","大家","一种","完全","一直","为","中","此时","这样","款式","手","自主","方式","推出","可视","炫酷","定制","什么","某","精心设计","什么样","服装","想要"," ","哪","呢","去","便捷","可视化","做好","科幻","看到","你","场景","成","来讲","一定","但","自己","等","根据","就","比如","还是"],"title":"Linux中的命令行","title_tokens":["linux","命令","的","命令行","中"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_1","text":"回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。","text_tokens":["二十个","，","终端","通过","专门","背","不到","到","列表","但是","快捷","快捷键","工具","不用","不是","选择","正常","时候","参数","alt","并","有","+","死机","随着","怎么","的","启动","我们","而是","使用","上","软件","应用","背景","打开","在","一二十个","科幻电影","命令行","一下","搜索","一系列","确实","右键","操作","一二","觉得","可以","来","窗口","难以","是","又","慢慢","都","。","令人","很少","ctrl","用","会","黑客","后","从来","系列","就是","常用","功能","不过","其他","：","至于","很","初次","一二十","一系","用到","所在","为什么","命令","数量","二十","回到","笔记","电影","大家","看不到","随身带","十个","这","中","电脑","这个","手","硬","方式","这项","体会","指令","对","发指","什么","因为","字符","笔记本","既","及","原因"," ","多种","即可","呢","令人发指","叫做","随身","笔记本电脑","记忆","输入","科幻","也","魅力","t","深色","看到","需要","枯燥","写字","熟悉","鼠标","一定","多到","所以","就","terminal","本"],"title":"启动方式","title_tokens":["启动","方式"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_2","text":"我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。","text_tokens":["，","改名","系统管理员","显示","只是","链接","mkdir","主目录","复制","不变","列表","多","找","一","以","没有","下","新建","了","一个","先","目标","删除","管理员","则","所有","拷贝","绝对路径","列出",">","cp","改变","文件夹","文件名称","的","我们","当前工作","死记","执行","]","打开","语法","“","<","…","[","一下","对于","由","或","查","源文件","把","工作","可以","这些","”","来","感觉","当前","rm","权限","若","均","文件","。","件夹","gedit","多个","标目","某个","子目","系统","编辑器","用","会","pwd","或者","一边","常用","linux","指定","选项","功能","ls","：","复制到","不","未来","出","命令","保持","mv","回到","原有","名称","编辑","大家","将","死记硬背","为","该","中","它","及其","目的","指令","sudo","统管","用户","绝对","常用命令","移入","目录","创建","及","文件名","另"," ","路径","/","目","子目录","体验","也","cd","目标目录","拷贝到","地","需要","管理","此","熟悉","就"],"title":"常用命令操作","title_tokens":["常用命令","操作","命令","常用"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2_1","text":"ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。","text_tokens":["相同","linux","不同","，","概念","具体","话题","命令行","不过","目的","机制","功能","一系列","核心","node","节点","接下","对","内容","接下来","什么","小海","操作","一系","为例","感受","可以","海龟","一起","第一个","表示","以","干什么","跟","下","了解","都"," ","一个","参数","还","总","。","ros2","命令","所有","与","集成","有","仿真","也","topic","体操","小海龟","具体操作","大致","后边","的","我们","继续","主要","第一","系列","下来","中","比如","就","在"],"title":"ROS2中的命令行","title_tokens":["ros2","命令","的","命令行","中"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_3","text":"想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["，","例如","要","控制","和","键盘","：","node","节点","操作","可以","$","run","海龟","想要"," ","key","ros2","turtlesim","命令","turtle","某个","仿真","_","teleop","运行","我们","使用","进行","中"],"title":"运行节点程序","title_tokens":["程序","运行","节点"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_4","text":"当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim","text_tokens":["？","它","，","哪些","：","node","节点","对","兴趣","list","某","可以","ros","$","来","啦","当前"," ","都","呢","一个","ros2","/","命令","感兴趣","turtlesim","加上","有","查看","知道","系统","详细信息","info","如果","信息","运行","的","子","感兴","详细","就","中","这样"],"title":"查看节点信息","title_tokens":["信息","查看","节点"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_5","text":"当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose","text_tokens":["，","想","话题","：","list","某","$","当前"," ","都","即可","呢","一个","还","数据","pose","试一试","ros2","/","命令","加上","有","查看","系统","topic","看到","的","子","使用","如下","中","turtle1","消息","echo"],"title":"查看话题信息","title_tokens":["信息","话题","查看"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_6","text":"想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\"","text_tokens":["，","控制","发布","\"","通过","话题","命令行","1","y","：","指令","2.0","cmd","0.0","动","msgs","直接","z","可以","$","海龟","rate","geometry","angular","linear","想要","vel","x"," ","msg","还",",","ros2","/","命令","{","}",":","topic","pub","_","我们","1.8","--","起来","turtle1","twist"],"title":"发布话题消息","title_tokens":["发布","消息","话题"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_7","text":"一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\"","text_tokens":["一只","，","call","\"","name","产生","y","提供","：","改了","0.2","孤单","$","海龟","来","服务","x"," ","一个","—","还",",","试一试","ros2","真器","/","turtlesim","仿真器","再","{","调用","仿真",":","spawn","2","}","太","service","我们","srv","theta","'"],"title":"发送服务请求","title_tokens":["发送","服务","请求"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_8","text":"想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\"","text_tokens":["指定","，","具体","这个","\"","动作","通过","命令行","rotate","转","提供","帮上","：","到","可以","$","海龟","goal","absolute","想要","角度","发送"," ","一个","action","目标","ros2","真器","忙","命令","/","turtlesim","仿真器","send","仿真","rotateabsolute",":","_","的","让","完成","theta","比如","中","turtle1","这样","3"],"title":"发送动作目标","title_tokens":["发送","动作","目标"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_9","text":"系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["？","，","11","看看","好","功能","轻松","复现","：","如何","04","很","cmd",".","把","可以","实验室","$","尝试","35","实验","啦","2022","想要","vel"," ","播放","数据","bag","turtle1","record","一个","。","ros2","db3","/","命令","录制","再","有","与","系统","每","play","回到","-","0","_","用","实现","大家","rosbag2","如果","运行","还有","的","我们","很多","以上","这","某段","段","子","40","自己","下来","中","就是","还是","rosbag","17","常用"],"title":"录制控制命令","title_tokens":["录制","控制","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","text":"ROS2开发环境配置 ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。 Git git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git 下载教程源码 《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。 VSCode Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download VSCode插件配置 为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。 中文语言包 Python插件 C++插件 CMake插件 vscode-icons ROS插件 Msg Language Support Visual Studio IntelliCode URDF Markdown All in One VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["markdown","，","终端","功能强大","和","icons","修复","特性","如何","丰富","扩展","链接","官方网","方法","直接","略显","之间","驱动","官方","visual","成千上万","多","工具","bug","可能","了","https","一个","理工","先","还","离不开","准备","msg","并","而生","两款","成千","之后","编译","有","所有","判断","vscode",":","in","一款","_","里边","文件夹","studio","广泛","的","我们","推荐","很多","简称","审核","使用","one","软件","发展","应用","在","听到","操作系统","？","不同","年","python","设计","好","合并","微软","安装","记事","搜索","哪里","一系列","机器","做","人","变更","操作","复杂","这些","可以","国内","language","源码","是","一行","clone","c++","都","只","快速","迅速","项目","自动","文件","。","管理软件","ros2","中会","多个","件夹","自带","记事本","插件","个人","、","系统","几千","-","用","编辑器","最","后续","会","如果","组件","另外","配置","千上万","教程","进行","系列","非常","人工","无限","每次","常听到","中文","linux","环境","非常简单","不开","功能","为了","：","》","support",".","之父","内容","调试","一系","《","几千万","代码","ros","等等","被","不","$","语言包","管理工具","编写","一些","给","下载","神兵","出","guyuehome","这里","官方网站","成为","简单","大量","命令","21","下载方式","tutorials","集成","与","轻量","不会","开发","更","编辑","大家","高效","码云","增加","冲突","开源","课程","gitee","众多","版本","download","install","因","让","有些","这","git","code","2015","支持","intellicode","以上","中","作为","这样","搭建","以及","cmake","具体","喜欢","提供","方式","推出","macos","visualstudio","便于","sudo","网上","浏览","开发工具","github","上万","windows","示例","讲"," ","广泛应用","呢","—","linus","com","源代码","新","入门","/","浏览器","切换","查看","贡献","网站","也","apt","urdf","all","看到","行","重要","需要","管理","肯定","强大","已有","利器","完成","千万","硬件","但","所以","这款","就","比如","语言","机器人","开发者","自己","提交"],"title":"ROS2开发环境配置","title_tokens":["环境","ros2","开发","配置"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros2","text":"ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。","text_tokens":["？","环境","，","不开","和","提供","如何","机器","做","开发工具","代码","ros","这些","示例","源码","工具","编写","一些","给","呢","—","先","离不开","准备","。","中会","大量","两款","编译","、","查看","vscode","开发","大家","课程","重要","需要","配置","肯定","我们","的","推荐","git","完成","机器人"],"title":"ROS2开发环境配置","title_tokens":["环境","ros2","开发","配置"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#git","text":"git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git","text_tokens":["，","终端","和","修复","特性","方法","直接","之间","驱动","成千上万","bug","工具","可能","了","一个","理工","并","而生","成千","之后","有","所有","判断","一款","广泛","的","我们","审核","使用","软件","发展","应用","在","听到","不同","设计","合并","安装","哪里","人","变更","这些","可以","国内","是","一行","都","迅速","项目","自动","。","管理软件","多个","系统","几千","会","千上万","进行","非常","人工","每次","常听到","linux","非常简单","功能","之父","内容","几千万","代码","等等","被","$","不","管理工具","简单","命令","不会","开发","高效","gitee","码云","增加","冲突","开源","众多","大家","版本","install","因","让","有些","这","git","中","以及","具体","sudo","github","上万"," ","广泛应用","—","linus","新","切换","贡献","网站","也","apt","看到","行","需要","管理","肯定","已有","千万","完成","硬件","所以","这款","就","比如","开发者","提交"],"title":"Git","title_tokens":["git"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_1","text":"《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。","text_tokens":["这里","环境","，","好","。","和","记事","方式","：","》",".","浏览","略显","复杂","《","代码","$","多","源码","是","clone","讲"," ","下载","https","一个","还","guyuehome","com","文件","记事本","件夹","ros2","自带","入门","21","下载方式","/","tutorials","浏览器","有","查看","集成","—",":","系统","vscode","更","_","开发","用","gitee","里边","文件夹","课程","会","如果","另外","的","很多","推荐","git","就","中","这样"],"title":"下载教程源码","title_tokens":["源码","下载","教程"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode","text":"Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download","text_tokens":["linux","搭建","，","年","功能强大","功能","微软","和","推出","macos","：","visualstudio","丰富",".","扩展","链接","官方网","操作","官方","代码","visual","可以","下载","windows","是"," ","神兵","快速","一个","https","源代码","项目","官方网站","成为","。","com","/","、","网站","vscode","轻量","系统",":","开发","编辑","编辑器","download","studio","组件","的","强大","简称","支持","利器","code","2015","但","非常","在","操作系统"],"title":"VSCode","title_tokens":["vscode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode_1","text":"为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。","text_tokens":["，","功能","安装","为了","便于","一系列","调试","扩展","一系","可以","还","。","ros2","插件","与","vscode","开发","后续","的","我们","系列","无限"],"title":"VSCode插件配置","title_tokens":["vscode","插件","配置"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_2","text":"","text_tokens":[],"title":"中文语言包","title_tokens":["语言包","语言","中文"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#python","text":"","text_tokens":[],"title":"Python插件","title_tokens":["插件","python"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#c","text":"","text_tokens":[],"title":"C++插件","title_tokens":["插件","c++"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#cmake","text":"","text_tokens":[],"title":"CMake插件","title_tokens":["插件","cmake"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode-icons","text":"","text_tokens":[],"title":"vscode-icons","title_tokens":["vscode","-","icons"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros","text":"","text_tokens":[],"title":"ROS插件","title_tokens":["ros","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#msg-language-support","text":"","text_tokens":[],"title":"Msg Language Support","title_tokens":[" ","support","msg","language"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#visual-studio-intellicode","text":"","text_tokens":[],"title":"Visual Studio IntelliCode","title_tokens":["visual","studio","intellicode"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#urdf","text":"","text_tokens":[],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#markdown-all-in-one","text":"VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["环境","，","喜欢","搜索","网上","可以","作为","只","出","。","插件","vscode","也","开发","最","大家","众多","配置","的","推荐","支持","以上","自己","个人","在"],"title":"Markdown All in One","title_tokens":["markdown","one","in","all"," "]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/","text":"DDS Hello，大家好，欢迎来到《ROS2入门21讲》，我是主讲人古月。 终于讲到ROS2中最为重大的变化—— DDS ，我们在前边课程中学习的话题、服务、动作，他们底层通信的具体实现过程，都是靠DDS来完成的，它相当于是 ROS机器人系统中的神经网络 。 通信模型 DDS的核心是通信，能够实现通信的模型和软件框架非常多，这里我们列出常用的四种模型。 第一种， 点对点模型 ，许多客户端连接到一个服务端，每次通信时，通信双方必须建立一条连接。当通信节点增多时，连接数也会增多。而且每个客户端都需要知道服务器的具体地址和所提供的服务，一旦服务器地址发生变化，所有客户端都会受到影响。 第二种， Broker模型 ，针对点对点模型进行了优化，由Broker集中处理所有人的请求，并进一步找到真正能响应该服务的角色。这样客户端就不用关心服务器的具体地址了。不过问题也很明显，Broker作为核心，它的处理速度会影响所有节点的效率，当系统规模增长到一定程度，Broker就会成为整个系统的性能瓶颈。更麻烦是，如果Broker发生异常，可能导致整个系统都无法正常运转。之前的ROS1系统，使用的就是类似这样的架构。 第三种， 广播模型 ，所有节点都可以在通道上广播消息，并且节点都可以收到消息。这个模型解决了服务器地址的问题，而且通信双方也不用单独建立连接，但是广播通道上的消息太多了，所有节点都必须关心每条消息，其实很多是和自己没有关系的。 第四种，就是 以数据为中心的DDS模型 了，这种模型与广播模型有些类似，所有节点都可以在DataBus上发布和订阅消息。但它的先进之处在于，通信中包含了很多并行的通路，每个节点可以只关心自己感兴趣的消息，忽略不感兴趣的消息，有点像是一个旋转火锅，各种好吃的都在这个DataBus传送，我们只需要拿自己想吃的就行，其他的和我们没有关系。 可见，在这几种通信模型中，DDS的优势更加明显。 DDS DDS并不是一个新的通信方式，在ROS2之前，DDS已经广泛应用在很多领域，比如航空，国防，交通，医疗，能源等。 比如在自动驾驶领域，通常会存在感知，预测，决策和定位等模块，这些模块都需要非常高速和频繁地交换数据。借助DDS，可以很好地满足它们的通信需求。 什么是DDS 好啦，说了半天DDS，到底啥意思呢？我们来做一个完整的介绍 DDS的全称是 Data Distribution Service ，也就是 数据分发服务 ，2004年由 对象管理组织OMG 发布和维护，是一套专门为 实时系统 设计的 数据分发/订阅标准 ，最早应用于美国海军， 解决舰船复杂网络环境中大量软件升级的兼容性问题，现在已经成为强制标准。 DDS强调 以数据为中心 ，可以提供丰富的 服务质量策略 ，以保障数据进行实时、高效、灵活地分发，可满足各种分布式实时通信应用需求。 这里也提一下对象管理组织OMG，成立于1989年，它的使命是开发技术标准，为数以千计的垂直行业提供真实的价值，比如大家课可能听说过的统一建模语言SYSML和UML，还有中间件标准CORBA等，当然还有DDS。 DDS在ROS2中的应用 DDS在ROS2系统中的位置至关重要，所有上层建设都建立在DDS之上。在这个ROS2的架构图中，蓝色和红色部分就是DDS。 刚才我们也提到，DDS是一种通信的标准，就像4G、5G一样，既然是标准，那大家都可以按照这个标准来实现对应的功能，所以华为、高通都有很多5G的技术专利，DDS也是一样， 能够按照DDS标准实现的通信系统很多 ，这里每一个红色模块，就是某一企业或组织实现的一种DDS系统。 既然可选用的DDS这么多，那我们该用哪一个呢？具体而言，他们肯定都符合基本标准，但还是会有性能上的差别，ROS2的原则就是尽量兼容，让用户根据使用场景选择，比如个人开发，我们选择一个开源版本的DDS就行，如果是工业应用，那可能得选择一个商业授权的版本了。 为了实现对多个DDS的兼容，ROS设计了一个 Middleware中间件 ，也就是一个统一的标准，不管我们用那个DDS，保证上层编程使用的函数接口都是一样的。此时兼容性的问题就转移给了DDS厂商，如果他们想让自己的DDS系统进入ROS生态，就得按照ROS的接口标准，开发一个驱动，也就是这个部分。 无论如何，ROS的宗旨不变，要提高软件代码的复用性，下边DDS任你边，上边的软件没影响。 在ROS的四大组成部分中，由于DDS的加入，大大提高了分布式通信系统的综合能力，这样我们在开发机器人的过程中，就不需要纠结通信的问题，可以把更多时间放在其他部分的应用开发上。 质量服务策略QoS DDS为ROS的通信系统提供提供了哪些特性呢？我们通过这个通信模型图来看下。 DDS中的基本结构是 Domain ，Domain将各个应用程序绑定在一起进行通信，回忆下之前我们配置树莓派和电脑通信的时候，配置的那个DOMAIN ID，就是对全局数据空间的分组定义，只有处于同一个DOMAIN小组中的节点才能互相通信。这样可以避免无用数据占用的资源。 DDS中另外一个重要特性就是 质量服务策略，QoS 。 QoS是一种网络传输策略，应用程序指定所需要的网络传输质量行为，QoS服务实现这种行为要求，尽可能地满足客户对通信质量的需求，可以理解为 数据提供者和接收者之间的合约 。 具体会有哪些策略？比如： DEADLINE 策略，表示通信数据必须要在每次截止时间内完成一次通信； HISTORY 策略，表示针对历史数据的一个缓存大小； RELIABILITY 策略，表示数据通信的模式，配置成BEST_EFFORT，就是尽力传输模式，网络情况不好的时候，也要保证数据流畅，此时可能会导致数据丢失，配置成RELIABLE，就是可信赖模式，可以在通信中尽量保证图像的完整性，我们可以根据应用功能场景选择合适的通信模式； DURABILITY 策略，可以配置针对晚加入的节点，也保证有一定的历史数据发送过去，可以让新节点快速适应系统。 所有这些策略在ROS系统中都可以通过类似这样的结构体配置，如果不配置的话，系统也会使用默认的参数。 举一个机器人的例子便于大家理解。 比如我们遥控一个无人机航拍，如果网络情况不好的话，遥控器向无人机发送运动指令的过程，可以用reliable通信模式，保证每一个命令都可以顺利发送给无人机，但是可能会有一些延时，无人机传输图像的过程可以用best effort模式，保证视频的流畅性，但是可能会有掉帧。 如果此时出现一个黑客黑入我们的网络，也没有关系，我们可以给ROS2的通信数据进行加密，黑客也没有办法直接控制无人机。 DDS的加入，让ROS2的通信系统焕然一新，多众多样的通信配置，可以更好的满足不同场景下的机器人应用。 好啦，DDS这么好，那该如何配置和使用呢？我们先带大家入个门。 案例一：在命令行中配置DDS 我们先来试一试在命令行中配置DDS的参数。 启动第一个终端，我们使用best_effort创建一个发布者节点，循环发布任意数据，在另外一个终端中，如果我们使用reliable模型订阅同一话题，无法实现数据通信，如果修改为同样的best_effort，才能实现数据传输。 $ ros2 topic pub /chatter std_msgs/msg/Int32 \"data: 42\" --qos-reliability best_effort $ ros2 topic echo /chatter --qos-reliability reliable $ ros2 topic echo /chatter --qos-reliability best_effort 如何去查看ROS2系统中每一个发布者或者订阅者的QoS策略呢，在topic命令后边跟一个\"--verbose\"参数就行了。 $ ros2 topic info /chatter --verbose 案例二：DDS编程示例 接下来，我们尝试在代码中配置DDS，以之前Hello World话题通信为例。 运行效果 启动两个终端，分别运行发布者和订阅者节点： $ ros2 run learning_qos qos_helloworld_pub $ ros2 run learning_qos qos_helloworld_sub 可以看到两个终端中的通信效果如下，和之前貌似并没有太大区别。 看效果确实差不多，不过底层通信机理上可是有所不同的。 发布者代码解析 我们看下在代码中，如果加入QoS的配置。 learning_qos/qos_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . pub = self . create_publisher ( String , \"chatter\" , qos_profile ) # 创建发布者对象（消息类型、话题名、QoS原则） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"qos_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , }, 订阅者代码解析 订阅者中的QoS配置和发布者类似。 learning_qos/qos_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , qos_profile ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、QoS原则） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"qos_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , 'qos_helloworld_sub = learning_qos.qos_helloworld_sub:main' , ], }, DDS本身是一个非常复杂的系统，ROS2使用的也只是冰山一角，我们主要带领大家认识DDS，更多使用方法和相关内容，大家也可以参考下边的链接进行学习。 参考链接 https://design.ros2.org/articles/ros_on_dds.html https://docs.ros.org/en/humble/Concepts/About-Different-Middleware-Vendors.html https://docs.ros.org/en/humble/How-To-Guides/Working-with-multiple-RMW-implementations.html https://www.bilibili.com/video/BV12z4y167w2","text_tokens":["scripts","corba","终端","供者","建立","哪些","能够","频繁","工业","入个","应用程序","应该","丰富","python3","方法","到","四种","规模","函数","航空","5g","尝试","遥控器","体","加入","publishernode","以","不用","先进","下","正常","选择","可能","不感兴趣","时候","生变","参数","分别","先","集中","subscribernode","建设","解决","并行","int32","列出","更加","库","退出","info","主讲","运行","无法","很多","上","使用","执行","“","针对","？","位置","python","好","单位","到底","class","确实","把","html","这些","vendors","发布者","来","可","其实","是","string","。","有点","感兴趣","不管","一旦","第一种","服务端","self","双方","系统","args","人机","模块","-","pub","适应","1989","同样","处理速度","它们","进行","该用","类似","质量","控制","想","半天","国防","太多","其他","std","刚才","核心","像","》","concepts","而言","底层","一次","某一","为例","相当于","distribution","服务","这种","def","貌似","一些","父类","on","上边","流畅性","multiple","这里","医疗","模型","组成部分","effort","务器","主讲人","性","8","数据通","提示","存在","保证数据","转移","大家","高效","接收者","美国","这么","from","连接","靠","第一","才能","__","那该","此时","作为","蓝色","这样","程度","这个","发布","找到","第三种","掉","带","预测","符合","商业","可信赖","用户","什么","构图","get","publish","架构图","super","上层","保证","哪","数据","像是","world","完整","知道","前边","红色","4g","每条","授权","接收","init","重要","setup","策略","感兴","冰山一角","根据","历史","树莓","增多","，","helloworld","定位","name","过程","通过","专门","中间件","生态","logger","node","如何","publisher","说明","的话","接下来","直接","驱动","一新","案例","交换","听说","我","但是","升级","选用","能响","办法",",","domain","data","2004","有","专利","合适","qosprofile","当于","分布式","基本","作者","@","订阅","网络","还有","--","broker","如下","吃","布式","变化","帧","bin","]","神经网络","定时","不同","年","无论如何","者","借助","bv12z4y167w2","传输","命令行","影响","宗旨","一下","可见","机器","角色","啥意思","现在","复杂","忽略","强调","points","价值","火锅","历史数据","二","分布","history","多个","docs","两个","使命","类型","已经","、","运动","}","video","点对点","42","客户","heard","!","请求","会","另外","配置","终于","entry","shutdown","主要","后","或者","就是","dds","环境","选项","旋转","需求","图像","欢迎","功能","差别","同一个","为了","：","看","进入","通道","最早","入口","带领",")","所有人","提到","输出","之上","而且","coding","代码","信赖","不","销毁","分组","跟","相关","过去","真正","成为","舰船","在于","org","大量","优势","周期","与","更","综合","同一","众多","一种","导致","感知","后边","传送","有些","让","行业","丢失","中","循环","遥控","下边","how","理解","动作","图","便于","效率","秒","对","兴趣","相当","发生","焕然","可是","主","msgs","通路","更好","任","字符","en","rclpy","受到","部分","接口标准","广泛应用","尽可","—","边","合约","to","容性","新","/","解析","分发","据传","第四","来到","领域","你","可信","服务质量","场景","一定","参考","destroy","有人","语言","spin","定时器","和","发生变化","无用","来看","1","特性","只是","实时","既然","按照","华为","四大","middleware","不变","*","%","多","id","延时","了","点","https","一个","msg","import","create","guides","要求",":","尽可能","高速","流畅","=","必须","几种","callback","门","的","包含","冰山","最为","listener","软件","之前","编程","时","建模语言","'","在","技术标准","uml","复用","占用","就行了","qoshistorypolicy","s","地址","[","增长","接下","或","得","全称","qosreliabilitypolicy","每个","组织","可以","维护","run","看下","处","都","只","自动","处理","没","任意","{","保障","无人机","一条","各种","sysml","用","那个","组成","durability","hello","优化","效果","last","如果","太","黑客","信息","当","处于","每次","第四种","指定","大大","要","有所","避免","那","qos",".","内容","海军","《","一步","回调","$","真实","啦","初始化","兼容","大小","居","给","三种","于","chatter","env","无人","none","并且","提高","omg","能源","开源","将","关心","中心","进一步","为","关系","数以千计","顺利","keep","之","echo","速度","它","他们","讲到","神经","至关重要","数据传输","提供","0.5","提供者","广播","连接数","性能","reliable","空间","different","全局","示例","名","i","尽力","console","设置"," ","意思","发送","呢","区别","www","depth","入门","学习","强制","humble","查看","有所不同","实现","举","看到","行","不好","utf","地","usr","管理","通信","成","修改","当然","完成","但","自己","working","就","下来","驾驶","个人","还是","learning","差不多","高通","明显","deadline","implementations","链接","初始","包","之间","时间","一起","第一个","过","表示","一","没有","不是","企业","通常","about","接口","整个","灵活","并","成立","编译","出现","所有","机理","\\","所","topic","_","定义","第二种","例子","运转","只有","第三","重大","不多","课","广泛","字符串","异常","我们","启动","大大提高","介绍","架构","统一","本身","rmw","应用","打开","articles","消息","原则","黑入","设计","；","服务器","由","缓存","发送给","做","兼容性","日志","等待","”","小组","好吃","with","纠结","ros1","拿","无论","截止","具体地址","快速","派","main","文件","试一试","麻烦","ros2","收到","集中处理","提","古月","问题","情况","二种","默认","送给","焕然一新","至关","互相","非常","大","常用","第二","满足","\"","不过","回忆","publishing","视频","subscription","晚","很","交通","样","各个","ros","关闭","说了半天","尽量","一样","timer","编写","sub","对应","guyuehome","完整性","中间","行为","技术","21","命令","design","内","开发","类","建模","航拍","课程","数据通信","一套","版本","由于","service","模式","放在","best","一角","这","填充","垂直","电脑","(","具体","通信模型","对象","话题","profile","（","神经网","#","结构","方式","节点","指令","非常复杂","资源","py","程序","向","创建","决策","databus","讲","绑定","许多","）","com","去","verbose","瓶颈","标准","也","每","能力","兼容性问题","认识","单独","需要","就行","肯定","加密","bilibili","等","框架","所以","比如","客户端","机器人","厂商","reliability"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds","text":"Hello，大家好，欢迎来到《ROS2入门21讲》，我是主讲人古月。 终于讲到ROS2中最为重大的变化—— DDS ，我们在前边课程中学习的话题、服务、动作，他们底层通信的具体实现过程，都是靠DDS来完成的，它相当于是 ROS机器人系统中的神经网络 。","text_tokens":["它","，","他们","具体","好","讲到","话题","欢迎","动作","过程","神经","神经网","》","机器","机器人","相当","底层","《","相当于","ros","来","服务","我","是","讲"," ","都","—","。","ros2","入门","21","学习","、","主讲人","古月","前边","系统","当于","实现","大家","来到","hello","重大","主讲","课程","网络","的","终于","我们","最为","通信","靠","完成","中","dds","变化","在","神经网络"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_1","text":"DDS的核心是通信，能够实现通信的模型和软件框架非常多，这里我们列出常用的四种模型。 第一种， 点对点模型 ，许多客户端连接到一个服务端，每次通信时，通信双方必须建立一条连接。当通信节点增多时，连接数也会增多。而且每个客户端都需要知道服务器的具体地址和所提供的服务，一旦服务器地址发生变化，所有客户端都会受到影响。 第二种， Broker模型 ，针对点对点模型进行了优化，由Broker集中处理所有人的请求，并进一步找到真正能响应该服务的角色。这样客户端就不用关心服务器的具体地址了。不过问题也很明显，Broker作为核心，它的处理速度会影响所有节点的效率，当系统规模增长到一定程度，Broker就会成为整个系统的性能瓶颈。更麻烦是，如果Broker发生异常，可能导致整个系统都无法正常运转。之前的ROS1系统，使用的就是类似这样的架构。 第三种， 广播模型 ，所有节点都可以在通道上广播消息，并且节点都可以收到消息。这个模型解决了服务器地址的问题，而且通信双方也不用单独建立连接，但是广播通道上的消息太多了，所有节点都必须关心每条消息，其实很多是和自己没有关系的。 第四种，就是 以数据为中心的DDS模型 了，这种模型与广播模型有些类似，所有节点都可以在DataBus上发布和订阅消息。但它的先进之处在于，通信中包含了很多并行的通路，每个节点可以只关心自己感兴趣的消息，忽略不感兴趣的消息，有点像是一个旋转火锅，各种好吃的都在这个DataBus传送，我们只需要拿自己想吃的就行，其他的和我们没有关系。 可见，在这几种通信模型中，DDS的优势更加明显。","text_tokens":["增多","，","明显","建立","和","能够","发生变化","应该","到","四种","规模","多","但是","以","不用","没有","先进","正常","可能","了","不感兴趣","生变","一个","能响","整个","并","集中","所有","所","解决","并行","列出","更加","第二种","必须","运转","第三","订阅","几种","无法","的","我们","异常","很多","包含","上","使用","broker","架构","软件","之前","吃","时","变化","在","消息","针对","影响","地址","可见","服务器","增长","由","角色","每个","忽略","可以","好吃","其实","是","火锅","ros1","处","拿","都","具体地址","只","。","麻烦","收到","处理","集中处理","有点","感兴趣","一旦","第一种","服务端","问题","双方","系统","一条","各种","点对点","客户","二种","优化","请求","会","如果","当","处理速度","进行","非常","就是","dds","每次","第四种","类似","常用","第二","旋转","想","太多","不过","其他","核心","通道","很","所有人","而且","一步","服务","这种","三种","真正","这里","模型","成为","在于","优势","务器","与","并且","更","一种","导致","连接","关心","中心","进一步","有些","传送","第一","这","为","关系","中","作为","之","这样","速度","它","具体","程度","这个","发布","通信模型","找到","第三种","提供","效率","节点","兴趣","发生","广播","连接数","性能","通路","受到","databus"," ","许多","数据","像是","瓶颈","知道","也","第四","实现","每条","行","单独","需要","通信","一定","但","感兴","自己","有人","框架","就","客户端"],"title":"通信模型","title_tokens":["模型","通信","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_1","text":"DDS并不是一个新的通信方式，在ROS2之前，DDS已经广泛应用在很多领域，比如航空，国防，交通，医疗，能源等。 比如在自动驾驶领域，通常会存在感知，预测，决策和定位等模块，这些模块都需要非常高速和频繁地交换数据。借助DDS，可以很好地满足它们的通信需求。","text_tokens":["，","驾驶","满足","定位","借助","国防","好","需求","和","频繁","预测","方式","很","交通","这些","可以","航空","交换","决策","不是","广泛应用"," ","通常","都","一个","数据","医疗","自动","。","并","ros2","新","已经","模块","存在","高速","能源","领域","会","地","广泛","需要","感知","的","通信","很多","它们","等","之前","应用","比如","dds","非常","在"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_2","text":"好啦，说了半天DDS，到底啥意思呢？我们来做一个完整的介绍 DDS的全称是 Data Distribution Service ，也就是 数据分发服务 ，2004年由 对象管理组织OMG 发布和维护，是一套专门为 实时系统 设计的 数据分发/订阅标准 ，最早应用于美国海军， 解决舰船复杂网络环境中大量软件升级的兼容性问题，现在已经成为强制标准。 DDS强调 以数据为中心 ，可以提供丰富的 服务质量策略 ，以保障数据进行实时、高效、灵活地分发，可满足各种分布式实时通信应用需求。 这里也提一下对象管理组织OMG，成立于1989年，它的使命是开发技术标准，为数以千计的垂直行业提供真实的价值，比如大家课可能听说过的统一建模语言SYSML和UML，还有中间件标准CORBA等，当然还有DDS。","text_tokens":["corba","，","和","专门","中间件","实时","丰富","听说","过","升级","以","可能","一个","灵活","data","成立","2004","解决","分布式","订阅","网络","课","还有","的","我们","介绍","统一","软件","应用","布式","建模语言","技术标准","uml","？","年","好","设计","一下","到底","由","做","全称","兼容性","啥意思","现在","复杂","组织","可以","维护","强调","来","可","价值","是","分布","。","提","使命","已经","、","问题","系统","保障","各种","sysml","1989","进行","就是","dds","环境","质量","满足","半天","需求","最早","海军","distribution","说了半天","服务","真实","啦","兼容","于","这里","舰船","成为","中间","技术","大量","开发","omg","高效","大家","建模","美国","一套","service","中心","行业","为","数以千计","中","垂直","它","发布","对象","提供"," ","意思","数据","呢","容性","/","完整","强制","标准","分发","也","兼容性问题","地","管理","服务质量","通信","策略","当然","语言","等","比如"],"title":"什么是DDS","title_tokens":["是","什么","dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#ddsros2","text":"DDS在ROS2系统中的位置至关重要，所有上层建设都建立在DDS之上。在这个ROS2的架构图中，蓝色和红色部分就是DDS。 刚才我们也提到，DDS是一种通信的标准，就像4G、5G一样，既然是标准，那大家都可以按照这个标准来实现对应的功能，所以华为、高通都有很多5G的技术专利，DDS也是一样， 能够按照DDS标准实现的通信系统很多 ，这里每一个红色模块，就是某一企业或组织实现的一种DDS系统。 既然可选用的DDS这么多，那我们该用哪一个呢？具体而言，他们肯定都符合基本标准，但还是会有性能上的差别，ROS2的原则就是尽量兼容，让用户根据使用场景选择，比如个人开发，我们选择一个开源版本的DDS就行，如果是工业应用，那可能得选择一个商业授权的版本了。 为了实现对多个DDS的兼容，ROS设计了一个 Middleware中间件 ，也就是一个统一的标准，不管我们用那个DDS，保证上层编程使用的函数接口都是一样的。此时兼容性的问题就转移给了DDS厂商，如果他们想让自己的DDS系统进入ROS生态，就得按照ROS的接口标准，开发一个驱动，也就是这个部分。 无论如何，ROS的宗旨不变，要提高软件代码的复用性，下边DDS任你边，上边的软件没影响。 在ROS的四大组成部分中，由于DDS的加入，大大提高了分布式通信系统的综合能力，这样我们在开发机器人的过程中，就不需要纠结通信的问题，可以把更多时间放在其他部分的应用开发上。","text_tokens":["高通","，","过程","建立","和","能够","工业","中间件","生态","如何","既然","按照","华为","四大","驱动","时间","函数","5g","middleware","不变","多","加入","企业","选用","选择","可能","了","接口","一个","所有","有","专利","建设","分布式","基本","的","我们","很多","大大提高","上","使用","架构","统一","编程","应用","软件","布式","在","复用","？","原则","位置","无论如何","设计","影响","宗旨","或","机器","得","兼容性","把","组织","可以","来","可","是","纠结","无论","都","分布","。","多个","ros2","没","不管","、","问题","系统","模块","用","组成","那个","会","如果","至关","就是","dds","该用","大大","要","想","功能","差别","其他","为了","刚才","像","那","进入","机器人","而言","提到","某一","之上","代码","ros","不","尽量","兼容","一样","给","上边","对应","这里","中间","技术","组成部分","性","开发","更","提高","转移","综合","大家","开源","这么","一种","版本","由于","放在","让","中","此时","蓝色","这样","下边","他们","具体","这个","至关重要","符合","商业","对","用户","性能","构图","任","架构图","上层","部分","接口标准"," ","哪","保证","呢","边","容性","红色","标准","也","4g","每","实现","能力","授权","你","重要","需要","就行","肯定","通信","场景","但","自己","所以","根据","就","比如","个人","还是","厂商"],"title":"DDS在ROS2中的应用","title_tokens":["ros2","的","应用","中","dds","在"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#qos","text":"DDS为ROS的通信系统提供提供了哪些特性呢？我们通过这个通信模型图来看下。 DDS中的基本结构是 Domain ，Domain将各个应用程序绑定在一起进行通信，回忆下之前我们配置树莓派和电脑通信的时候，配置的那个DOMAIN ID，就是对全局数据空间的分组定义，只有处于同一个DOMAIN小组中的节点才能互相通信。这样可以避免无用数据占用的资源。 DDS中另外一个重要特性就是 质量服务策略，QoS 。 QoS是一种网络传输策略，应用程序指定所需要的网络传输质量行为，QoS服务实现这种行为要求，尽可能地满足客户对通信质量的需求，可以理解为 数据提供者和接收者之间的合约 。 具体会有哪些策略？比如： DEADLINE 策略，表示通信数据必须要在每次截止时间内完成一次通信； HISTORY 策略，表示针对历史数据的一个缓存大小； RELIABILITY 策略，表示数据通信的模式，配置成BEST_EFFORT，就是尽力传输模式，网络情况不好的时候，也要保证数据流畅，此时可能会导致数据丢失，配置成RELIABLE，就是可信赖模式，可以在通信中尽量保证图像的完整性，我们可以根据应用功能场景选择合适的通信模式； DURABILITY 策略，可以配置针对晚加入的节点，也保证有一定的历史数据发送过去，可以让新节点快速适应系统。 所有这些策略在ROS系统中都可以通过类似这样的结构体配置，如果不配置的话，系统也会使用默认的参数。 举一个机器人的例子便于大家理解。 比如我们遥控一个无人机航拍，如果网络情况不好的话，遥控器向无人机发送运动指令的过程，可以用reliable通信模式，保证每一个命令都可以顺利发送给无人机，但是可能会有一些延时，无人机传输图像的过程可以用best effort模式，保证视频的流畅性，但是可能会有掉帧。 如果此时出现一个黑客黑入我们的网络，也没有关系，我们可以给ROS2的通信数据进行加密，黑客也没有办法直接控制无人机。 DDS的加入，让ROS2的通信系统焕然一新，多众多样的通信配置，可以更好的满足不同场景下的机器人应用。 好啦，DDS这么好，那该如何配置和使用呢？我们先带大家入个门。","text_tokens":["树莓","，","deadline","通过","供者","过程","哪些","和","无用","来看","特性","入个","应用程序","如何","的话","直接","之间","一新","时间","一起","遥控器","多","体","加入","但是","表示","没有","下","id","时候","可能","了","选择","延时","一个","参数","办法","先","domain","出现","有","所有","要求","所","合适","尽可能","基本","_","定义","流畅","例子","只有","必须","网络","门","的","我们","使用","之前","应用","帧","在","占用","？","针对","不同","黑入","好","传输","；","缓存","机器","发送给","可以","这些","小组","是","截止","都","历史数据","快速","派","history","。","ros2","运动","系统","情况","人机","无人机","durability","用","那个","客户","适应","默认","会","如果","送给","黑客","另外","配置","焕然一新","互相","处于","进行","就是","dds","每次","类似","指定","质量","满足","要","控制","需求","图像","功能","同一个","避免","回忆","：","qos","视频","晚","一次","样","各个","ros","信赖","不","服务","尽量","分组","这种","大小","啦","一些","给","过去","流畅性","完整性","模型","行为","无人","命令","effort","内","数据通","保证数据","同一","大家","接收者","将","航拍","数据通信","众多","一种","导致","这么","best","模式","让","才能","丢失","为","关系","顺利","中","那该","此时","电脑","这样","遥控","具体","这个","通信模型","理解","掉","图","带","结构","提供","便于","节点","提供者","对","资源","可信赖","指令","焕然","更好","reliable","空间","程序","向","全局","尽力","绑定"," ","保证","数据","呢","尽可","合约","发送","新","完整","也","每","实现","举","不好","可信","接收","重要","需要","地","场景","通信","成","策略","加密","一定","完成","根据","比如","机器人","历史","reliability"],"title":"质量服务策略QoS","title_tokens":["质量","服务","qos","策略"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_3","text":"我们先来试一试在命令行中配置DDS的参数。 启动第一个终端，我们使用best_effort创建一个发布者节点，循环发布任意数据，在另外一个终端中，如果我们使用reliable模型订阅同一话题，无法实现数据通信，如果修改为同样的best_effort，才能实现数据传输。 $ ros2 topic pub /chatter std_msgs/msg/Int32 \"data: 42\" --qos-reliability best_effort $ ros2 topic echo /chatter --qos-reliability reliable $ ros2 topic echo /chatter --qos-reliability best_effort 如何去查看ROS2系统中每一个发布者或者订阅者的QoS策略呢，在topic命令后边跟一个\"--verbose\"参数就行了。 $ ros2 topic info /chatter --verbose","text_tokens":["，","终端","如何","第一个","一个","参数","先","msg","data",":","int32","topic","_","info","订阅","无法","的","我们","启动","使用","--","在","就行了","者","传输","命令行","发布者","来","试一试","。","ros2","任意","系统","-","pub","42","如果","另外","配置","同样","或者","dds","\"","std","qos","$","跟","chatter","模型","命令","effort","数据通","同一","数据通信","best","后边","第一","才能","为","中","循环","echo","发布","话题","数据传输","节点","msgs","reliable","创建"," ","数据","呢","去","verbose","/","查看","每","据传","实现","通信","修改","策略","reliability"],"title":"案例一：在命令行中配置DDS","title_tokens":["命令","案例","配置","命令行","一","：","中","dds","在"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_4","text":"接下来，我们尝试在代码中配置DDS，以之前Hello World话题通信为例。","text_tokens":["，","话题","接下","接下来","为例","代码","尝试","以"," ","world","。","hello","配置","我们","通信","之前","下来","中","dds","在"],"title":"案例二：DDS编程示例","title_tokens":["案例","示例","编程","：","dds","二"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_2","text":"启动两个终端，分别运行发布者和订阅者节点： $ ros2 run learning_qos qos_helloworld_pub $ ros2 run learning_qos qos_helloworld_sub 可以看到两个终端中的通信效果如下，和之前貌似并没有太大区别。 看效果确实差不多，不过底层通信机理上可是有所不同的。","text_tokens":["helloworld","不同","，","者","终端","发布","不过","和","有所","：","看","qos","节点","可是","底层","确实","可以","$","run","发布者","没有","貌似"," ","sub","分别","区别","。","ros2","两个","并","机理","_","pub","效果","有所不同","看到","订阅","太","不多","运行","启动","的","通信","上","之前","如下","中","差不多","learning","大"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_3","text":"我们看下在代码中，如果加入QoS的配置。 learning_qos/qos_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . pub = self . create_publisher ( String , \"chatter\" , qos_profile ) # 创建发布者对象（消息类型、话题名、QoS原则） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"qos_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , },","text_tokens":["scripts","helloworld","，","spin","name","定时器","1","logger","node","python3","publisher","说明","初始","包","函数","%","*","加入","publishernode","点","接口","msg","一个",",","import","data","create","并","编译",":","qosprofile","_","作者","库","=","@","退出","info","callback","字符串","的","我们","执行","'","如下","bin","打开","在","消息","定时","“","原则","python","qoshistorypolicy","单位","s","[","class","qosreliabilitypolicy","日志","等待","看下","”","发布者","points","string","main","history","文件","。","ros2","类型","已经","、","古月","{","self","args","系统","}","-","pub","last","!","hello","如果","信息","配置","entry","shutdown","后","进行","选项","\"","功能","std","publishing","入口","：","qos",".",")","输出","coding","回调","代码","关闭","销毁","初始化","timer","def","父类","居","编写","guyuehome","chatter","env","none","effort","周期","8","提示","类","from","best","让","填充","为","__","keep","中","循环","(","发布","对象","话题","profile","（","#","0.5","秒","节点","主","py","msgs","get","reliable","publish","字符","程序","创建","示例","rclpy","super","名","console","设置"," ","数据","）","world","com","www","depth","/","知道","utf","init","setup","需要","usr","完成","destroy","learning","reliability"],"title":"发布者代码解析","title_tokens":["发布","解析","发布者","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_4","text":"订阅者中的QoS配置和发布者类似。 learning_qos/qos_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , qos_profile ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、QoS原则） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"qos_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , 'qos_helloworld_sub = learning_qos.qos_helloworld_sub:main' , ], }, DDS本身是一个非常复杂的系统，ROS2使用的也只是冰山一角，我们主要带领大家认识DDS，更多使用方法和相关内容，大家也可以参考下边的链接进行学习。","text_tokens":["scripts","helloworld","，","spin","name","和","1","logger","只是","node","python3","说明","链接","初始","包","方法","函数","%","*","多","加入","点","接口","msg","一个",",","import","data","create","并","subscribernode","编译","\\",":","qosprofile","_","作者","库","定义","@","=","info","退出","订阅","callback","的","冰山","我们","listener","使用","执行","本身","'","如下","]","bin","打开","消息","“","原则","者","python","qoshistorypolicy","s","[","class","qosreliabilitypolicy","日志","复杂","等待","可以","”","发布者","points","是","string","main","history","文件","。","收到","ros2","处理","类型","、","古月","{","self","args","系统","}","-","pub","heard","last","!","hello","信息","配置","entry","shutdown","主要","后","进行","非常","dds","类似","选项","\"","功能","std","入口","：","qos","subscription",".","带领","内容",")","输出","coding","回调","代码","关闭","销毁","初始化","def","相关","父类","居","sub","编写","guyuehome","chatter","env","none","effort","8","提示","更","类","大家","from","best","一角","让","__","keep","中","循环","(","下边","发布","对象","话题","profile","（","#","节点","非常复杂","对","主","py","msgs","get","reliable","程序","创建","示例","rclpy","super","名","i","console","设置"," ","数据","）","world","com","www","depth","/","学习","标准","知道","也","认识","utf","init","setup","需要","usr","完成","参考","destroy","冰山一角","learning","reliability"],"title":"订阅者代码解析","title_tokens":["订阅","解析","代码","者"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_5","text":"https://design.ros2.org/articles/ros_on_dds.html https://docs.ros.org/en/humble/Concepts/About-Different-Middleware-Vendors.html https://docs.ros.org/en/humble/How-To-Guides/Working-with-multiple-RMW-implementations.html https://www.bilibili.com/video/BV12z4y167w2","text_tokens":["how","bv12z4y167w2","concepts","implementations",".","html","different","ros","middleware","vendors","en","with","about"," ","on","https","to","multiple","com","www","ros2","design","/","org","docs","guides","humble",":","video","-","_","bilibili","working","rmw","dds","articles"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/","text":"工作空间：开发过程的大本营 大家在之前的学习和开发中，应该有接触过某些集成开发环境，比如Visual Studio、Eclipse、Qt Creator等，当我们想要编写程序之前，都会在这些开发环境的工具栏中，点击一个“创建新工程”的选项，此时就产生一个文件夹，后续所有工作产生的文件，都会放置在这个文件夹中，这个文件夹以及里边的内容，就叫做是 工程 。 工作空间是什么 类似的，在ROS机器人开发中，我们针对机器人某些功能进行代码开始时，各种编写的代码、参数、脚本等文件，也需要放置在某一个文件夹里进行管理，这个文件夹在ROS系统中就叫做 工作空间 。 所以工作空间是一个存放项目开发相关文件的文件夹，也是 开发过程中存放所有资料的大本营 。 ROS系统中一个典型的工作空间结构如图所示，这个dev_ws就是工作空间的根目录，里边会有四个子目录，或者叫做四个子空间。 src，代码空间 ，未来编写的代码、脚本，都需要人为的放置到这里； build，编译空间 ，保存编译过程中产生的中间文件； install，安装空间 ，放置编译得到的可执行文件和脚本； log，日志空间 ，编译和运行过程中，保存各种警告、错误、信息等日志。 总体来讲，这四个空间的文件夹，我们绝大部分操作都是在src中进行的，编译成功后，就会执行install里边的结果，build和log两个文件夹用的很少。 这里也要强调一点， 工作空间的名称我们可以自己定义 ，数量也并不是唯一的，比如： 工作空间1：dev_w_a，用于A机器人的开发； 工作空间2：dev_ws_b，用于B机器人的一部分功能； 工作空间3：dev_ws_b2，用于开发B机器人另外一些功能。 以上情况是完全允许的，就像是我们在集成开发环境中创建了多个新工程一样，都是并列存在的关系。 创建工作空间 了解了工作空间的概念和结果，接下来我们可以使用如下命令创建一个工作空间，并且下载教程的代码： $ mkdir -p ~/dev_ws/src $ cd ~/dev_ws/src $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 自动安装依赖 我们从社区中下载的各种代码，多少都会有一些依赖，我们可以手动一个一个安装，也可以使用rosdep工具自动安装： $ sudo apt install -y python3-pip $ sudo pip3 install rosdepc $ sudo rosdepc init $ rosdepc update $ cd .. $ rosdepc install -i --from-path src --rosdistro humble -y 编译工作空间 依赖安装完成后，就可以使用如下命令编译工作空间啦，如果有缺少的依赖，或者代码有错误，编译过程中会有报错，否则编译过程应该不会出现任何错误： $ sudo apt install python3-colcon-ros $ cd ~/dev_ws/ $ colcon build 编译成功后，就可以在工作空间中看到自动生产的build、log、install文件夹了。 设置环境变量 编译成功后，为了让系统能够找到我们的功能包和可执行文件，还需要设置环境变量： $ source install/local_setup.sh # 仅在当前终端生效 $ echo \" source ~/dev_ws/install/local_setup.sh\" >> ~/.bashrc # 所有终端均生效 至此，我们就完成了工作空间的创建、编译和配置。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html","text_tokens":["，","终端","工具栏","过程","人为","警告","某些","和","产生","1","能够","source","应该","src","python3","接下来","用于","链接","包","qt","到","变量","mkdir","visual","creator","空间结构","过","dev","工具","报错","存放","不是","了","https","一个","参数","还","并","编译","出现","有","所有","保存",":","2","_","允许","定义",">","里边","文件夹","得到","studio","运行","的","我们","使用","--","接触","执行","之前","如下","时","在","社区","“","唯一","针对","缺少","安装","y","update","；","工程","接下","机器","~","一部","如图所示","日志","所示","工作","操作","html","docs","这些","可以","”","强调","否则","环境变量","sh","当前","是","clone","都","b","均","文件","项目","大部","。","件夹","结果","两个","很少","多个","ros2","自动","rosdistro","中会","、","w","b2","开始","子目","系统","情况","-","点击","各种","用","后续","会","信息","如果","bashrc","一点","另外","当","配置","手动","教程","后","或者","进行","就是","放置","类似","一部分","环境","选项","依赖","要","多少","\"","成功","生效","功能","为了","并列","：","四个","eclipse",".","内容","编写程序","大本营","代码","ros","$","啦","一样","rosdep","相关","编写","一些","未来","总体","下载","这里","guyuehome","资料","creating","中间","path","命令","21","tutorials","org","集成","行文","数量","绝大","大本","不会","并且","开发","ws","名称","存在","p","生产","大家","gitee","pip3","大部分","完全","from","从","install","典型","子","log","这","以上","git","colcon","让","关系","中","此时","仅","echo","..","概念","以及","这个","找到","#","结构","sudo","什么","环境变","某","rosdepc","空间","程序","目录","创建","脚本","en","i","部分","想要","了解","设置"," ","可执行文件","pip","任何","像是","自动生产","com","新","/","叫做","学习","子目录","build","humble","local","workspace","也","根目录","apt","cd","至此","里","看到","init","setup","需要","a","管理","错误","来讲","完成","参考","自己","等","所以","就","比如","绝大部分","机器人","下来","3"],"title":"工作空间","title_tokens":["工作","空间"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_1","text":"大家在之前的学习和开发中，应该有接触过某些集成开发环境，比如Visual Studio、Eclipse、Qt Creator等，当我们想要编写程序之前，都会在这些开发环境的工具栏中，点击一个“创建新工程”的选项，此时就产生一个文件夹，后续所有工作产生的文件，都会放置在这个文件夹中，这个文件夹以及里边的内容，就叫做是 工程 。","text_tokens":["环境","，","选项","以及","这个","工具栏","某些","和","产生","工程","应该","eclipse","内容","编写程序","qt","工作","这些","visual","creator","程序","创建","”","过","工具","是","想要","编写"," ","都","一个","文件","。","件夹","新","叫做","学习","、","有","集成","所有","点击","开发","大家","里边","后续","文件夹","会","studio","当","的","我们","接触","等","之前","就","中","比如","此时","放置","在","“"],"title":"工作空间：开发过程的大本营","title_tokens":["工作","大本营","空间","的","过程","大本","：","开发"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_2","text":"类似的，在ROS机器人开发中，我们针对机器人某些功能进行代码开始时，各种编写的代码、参数、脚本等文件，也需要放置在某一个文件夹里进行管理，这个文件夹在ROS系统中就叫做 工作空间 。 所以工作空间是一个存放项目开发相关文件的文件夹，也是 开发过程中存放所有资料的大本营 。 ROS系统中一个典型的工作空间结构如图所示，这个dev_ws就是工作空间的根目录，里边会有四个子目录，或者叫做四个子空间。 src，代码空间 ，未来编写的代码、脚本，都需要人为的放置到这里； build，编译空间 ，保存编译过程中产生的中间文件； install，安装空间 ，放置编译得到的可执行文件和脚本； log，日志空间 ，编译和运行过程中，保存各种警告、错误、信息等日志。 总体来讲，这四个空间的文件夹，我们绝大部分操作都是在src中进行的，编译成功后，就会执行install里边的结果，build和log两个文件夹用的很少。 这里也要强调一点， 工作空间的名称我们可以自己定义 ，数量也并不是唯一的，比如： 工作空间1：dev_w_a，用于A机器人的开发； 工作空间2：dev_ws_b，用于B机器人的一部分功能； 工作空间3：dev_ws_b2，用于开发B机器人另外一些功能。 以上情况是完全允许的，就像是我们在集成开发环境中创建了多个新工程一样，都是并列存在的关系。","text_tokens":["，","人为","过程","警告","某些","产生","和","1","src","用于","到","空间结构","dev","存放","不是","了","参数","一个","并","编译","所有","有","保存","2","_","允许","定义","里边","文件夹","得到","运行","的","我们","执行","时","在","唯一","针对","安装","；","工程","机器","一部","如图所示","日志","所示","工作","操作","可以","强调","是","都","b","文件","项目","大部","。","件夹","多个","两个","很少","、","w","b2","开始","子目","系统","情况","各种","用","会","信息","一点","另外","后","或者","进行","就是","放置","类似","一部分","环境","要","成功","功能","并列","：","四个","大本营","代码","ros","一样","相关","编写","一些","未来","总体","这里","资料","中间","行文","集成","数量","绝大","大本","开发","ws","名称","存在","大部分","完全","install","典型","子","log","这","以上","关系","中","这个","结构","某","空间","目录","创建","脚本","部分"," ","可执行文件","像是","新","叫做","子目录","build","也","根目录","里","需要","a","管理","错误","来讲","自己","等","所以","就","绝大部分","结果","机器人","比如","3"],"title":"工作空间是什么","title_tokens":["工作","什么","是","空间"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_3","text":"了解了工作空间的概念和结果，接下来我们可以使用如下命令创建一个工作空间，并且下载教程的代码： $ mkdir -p ~/dev_ws/src $ cd ~/dev_ws/src $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git","text_tokens":["概念","，","和","：","接下","src","~","接下来",".","工作","mkdir","空间","可以","代码","$","创建","dev","了解","clone"," ","了","下载","https","一个","guyuehome","com","ros2","/","命令","21","tutorials",":","-","cd","并且","ws","p","_","gitee","的","我们","教程","使用","git","下来","如下","结果"],"title":"创建工作空间","title_tokens":["创建","工作","空间"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_4","text":"我们从社区中下载的各种代码，多少都会有一些依赖，我们可以手动一个一个安装，也可以使用rosdep工具自动安装： $ sudo apt install -y python3-pip $ sudo pip3 install rosdepc $ sudo rosdepc init $ rosdepc update $ cd .. $ rosdepc install -i --from-path src --rosdistro humble -y","text_tokens":["，","依赖","多少","安装","y","update","：","python3","sudo","src","rosdepc","代码","可以","$","i","rosdep","工具","一些","都"," ","下载","pip","一个","自动","path","rosdistro","humble","有","也","apt","-","cd","各种","pip3","init","会","from","从","的","我们","install","手动","使用","--","中","社区",".."],"title":"自动安装依赖","title_tokens":["安装","依赖","自动"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_5","text":"依赖安装完成后，就可以使用如下命令编译工作空间啦，如果有缺少的依赖，或者代码有错误，编译过程中会有报错，否则编译过程应该不会出现任何错误： $ sudo apt install python3-colcon-ros $ cd ~/dev_ws/ $ colcon build 编译成功后，就可以在工作空间中看到自动生产的build、log、install文件夹了。","text_tokens":["，","依赖","缺少","成功","过程","安装","：","应该","sudo","python3","~","工作","空间","可以","代码","否则","$","ros","啦","报错","dev"," ","了","自动生产","任何","文件","自动","。","件夹","中会","/","命令","build","编译","出现","有","、","apt","不会","-","cd","ws","_","生产","看到","文件夹","如果","的","install","log","错误","使用","后","完成","或者","colcon","就","如下","中","在"],"title":"编译工作空间","title_tokens":["编译","工作","空间"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_6","text":"编译成功后，为了让系统能够找到我们的功能包和可执行文件，还需要设置环境变量： $ source install/local_setup.sh # 仅在当前终端生效 $ echo \" source ~/dev_ws/install/local_setup.sh\" >> ~/.bashrc # 所有终端均生效 至此，我们就完成了工作空间的创建、编译和配置。","text_tokens":["环境","，","终端","成功","找到","生效","功能","\"","source","和","能够","为了","#","：",".","~","包","环境变","工作","变量","空间","$","创建","环境变量","sh","当前","dev","设置"," ","可执行文件","了","还","文件","均","。","/","local","编译","、","行文","所有","系统","ws","_","至此",">","setup","需要","bashrc","配置","的","我们","install","让","后","完成","执行","就","在","仅","echo"],"title":"设置环境变量","title_tokens":["环境变","环境","变量","环境变量","设置"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_7","text":"https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html","text_tokens":["creating","html","docs","/","org","tutorials","ros","workspace","a","en","humble",":","-"," ",".","https"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/","text":"功能包：开发过程的大本营 在下载的教程代码中，大家可以看到有很多不同名称的文件夹，这些在ROS2并不是普通的文件夹，而是叫做 功能包 。 每个机器人可能有很多功能，比如移动控制、视觉感知、自主导航等，如果我们把这些功能的源码都放到一起当然也是可以的，但是当我们想把其中某些功能分享给别人时，就会发现代码都混合到了一起，很难拆分出来。 举个例子，我们手上有很多红豆、绿豆、黄豆，假设都放在一个袋子里，如果只想把黄豆都拿出来，是不是得在五颜六色的豆子里一颗一颗都找出来，数量越多，你就越头疼；如果我们把不同颜色的豆子放在不同的三个袋子里，需要拿出某种豆子的时候，不就立刻可以找出来了么。 功能包就是这个原理，我们把不同功能的代码划分到不同的功能包中，尽量降低他们之间的耦合关系，当需要在ROS社区中分享给别人的时候，只需要说明这个功能包该如何使用，别人很快就可以用起来了。 所以功能包的机制，是提高ROS中软件复用率的重要方法之一。 创建功能包 如何在ROS2中创建一个功能包呢？我们可以使用这个指令： $ ros2 pkg create --build-type <build-type> <package_name> ros2命令中： pkg ：表示功能包相关的功能； create ：表示创建功能包； build-type ：表示新创建的功能包是C++还是Python的，如果使用C++或者C，那这里就跟ament_cmake，如果使用Python，就跟ament_python； package_name ：新建功能包的名字。 比如在终端中分别创建C++和Python版本的功能包： $ cd ~/dev_ws/src $ ros2 pkg create --build-type ament_cmake learning_pkg_c # C++ $ ros2 pkg create --build-type ament_python learning_pkg_python # Python 编译功能包 在创建好的功能包中，我们可以继续完成代码的编写，之后需要编译和配置环境变量，才能正常运行： $ cd ~/dev_ws $ colcon build # 编译工作空间所有功能包 $ source install/local_setup.bash 功能包的结构 功能包并不是普通的文件夹，那如何判断一个文件夹是否是功能包呢？我们来分析下刚才新创建两个功能包的结构。 C++功能包 首先看下C++类型的功能包，其中必然存在两个文件： package.xml 和 CMakerLists.txt 。 package.xml文件的主要内容如下，包含功能包的版权描述，和各种依赖的声明。 CMakeLists.txt文件是编译规则，C++代码需要编译才能运行，所以必须要在该文件中设置如何编译，使用CMake语法。 Python功能包 C++功能包需要将源码编译成可执行文件，但是Python语言是解析型的，不需要编译，所以会有一些不同，但也会有这两个文件： package.xml 和 setup.py 。 package.xml文件的主要内容和C++版本功能包一样，包含功能包的版权描述，和各种依赖的声明。 setup.py文件里边也包含一些版权信息，除此之外，还有“entry_points”配置的程序入口，在后续编程讲解中，我们会给大家介绍如何使用。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html https://docs.ros.org/en/ humble /Tutorials/Creating-Your-First-ROS2-Package.html","text_tokens":["，","终端","name","过程","讲解","某些","和","source","描述","导航","cmakelists","如何","src","说明","链接","方法","包","到","txt","之间","变量","一起","多","除此","但是","bash","找","表示","dev","耦合","下","不是","时候","可能","了","新建","手上","一个","某种","头疼","分别","https","规则","并","create","三个","编译","之后","有","五颜六色","所有","判断","是否",":","_",">","继续","划分","例子","必须","率","文件夹","里边","运行","还有","的","我们","很多","pkg","移动","而是","发现","使用","视觉","么","绿豆","--","软件","如下","执行","时","语法","编程","在","社区","复用","<","“","不同","？","xml","python","好","机制","；","越","机器","混合","~","得","把","html","工作","每个","豆子","声明","可以","这些","”","来","包含","是不是","环境变量","points","源码","是","其中","c++","拿","版权","都","只","文件","。","件夹","ros2","两个","docs","类型","之外","、","正常","-","各种","用","后续","分享","会","如果","编译成","袋子","信息","当","配置","entry","假设","教程","主要","或者","起来","很难","立刻","包该","就是","型","原理","环境","很快","控制","依赖","想","普通","要","只想","功能","包并","那","：","一颗","举个","刚才","看","拆分",".","内容","入口","cmakerlists","大本营","代码","ros","$","不","尽量","一样","跟","相关","编写","一些","给","下载","这里","必然","creating","命令","org","learning","tutorials","type","行文","数量","译成","大本","开发","ws","名称","提高","存在","大家","之一","将","your","版本","感知","install","放在","新创建","这","才能","colcon","关系","该","中","包是","他们","cmake","这个","自主","#","包中","结构","指令","红豆","新创","环境变","py","空间","放到","ament","创建","名字","别人","程序","en","设置"," ","降低","可执行文件","呢","除此之外","首先","黄豆","/","workspace","叫做","build","package","local","解析","humble","也","分析","是否是","cd","介绍","里","看到","出来","你","setup","重要","需要","颜色","a","first","当然","完成","但","参考","c","等","所以","就","比如","语言","机器人","还是","拿出"],"title":"功能包","title_tokens":["包","功能"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_1","text":"在下载的教程代码中，大家可以看到有很多不同名称的文件夹，这些在ROS2并不是普通的文件夹，而是叫做 功能包 。 每个机器人可能有很多功能，比如移动控制、视觉感知、自主导航等，如果我们把这些功能的源码都放到一起当然也是可以的，但是当我们想把其中某些功能分享给别人时，就会发现代码都混合到了一起，很难拆分出来。 举个例子，我们手上有很多红豆、绿豆、黄豆，假设都放在一个袋子里，如果只想把黄豆都拿出来，是不是得在五颜六色的豆子里一颗一颗都找出来，数量越多，你就越头疼；如果我们把不同颜色的豆子放在不同的三个袋子里，需要拿出某种豆子的时候，不就立刻可以找出来了么。 功能包就是这个原理，我们把不同功能的代码划分到不同的功能包中，尽量降低他们之间的耦合关系，当需要在ROS社区中分享给别人的时候，只需要说明这个功能包该如何使用，别人很快就可以用起来了。 所以功能包的机制，是提高ROS中软件复用率的重要方法之一。","text_tokens":["，","某些","导航","如何","说明","方法","包","到","之间","一起","多","但是","找","耦合","不是","时候","可能","了","手上","一个","某种","头疼","并","三个","有","五颜六色","划分","例子","率","文件夹","的","我们","很多","移动","而是","发现","使用","视觉","么","绿豆","软件","时","在","社区","复用","不同","机制","；","越","机器","混合","得","把","每个","豆子","可以","这些","是不是","源码","是","其中","拿","都","只","文件","。","件夹","ros2","、","用","分享","会","如果","袋子","当","假设","教程","起来","很难","立刻","包该","就是","原理","很快","控制","想","普通","只想","功能","一颗","举个","拆分","代码","ros","不","尽量","给","下载","数量","名称","提高","大家","之一","感知","放在","关系","中","他们","这个","自主","包中","红豆","放到","别人"," ","降低","黄豆","叫做","也","里","看到","出来","你","重要","需要","颜色","当然","等","所以","就","比如","机器人","拿出"],"title":"功能包：开发过程的大本营","title_tokens":["包","大本营","的","过程","功能","大本","：","开发"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_2","text":"如何在ROS2中创建一个功能包呢？我们可以使用这个指令： $ ros2 pkg create --build-type <build-type> <package_name> ros2命令中： pkg ：表示功能包相关的功能； create ：表示创建功能包； build-type ：表示新创建的功能包是C++还是Python的，如果使用C++或者C，那这里就跟ament_cmake，如果使用Python，就跟ament_python； package_name ：新建功能包的名字。 比如在终端中分别创建C++和Python版本的功能包： $ cd ~/dev_ws/src $ ros2 pkg create --build-type ament_cmake learning_pkg_c # C++ $ ros2 pkg create --build-type ament_python learning_pkg_python # Python","text_tokens":["？","，","cmake","这个","python","name","终端","功能","和","#","；","：","那","指令","如何","src","~","包","新创","可以","$","ament","创建","表示","dev","c++","跟","相关","新建"," ","分别","呢","一个","这里","。","ros2","create","/","命令","build","package","type","learning","-","cd","ws","_",">","如果","版本","的","我们","pkg","新创建","使用","--","或者","c","就","中","比如","包是","还是","在","<","名字"],"title":"创建功能包","title_tokens":["包","创建","功能"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_3","text":"在创建好的功能包中，我们可以继续完成代码的编写，之后需要编译和配置环境变量，才能正常运行： $ cd ~/dev_ws $ colcon build # 编译工作空间所有功能包 $ source install/local_setup.bash","text_tokens":["环境","，","好","功能","source","和","#","包中","：",".","~","包","环境变","工作","变量","空间","可以","代码","$","创建","环境变量","bash","dev","正常","编写"," ","/","build","之后","编译","local","所有","cd","ws","_","setup","需要","运行","配置","的","我们","install","继续","完成","才能","colcon","在"],"title":"编译功能包","title_tokens":["包","编译","功能"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_4","text":"功能包并不是普通的文件夹，那如何判断一个文件夹是否是功能包呢？我们来分析下刚才新创建两个功能包的结构。","text_tokens":["？","，","普通","功能","包并","结构","那","刚才","如何","包","新创","来","创建","下","不是","呢","一个","文件","。","件夹","两个","判断","是否","分析","是否是","文件夹","的","我们","新创建"],"title":"功能包的结构","title_tokens":["包","结构","的","功能"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#c","text":"首先看下C++类型的功能包，其中必然存在两个文件： package.xml 和 CMakerLists.txt 。 package.xml文件的主要内容如下，包含功能包的版权描述，和各种依赖的声明。 CMakeLists.txt文件是编译规则，C++代码需要编译才能运行，所以必须要在该文件中设置如何编译，使用CMake语法。","text_tokens":["，","依赖","要","xml","cmake","功能","cmakelists","和","描述","看","：","如何",".","内容","包","txt","cmakerlists","声明","代码","c++","其中","下","版权","是"," ","设置","文件","首先","必然","。","规则","两个","类型","package","编译","各种","存在","必须","需要","运行","的","包含","主要","使用","才能","该","所以","如下","中","语法","在"],"title":"C++功能包","title_tokens":["包","c++","功能"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#python","text":"C++功能包需要将源码编译成可执行文件，但是Python语言是解析型的，不需要编译，所以会有一些不同，但也会有这两个文件： package.xml 和 setup.py 。 package.xml文件的主要内容和C++版本功能包一样，包含功能包的版权描述，和各种依赖的声明。 setup.py文件里边也包含一些版权信息，除此之外，还有“entry_points”配置的程序入口，在后续编程讲解中，我们会给大家介绍如何使用。","text_tokens":["不同","，","依赖","xml","python","讲解","功能","和","描述","：","入口","如何",".","内容","包","py","声明","”","程序","不","points","除此","但是","源码","一样","c++","是","版权","一些"," ","可执行文件","给","文件","除此之外","。","两个","之外","package","解析","编译","行文","有","译成","也","各种","_","大家","里边","后续","将","编译成","会","setup","需要","版本","信息","还有","的","包含","配置","entry","这","主要","我们","但","介绍","执行","使用","语言","所以","编程","中","型","在","“"],"title":"Python功能包","title_tokens":["包","功能","python"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_5","text":"https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html https://docs.ros.org/en/ humble /Tutorials/Creating-Your-First-ROS2-Package.html","text_tokens":[".","html","ros","en"," ","https","creating","docs","ros2","/","org","tutorials","workspace","package","humble",":","-","your","a","first"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/","text":"节点 机器人是各种功能的综合体，每一项功能就像机器人的一个工作细胞，众多细胞通过一些机制连接到一起，成为了一个机器人整体。 在ROS中，我们给这些 “细胞”取了一个名字，那就是 节点 。 通信模型 完整的机器人系统可能并不是一个物理上的整体，比如这样一个的机器人： 在机器人身体里搭载了一台计算机A，它可以通过机器人的眼睛——摄像头，获取外界环境的信息，也可以控制机器人的腿——轮子，让机器人移动到想要去的地方。除此之外，可能还会有另外一台计算机B，放在你的桌子上，它可以远程监控机器人看到的信息，也可以远程配置机器人的速度和某些参数，还可以连接一个摇杆，人为控制机器人前后左右运动。 这些功能虽然位于不同的计算机中，但都是这款机器人的工作细胞，也就是节点，他们共同组成了一个完整的机器人系统。 节点在机器人系统中的职责就是 执行某些具体的任务 ，从计算机操作系统的角度来看，也叫做进程； 每个节点都是一个可以 独立运行的可执行文件 ，比如执行某一个python程序，或者执行C++编译生成的结果，都算是运行了一个节点； 既然每个节点都是独立的执行文件，那自然就可以想到，得到这个执行文件的 编程语言可以是不同的 ，比如C++、Python，乃至Java、Ruby等更多语言。 这些节点是功能各不相同的细胞，根据系统设计的不同，可能位于计算机A，也可能位于计算机B，还有可能运行在云端，这叫做 分布式 ，也就是可以分布在不同的硬件载体上； 每一个节点都需要有 唯一的命名 ，当我们想要去找到某一个节点的时候，或者想要查询某一个节点的状态时，可以通过节点的名称来做查询。 节点也可以比喻是一个一个的工人，分别完成不同的任务，他们有的在一线厂房工作，有的在后勤部门提供保障，他们互相可能并不认识，但却一起推动机器人这座“工厂”，完成更为复杂的任务。 接下来，我们就来看看， 节点这个工作细胞，到底该如何实现。 案例一：Hello World节点（面向过程） ROS2中节点的实现当然是需要编写程序了，我们从Hello World例程开始，先来实现一个最为简单的节点，功能并不复杂，就是循环打印一个“Hello World”字符串到终端中。 运行效果 大家先不要着急看代码，是骡子是马，先拉出来溜溜，我们通过ros2 run命令，运行编译好的课程代码，看下这个节点执行的效果如何，然后再来分析代码的实现过程，做到知其然也知其所以然。 $ ros2 run learning_node node_helloworld 运行成功后，可以在终端中看到循环打印“Hello World”字符串的效果。 代码解析 这个节点是如何实现的呢？我们来看下代码。 learning_node/node_helloworld.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向过程的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_helloworld\" ) # 创建ROS2节点对象并进行初始化 while rclpy . ok (): # ROS2系统是否正常运行 node . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , ], 创建节点流程 代码中出现的函数大家未来会经常用到，大家先不用纠结函数的具体使用方法，更重要的是理解节点的编码流程。 总结一下，想要实现一个节点，代码的实现流程是这样做： 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 大家如果有学习过C++或者Pyhton的话，应该可以发现这里我们使用的是面向过程的编程方法，这种方式虽然实现简单，但是对于稍微复杂一点的机器人系统，就很难做到模块化编码。 案例二：Hello World节点（面向对象） 所以在ROS2的开发中，我们更 推荐大家使用面向对象的编程方式 ，比如刚才的代码就可以改成这样，虽然看上去复杂了一些，但是代码会具备更好的可读性和可移植性，调试起来也会更加方便。 运行效果 接下来运行一下调整后的节点： $ ros2 run learning_node node_helloworld_class 运行成功后，可以还是可以在终端中看到循环打印“Hello World”字符串的效果。 代码解析 功能虽然一样，但是程序的结构发生了变化，我们具体看一下这份代码。 learning_node/node_helloworld_class.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向对象的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time \"\"\" 创建一个HelloWorld节点, 初始化时输出“hello world”日志 \"\"\" class HelloWorldNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 while rclpy . ok (): # ROS2系统是否正常运行 self . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = HelloWorldNode ( \"node_helloworld_class\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , ], 创建节点流程 所以总体而言，节点的实现方式依然是这四个步骤，只不过编码方式做了一些改变而已。 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 到这里为止，大家是不是心里还有一个疑惑，机器人中的节点不能只是打印Hello World吧，是不是得完成一些具体的任务。 案例三：物体识别节点 没错，接下来我们就以机器视觉的任务为例，模拟实际机器人中节点的实现过程。 我们先从网上找到一张苹果的图片，通过编写一个节点来识别图片中的苹果。 运行效果 在这个例程中，我们将用到一个图像处理的库——OpenCV，运行前请使用如下指令安装： $ sudo apt install python3-opencv 然后就可以运行例程啦： $ ros2 run learning_node node_object #注意修改图片路径后重新编译 Attention 运行前需要将learning_node/node_object.py代码中的图片路径，修改为实际路径，修改后重新编译运行即可： image = cv2.imread(' /home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg ') 例程运行成功后，会弹出一个可视化窗口，可以看到苹果被成功识别啦，一个绿色框会把苹果的轮廓勾勒出来，中间的绿点表示中心点。 代码解析 在这个例程中，我们加入了图像识别的处理过程，模拟一个节点的功能，关于图像处理的具体实现，并不是此处的重点，大家更多要关注我们是如何通过节点的概念来实现一个具体的机器人功能。 learning_node/node_object.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过颜色识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) image = cv2 . imread ( '/home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg' ) # 读取图像 object_detect ( image ) # 苹果检测 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , ], 案例四：机器视觉识别节点 用图片进行识别好像还不太合理，机器人应该有眼睛呀，没问题，接下来我们就让节点读取摄像头的图像，动态识别其中的苹果，或者类似颜色的物体。 运行效果 启动一个终端，运行如下节点： $ ros2 run learning_node node_object_webcam #注意设置摄像头 Attention 如果是在虚拟机中操作，需要进行以下设置： 1. 把虚拟机设置为兼容USB3.1； 2. 在可移动设备中将摄像头连接至虚拟机。 运行成功后，该节点就可以驱动摄像头，并且实时识别摄像头中的红色物体啦。 代码解析 相比之前的程序，这里最大的变化是修改了图片的来源，使用OpenCV中的VideoCapture()来驱动相机，并且周期read摄像头的信息，并进行识别。 learning_node/node_object_webcam.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过摄像头识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object_webcam\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) cap = cv2 . VideoCapture ( 0 ) while rclpy . ok (): ret , image = cap . read () # 读取一帧图像 if ret == True : object_detect ( image ) # 苹果检测 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , 'node_object_webcam = learning_node.node_object_webcam:main' , ], 节点命令行操作 节点命令的常用操作如下： $ ros2 node list # 查看节点列表 $ ros2 node info <node_name> # 查看节点信息 思考题 现在，大家应该熟悉节点这个工作细胞的概念和实现方法了，回到这个机器人系统的框架图，我们还会发现另外一个问题。 电脑B中的摇杆，要控制机器人运动，这两个节点岂不是应该有某种连接，比如摇杆节点发送一个速度指令给运动节点，收到后机器人开始运动。 同理，如果我们想要改变机器人的速度，负责配置参数的节点就得发送一个指令给运动节点，如果电脑B想要显示机器人看到的图像，电脑A中的摄像头节点就得把图像发送过来。 没错，在一个ROS机器人的系统中， 节点并不是孤立的，他们之间会有很多种机制保持联系 ，下一节，我们将给大家介绍这些机制中最为常用的一种。 参考链接 https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Nodes.html","text_tokens":["相同","scripts","终端","某些","例程","上去","helloworldnode","数值","python3","应该","方法","更为","到","虽然","函数","调整","加入","可读性","不用","以","下","角度","时候","可能","正常","分别","来源","参数","先","attention","usb3.1","更加","库",">","退出","info","运行","重点","上","使用","执行","移植性","不要","“","read","同理","？","python","好","安装","到底","摇杆","看上去","class","90","把","html","np","这些","来","可","是","c++","b","。","共同","之外","mask","w","args","self","系统","-","模块","监控","就让","img","呀","进行","类似","每一项","工厂","吧","控制","array","乃至","后勤部","为止","像","刚才","而言","approx","sleep","为例","hsv","这种","def","一些","父类","出","这里","模型","取","后勤","tutorials","chain","行文","8","请","名称","可移植","远程","大家","if","from","从","连接","install","circle","三","boundingrect","该","__","cvtcolor","高","摄像头","这样","webcam","这个","看看","发布","找到","不能","转换","相比","前后左右","list","孤立","get","腿","进程","super","jpg","x","world","除此之外","面向对象","完整","再","知道","红色","128","int","time","home","init","setup","重要","设备","颜色","此处","硬件","根据","可移植性","5","hierarchy","过来","简单","helloworld","马","，","关于","查询","图像识别","name","通过","综合体","过程","显示","logger","实际","50","各不相同","node","如何","说明","接下来","的话","驱动","案例","注意","但是","最大","推动",",","中心点","inrange","任务","有","图片","编程语言","2","分布式","作者","@","改变","还有","推荐","cap","视觉","如下","]","布式","bin","变化","中将","唯一","不同","打印","一节","命令行","y","一下","下限","机器","动态","image","现在","工作","复杂","想到","255","算机","points","方便","窗口","思考题","模块化","retr","二","分布","docs","两个","、","眼睛","运动","相机","至","!","会","云端","另外","配置","detect","entry","shutdown","bgr","findcontours","后","或者","起来","就是","环境","选项","numpy","成功","获取","图像","功能","整体","：","看","入口","却",")","输出","岂","coding","检测","这座","代码","被","不","销毁","所在","工人","点画","h","总体","成为","org","桌子","编码方式","true","周期","没错","二值化","保持","更","综合","众多","一种","休眠","让","后勤部门","中","物理","轮廓","循环","videocapture","概念","理解","生成","可视","主","发生","150","一线","更好","某","保持联系","字符","轮子","en","rclpy","位于","—","路径","java","/","解析","重新","分析","while","imshow","你","nodes","180","参考","destroy","语言","前后","身体","考题","然后","spin","摄像","和","1","来看","只是","实时","既然","部门","apple","厂房","难","*","列表","多","了","点","https","一个","还","某种","import","识别","理过","外界","是否",":","可读","=","比喻","得到","去除","的","联系","最为","发现","编程","'","之前","时","在","虚拟机","坐标","[","接下","得","每个","color","可以","run","关注","是不是","步骤","都","处理","没","面向","像头","细胞","{","开始","保障","以下","各种","组成","效果","用","red","hello","前","信息","如果","太","一点","当","着急","看上","要","苹果","那","四个",".","调试","编写程序","一台","虚拟","用到","$","状态","contours","啦","初始化","兼容","居","给","未来","好像","env","none","这份","并且","ws","将","所以然","中心","为","而已","职责","continue","速度","它","他们","一项","流程","知其所以然","xy","具备","上限","提供","0.5","左上","sudo","噪声","示例","负责","console","及","想要","设置"," ","即可","合理","呢","ok","发送","框会","多种","www","叫做","学习","humble","查看","object","0","里","实现","计算","看到","lower","utf","计算机","usr","cv2","通信","修改","当然","但","完成","cnt","先拉","就","下来","结果","learning","还是","框架图","名字","人为","for","src","更多","改成","链接","初始","包","之间","时间","一起","除此","过","表示","一","dev","不是","接口","稍微","依然","并","处理过程","as","编译","算是","出现","移植","还会","像素","in","_","+","图像处理","做到","字符串","启动","我们","一帧","understanding","移动","介绍","宽","绿点","打开","<","操作系统","地方","设计","机制","骡子","；","搭载","对于","imread","做","日志","左右","操作","独立","等待","范围","”","经常","物体","纠结","其中","hcx","文件","main","destroyallwindows","自然","收到","ros2","载体","思考","古月","问题","阈值","勾勒","知其然","shape","互相","总结","一张","常用","\"","绿色","心里","不过","面积","更多要","ruby","很","合体","ros","命名","关闭","只不过","一样","编写","guyuehome","中间","读取","命令","21","回到","开发","类","课程","ret","放在","编码","疑惑","这","电脑","太小","(","上角","具体","waitkey","通信模型","对象","（","pyhton","#","结构","方式","节点","指令","网上","会弹","溜溜","py","程序","bgr2hsv","创建","drawcontours","可执行文件","）","opencv","com","去","可视化","模拟","也","每","apt","总体而言","upper","认识","出来","需要","a","熟悉","左上角","四","所以","这款","等","比如","框架","机器人"],"title":"节点","title_tokens":["节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_1","text":"机器人是各种功能的综合体，每一项功能就像机器人的一个工作细胞，众多细胞通过一些机制连接到一起，成为了一个机器人整体。 在ROS中，我们给这些 “细胞”取了一个名字，那就是 节点 。","text_tokens":["，","一项","通过","综合体","功能","机制","整体","像","那","节点","机器","合体","到","工作","这些","ros","一起","”","是","一些"," ","了","给","“","一个","成为","。","取","细胞","各种","综合","众多","的","连接","我们","就","中","就是","机器人","在","每一项","名字"],"title":"节点","title_tokens":["节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_2","text":"完整的机器人系统可能并不是一个物理上的整体，比如这样一个的机器人： 在机器人身体里搭载了一台计算机A，它可以通过机器人的眼睛——摄像头，获取外界环境的信息，也可以控制机器人的腿——轮子，让机器人移动到想要去的地方。除此之外，可能还会有另外一台计算机B，放在你的桌子上，它可以远程监控机器人看到的信息，也可以远程配置机器人的速度和某些参数，还可以连接一个摇杆，人为控制机器人前后左右运动。 这些功能虽然位于不同的计算机中，但都是这款机器人的工作细胞，也就是节点，他们共同组成了一个完整的机器人系统。 节点在机器人系统中的职责就是 执行某些具体的任务 ，从计算机操作系统的角度来看，也叫做进程； 每个节点都是一个可以 独立运行的可执行文件 ，比如执行某一个python程序，或者执行C++编译生成的结果，都算是运行了一个节点； 既然每个节点都是独立的执行文件，那自然就可以想到，得到这个执行文件的 编程语言可以是不同的 ，比如C++、Python，乃至Java、Ruby等更多语言。 这些节点是功能各不相同的细胞，根据系统设计的不同，可能位于计算机A，也可能位于计算机B，还有可能运行在云端，这叫做 分布式 ，也就是可以分布在不同的硬件载体上； 每一个节点都需要有 唯一的命名 ，当我们想要去找到某一个节点的时候，或者想要查询某一个节点的状态时，可以通过节点的名称来做查询。 节点也可以比喻是一个一个的工人，分别完成不同的任务，他们有的在一线厂房工作，有的在后勤部门提供保障，他们互相可能并不认识，但却一起推动机器人这座“工厂”，完成更为复杂的任务。 接下来，我们就来看看， 节点这个工作细胞，到底该如何实现。","text_tokens":["相同","，","查询","人为","通过","摄像","某些","和","来看","各不相同","如何","既然","部门","接下来","更为","到","虽然","厂房","一起","多","除此","不是","角度","可能","了","时候","分别","一个","参数","还","推动","并","任务","编译","算是","外界","有","还会","编程语言","分布式","比喻","得到","运行","还有","的","我们","移动","上","执行","编程","布式","时","在","唯一","操作系统","“","不同","地方","python","设计","；","搭载","到底","摇杆","接下","机器","做","左右","操作","工作","每个","复杂","独立","可以","算机","这些","想到","来","”","是","c++","都","b","文件","分布","。","共同","自然","载体","之外","像头","细胞","、","眼睛","运动","系统","保障","组成","监控","信息","云端","另外","配置","当","互相","或者","就是","工厂","环境","控制","获取","乃至","功能","后勤部","整体","那","：","却","ruby","一台","这座","命名","不","状态","工人","桌子","身体","后勤","行文","更","名称","远程","从","连接","放在","让","这","该","后勤部门","中","物理","职责","摄像头","这样","速度","它","他们","具体","这个","看看","生成","找到","提供","节点","前后左右","一线","某","腿","轮子","进程","程序","位于","想要"," ","可执行文件","—","除此之外","去","java","叫做","完整","也","每","里","实现","计算","看到","认识","你","计算机","需要","a","但","完成","硬件","语言","这款","就","比如","结果","机器人","等","根据","前后","下来"],"title":"通信模型","title_tokens":["模型","通信","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#hello-world","text":"ROS2中节点的实现当然是需要编写程序了，我们从Hello World例程开始，先来实现一个最为简单的节点，功能并不复杂，就是循环打印一个“Hello World”字符串到终端中。","text_tokens":["打印","，","终端","功能","例程","节点","编写程序","到","复杂","字符","程序","”","来","不","是","编写"," ","了","“","world","一个","先","。","ros2","并","开始","实现","hello","需要","从","的","我们","字符串","最为","当然","中","就是","循环","简单"],"title":"案例一：Hello World节点（面向过程）","title_tokens":["案例","面向","过程","（","一","：","节点"," ","）","world","hello"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_3","text":"大家先不要着急看代码，是骡子是马，先拉出来溜溜，我们通过ros2 run命令，运行编译好的课程代码，看下这个节点执行的效果如何，然后再来分析代码的实现过程，做到知其然也知其所以然。 $ ros2 run learning_node node_helloworld 运行成功后，可以在终端中看到循环打印“Hello World”字符串的效果。","text_tokens":["helloworld","马","，","打印","这个","然后","好","通过","过程","知其所以然","成功","终端","骡子","看","node","节点","如何","溜溜","代码","$","run","可以","来","”","字符","是","下"," ","world","先","循环","。","ros2","命令","编译","再","也","分析","_","效果","实现","大家","看到","hello","出来","课程","做到","运行","所以然","字符串","的","我们","知其然","着急","后","执行","先拉","所以","中","learning","在","不要","“"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_4","text":"这个节点是如何实现的呢？我们来看下代码。 learning_node/node_helloworld.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向过程的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_helloworld\" ) # 创建ROS2节点对象并进行初始化 while rclpy . ok (): # ROS2系统是否正常运行 node . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , ],","text_tokens":["scripts","helloworld","，","过程","来看","logger","node","如何","python3","说明","初始","包","时间","函数","*","加入","下","正常","点","接口",",","import","并","编译","是否",":","_","作者","库","=","@","info","运行","的","我们","使用","'","如下","]","bin","打开","“","？","python","[","日志","”","points","是","main","文件","。","ros2","面向","{","古月","args","系统","-","!","hello","信息","配置","entry","shutdown","后","进行","选项","控制","\"","功能","入口","：",".",")","sleep","输出","coding","代码","关闭","销毁","初始化","def","编写","居","guyuehome","env","none","8","类","from","休眠","让","循环","(","这个","发布","对象","#","方式","0.5","节点","主","py","get","程序","创建","示例","rclpy","console","设置"," ","呢","world","ok","com","www","/","知道","time","while","实现","utf","init","setup","需要","usr","完成","destroy","learning"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_5","text":"代码中出现的函数大家未来会经常用到，大家先不用纠结函数的具体使用方法，更重要的是理解节点的编码流程。 总结一下，想要实现一个节点，代码的实现流程是这样做： 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 大家如果有学习过C++或者Pyhton的话，应该可以发现这里我们使用的是面向过程的编程方法，这种方式虽然实现简单，但是对于稍微复杂一点的机器人系统，就很难做到模块化编码。","text_tokens":["，","具体","流程","理解","过程","功能","pyhton","一下","方式","：","对于","节点","应该","机器","很","做","的话","方法","初始","虽然","复杂","用到","代码","函数","关闭","经常","创建","销毁","可以","过","但是","初始化","这种","模块化","不用","纠结","是","想要","c++"," ","未来","接口","一个","稍微","先","这里","。","并","面向","学习","出现","有","系统","模块","更","实现","大家","会","如果","重要","做到","一点","难","的","我们","编码","发现","使用","或者","总结","编程","就","中","机器人","这样","简单"],"title":"创建节点流程","title_tokens":["创建","流程","节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#hello-world_1","text":"所以在ROS2的开发中，我们更 推荐大家使用面向对象的编程方式 ，比如刚才的代码就可以改成这样，虽然看上去复杂了一些，但是代码会具备更好的可读性和可移植性，调试起来也会更加方便。","text_tokens":["，","看上","对象","上去","具备","和","方式","刚才","看上去","调试","改成","更好","虽然","复杂","代码","可以","方便","但是","可读性","一些"," ","了","。","ros2","面向对象","面向","移植","也","可读","开发","更","移植性","更加","可移植","大家","会","的","我们","推荐","使用","起来","所以","编程","就","中","比如","可移植性","在","这样"],"title":"案例二：Hello World节点（面向对象）","title_tokens":["面向对象","二","案例","面向","对象","（","：","节点"," ","）","world","hello"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_6","text":"接下来运行一下调整后的节点： $ ros2 run learning_node node_helloworld_class 运行成功后，可以还是可以在终端中看到循环打印“Hello World”字符串的效果。","text_tokens":["helloworld","打印","，","终端","成功","一下","：","node","节点","接下","接下来","class","可以","$","run","”","字符","调整"," ","world","循环","。","ros2","_","效果","看到","hello","运行","字符串","的","后","下来","中","learning","还是","在","“"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_7","text":"功能虽然一样，但是程序的结构发生了变化，我们具体看一下这份代码。 learning_node/node_helloworld_class.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向对象的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time \"\"\" 创建一个HelloWorld节点, 初始化时输出“hello world”日志 \"\"\" class HelloWorldNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 while rclpy . ok (): # ROS2系统是否正常运行 self . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = HelloWorldNode ( \"node_helloworld_class\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , ],","text_tokens":["scripts","helloworld","，","spin","name","helloworldnode","logger","node","python3","说明","初始","包","虽然","时间","函数","*","但是","加入","正常","了","接口","点","一个",",","import","并","编译","是否",":","_","作者","库","=","@","退出","info","运行","的","我们","使用","'","如下","]","时","bin","变化","打开","“","python","[","一下","class","日志","等待","”","points","main","文件","。","ros2","面向","{","古月","self","args","系统","-","!","hello","信息","配置","entry","shutdown","后","进行","选项","控制","\"","功能","看","入口","：",".",")","sleep","输出","coding","代码","关闭","销毁","初始化","一样","def","父类","居","编写","guyuehome","env","none","这份","8","类","from","休眠","让","__","循环","(","具体","发布","对象","#","结构","方式","0.5","节点","主","发生","py","get","程序","创建","示例","rclpy","super","console","设置"," ","ok","world","com","www","/","面向对象","知道","time","while","实现","utf","init","setup","需要","usr","完成","destroy","learning"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_8","text":"所以总体而言，节点的实现方式依然是这四个步骤，只不过编码方式做了一些改变而已。 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 到这里为止，大家是不是心里还有一个疑惑，机器人中的节点不能只是打印Hello World吧，是不是得完成一些具体的任务。","text_tokens":["打印","，","吧","具体","心里","不过","功能","为止","方式","不能","只是","四个","节点","机器","而言","做","得","初始","到","关闭","只不过","创建","销毁","步骤","是不是","初始化","是","不是","一些"," ","了","接口","总体","一个","world","这里","依然","。","并","编码方式","任务","总体而言","实现","大家","改变","hello","还有","的","疑惑","编码","这","完成","所以","编程","而已","中","机器人"],"title":"创建节点流程","title_tokens":["创建","流程","节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_9","text":"没错，接下来我们就以机器视觉的任务为例，模拟实际机器人中节点的实现过程。 我们先从网上找到一张苹果的图片，通过编写一个节点来识别图片中的苹果。","text_tokens":["，","过程","找到","通过","苹果","实际","节点","接下","机器","接下来","网上","为例","来","以","编写"," ","一个","先","。","识别","任务","没错","模拟","图片","实现","从","的","我们","视觉","下来","就","中","机器人","一张"],"title":"案例三：物体识别节点","title_tokens":["识别","案例","三","物体","：","节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_10","text":"在这个例程中，我们将用到一个图像处理的库——OpenCV，运行前请使用如下指令安装： $ sudo apt install python3-opencv 然后就可以运行例程啦： $ ros2 run learning_node node_object #注意修改图片路径后重新编译 Attention 运行前需要将learning_node/node_object.py代码中的图片路径，修改为实际路径，修改后重新编译运行即可： image = cv2.imread(' /home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg ') 例程运行成功后，会弹出一个可视化窗口，可以看到苹果被成功识别啦，一个绿色框会把苹果的轮廓勾勒出来，中间的绿点表示中心点。","text_tokens":["，","然后","例程","实际","node","python3","src","apple","注意","表示","dev","一个","中心点","识别","编译","图片","attention","_","库","=","图像处理","运行","的","我们","使用","'","如下","绿点","在","安装","imread","image","把","可以","run","窗口","hcx","。","ros2","处理","-","前","勾勒","后","成功","图像","绿色","苹果","：",".",")","用到","代码","$","被","啦","出","中间","21","tutorials","请","ws","将","install","中心","为","中","轮廓","(","这个","#","指令","可视","sudo","会弹","py","jpg"," ","即可","opencv","—","框会","路径","/","可视化","重新","apt","object","看到","home","出来","需要","cv2","修改","就","learning"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_11","text":"在这个例程中，我们加入了图像识别的处理过程，模拟一个节点的功能，关于图像处理的具体实现，并不是此处的重点，大家更多要关注我们是如何通过节点的概念来实现一个具体的机器人功能。 learning_node/node_object.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过颜色识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) image = cv2 . imread ( '/home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg' ) # 读取图像 object_detect ( image ) # 苹果检测 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , ],","text_tokens":["scripts","关于","helloworld","，","spin","图像识别","过程","通过","for","例程","和","1","显示","logger","数值","node","如何","python3","src","更多","说明","初始","apple","包","函数","*","加入","dev","不是","了","接口","点","一个",",","import","处理过程","识别","并","理过","inrange","as","编译","出现","像素",":","图片","in","2","_","作者","库","=","@","+","info","图像处理","得到","退出","去除","重点","的","我们","使用","宽","'","]","如下","bin","打开","在","<","坐标","python","y","[","imread","下限","机器","image","class","90","np","color","255","范围","等待","关注","来","points","是","retr","hcx","main","文件","destroyallwindows","。","ros2","处理","mask","w","古月","{","args","系统","-","效果","red","!","img","阈值","detect","配置","勾勒","shutdown","bgr","findcontours","shape","后","entry","进行","选项","array","numpy","\"","图像","功能","苹果","面积","更多要","入口","：","机器人",".",")","approx","coding","检测","hsv","关闭","代码","销毁","所在","contours","初始化","def","点画","一些","居","编写","h","guyuehome","env","模型","读取","21","none","tutorials","chain","8","二值化","ws","类","大家","if","将","from","从","circle","中心","让","boundingrect","为","高","cvtcolor","中","轮廓","循环","continue","太小","(","上角","概念","具体","waitkey","这个","对象","xy","#","上限","左上","转换","节点","150","主","list","py","噪声","get","bgr2hsv","程序","drawcontours","创建","示例","rclpy","jpg","及","console","x"," ","设置","opencv","com","www","/","模拟","红色","int","128","知道","object","0","imshow","实现","upper","计算","lower","出来","utf","init","home","setup","需要","usr","颜色","cv2","5","此处","cnt","左上角","180","完成","destroy","learning","hierarchy"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_12","text":"用图片进行识别好像还不太合理，机器人应该有眼睛呀，没问题，接下来我们就让节点读取摄像头的图像，动态识别其中的苹果，或者类似颜色的物体。","text_tokens":["，","图像","摄像","苹果","接下","机器","应该","节点","接下来","动态","不","物体","其中","类似","合理","好像","还","。","识别","没","读取","像头","有","眼睛","问题","图片","用","就让","太","颜色","的","我们","呀","或者","进行","下来","机器人","摄像头"],"title":"案例四：机器视觉识别节点","title_tokens":["识别","案例","四","视觉","：","节点","机器"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_13","text":"启动一个终端，运行如下节点： $ ros2 run learning_node node_object_webcam #注意设置摄像头 Attention 如果是在虚拟机中操作，需要进行以下设置： 1. 把虚拟机设置为兼容USB3.1； 2. 在可移动设备中将摄像头连接至虚拟机。 运行成功后，该节点就可以驱动摄像头，并且实时识别摄像头中的红色物体啦。","text_tokens":["，","webcam","终端","成功","摄像","#","1","；","：","node","节点","实时",".","把","操作","虚拟","驱动","可以","$","run","注意","啦","可","兼容","物体","是","设置"," ","一个","。","ros2","识别","像头","红色","2","object","attention","以下","并且","_","usb3.1","至","如果","运行","需要","设备","启动","连接","的","移动","中将","后","为","该","进行","如下","中","就","learning","在","摄像头","虚拟机"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_14","text":"相比之前的程序，这里最大的变化是修改了图片的来源，使用OpenCV中的VideoCapture()来驱动相机，并且周期read摄像头的信息，并进行识别。 learning_node/node_object_webcam.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过摄像头识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object_webcam\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) cap = cv2 . VideoCapture ( 0 ) while rclpy . ok (): ret , image = cap . read () # 读取一帧图像 if ret == True : object_detect ( image ) # 苹果检测 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , 'node_object_webcam = learning_node.node_object_webcam:main' , ],","text_tokens":["scripts","helloworld","，","通过","摄像","for","和","1","显示","50","logger","数值","node","python3","说明","初始","包","驱动","函数","*","加入","最大","来源","了","接口","点",",","import","并","识别","inrange","as","编译","出现","像素",":","图片","in","2","_","作者","库","=","@","+","info","图像处理","得到","去除","的","cap","一帧","使用","宽","之前","]","如下","'","bin","变化","打开","read","<","坐标","python","y","[","下限","image","class","90","np","color","255","范围","来","points","是","retr","main","文件","。","ros2","处理","mask","像头","w","古月","{","args","系统","-","相机","效果","red","!","信息","img","阈值","detect","配置","勾勒","shutdown","bgr","findcontours","shape","后","entry","进行","选项","array","numpy","\"","图像","功能","苹果","面积","入口","：",".",")","approx","coding","检测","hsv","关闭","代码","销毁","所在","contours","初始化","def","点画","一些","居","编写","h","这里","guyuehome","env","模型","读取","none","true","chain","周期","8","二值化","并且","类","if","将","ret","from","从","circle","中心","让","boundingrect","为","高","cvtcolor","中","轮廓","摄像头","videocapture","(","太小","continue","上角","webcam","waitkey","对象","xy","#","上限","左上","相比","节点","转换","150","主","list","py","噪声","get","程序","bgr2hsv","drawcontours","创建","示例","rclpy","console","及","x"," ","设置","opencv","ok","com","www","/","红色","int","128","知道","object","0","imshow","while","upper","计算","lower","出来","utf","init","setup","需要","usr","cv2","颜色","5","修改","cnt","左上角","180","完成","destroy","learning","hierarchy"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_15","text":"节点命令的常用操作如下： $ ros2 node list # 查看节点列表 $ ros2 node info <node_name> # 查看节点信息","text_tokens":["name","#","：","node","节点","list","操作","$","列表"," ","ros2","命令","查看","_",">","info","信息","的","如下","<","常用"],"title":"节点命令行操作","title_tokens":["操作","命令行","命令","节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_16","text":"现在，大家应该熟悉节点这个工作细胞的概念和实现方法了，回到这个机器人系统的框架图，我们还会发现另外一个问题。 电脑B中的摇杆，要控制机器人运动，这两个节点岂不是应该有某种连接，比如摇杆节点发送一个速度指令给运动节点，收到后机器人开始运动。 同理，如果我们想要改变机器人的速度，负责配置参数的节点就得发送一个指令给运动节点，如果电脑B想要显示机器人看到的图像，电脑A中的摄像头节点就得把图像发送过来。 没错，在一个ROS机器人的系统中， 节点并不是孤立的，他们之间会有很多种机制保持联系 ，下一节，我们将给大家介绍这些机制中最为常用的一种。","text_tokens":["，","摄像","和","显示","应该","方法","之间","下","不是","了","一个","某种","参数","并","有","还会","改变","的","我们","联系","最为","介绍","发现","在","同理","一节","机制","摇杆","机器","得","把","现在","工作","这些","b","。","收到","两个","像头","细胞","运动","问题","开始","系统","会","如果","另外","配置","后","常用","要","控制","图像","很","岂","ros","给","没错","保持","回到","大家","将","一种","连接","这","中","电脑","摄像头","速度","概念","他们","这个","节点","指令","孤立","保持联系","负责","想要"," ","发送","多种","实现","看到","a","熟悉","框架","就","比如","机器人","过来","框架图"],"title":"思考题","title_tokens":["思考题","考题","思考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_17","text":"https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Nodes.html","text_tokens":["html","docs","ros2","/","org","tutorials","ros","understanding","nodes","en","humble",":","-",".","https"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/","text":"话题 节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。 通信模型 以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。 发布/订阅模型 从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为 发布者 ，接收数据的对象称之为 订阅者 ，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。 多对多通信 大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。 异步通信 话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。 消息接口 最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过 .msg 后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。 案例一：Hello World话题通信 了解了话题的基本原理，接下来我们就要开始编写代码啦。 还是从Hello World例程开始，我们来创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。 运行效果 启动第一个终端，运行话题的发布者节点： $ ros2 run learning_topic topic_helloworld_pub 启动第二个终端，运行话题的订阅者节点： $ ros2 run learning_topic topic_helloworld_sub 可以看到发布者循环发布“Hello World”字符串消息，订阅者也以几乎同样的频率收到该话题的消息数据。 发布者代码解析 我们来看下发布者的实现方法。 程序实现 learning_topic/topic_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . pub = self . create_publisher ( String , \"chatter\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"topic_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个发布者，流程如下： 编程接口初始化 创建节点并初始化 创建发布者对象 创建并填充话题消息 发布话题消息 销毁节点并关闭接口 订阅者代码解析 我们再来看下订阅者的实现方法。 程序实现 learning_topic/topic_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"topic_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个订阅者，流程如下： 编程接口初始化 创建节点并初始化 创建订阅者对象 回调函数处理话题数据 销毁节点并关闭接口 好啦，Hello World例程大家一定还不过瘾，接下来我们基于话题通信，继续优化下之前的机器视觉例程。 案例二：机器视觉识别 在节点概念的讲解过程中，我们通过一个节点驱动了相机，并且实现了对红色物体的识别。功能虽然没问题，但是对于机器人开发来讲，并没有做到程序的模块化，更好的方式是将相机驱动和视觉识别做成两个节点，节点间的联系就是这个图像数据，通过话题周期传输即可。 运行效果 这个图像消息在ROS中是标准定义好的，如果未来要更换另一个相机，只需要修改驱动节点，视觉识别节点完全是软件功能，就可以保持不变了，这种模块化的设计思想，可以更好的保证软件的可移植性。 好啦，说干就干，我们先来看下效果如何？ 启动两个终端，分别运行以下两个节点，第一个节点驱动相机并发布图像话题，第二个节点订阅图像话题并实现视觉识别。 $ ros2 run learning_topic topic_webcam_pub $ ros2 run learning_topic topic_webcam_sub 将红色物体放入相机范围内，即可看到识别效果。 发布者代码解析 learning_topic/topic_webcam_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 \"\"\" 创建一个发布者节点 \"\"\" class ImagePublisher ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . publisher_ = self . create_publisher ( Image , 'image_raw' , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.1 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . cap = cv2 . VideoCapture ( 0 ) # 创建一个视频采集对象，驱动相机采集图像（相机设备号） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于稍后将OpenCV的图像转换成ROS的图像消息 def timer_callback ( self ): ret , frame = self . cap . read () # 一帧一帧读取图像 if ret == True : # 如果图像读取成功 self . publisher_ . publish ( self . cv_bridge . cv2_to_imgmsg ( frame , 'bgr8' )) # 发布图像消息 self . get_logger () . info ( 'Publishing video frame' ) # 输出日志信息，提示已经完成图像话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImagePublisher ( \"topic_webcam_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , ], }, 订阅者代码解析 learning_topic/topic_webcam_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 10 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , 'topic_webcam_sub = learning_topic.topic_webcam_sub:main' , ], }, 案例三：机器视觉识别优化 通过话题对原本节点功能的解耦，似乎让视觉识别的例程焕然一新了，不过似乎还有哪里不太对劲，大家有感觉到么？ ROS的目标不是提高软件复用率么，现在视觉识别的节点可以复用了，相机驱动节点好像不行呀，每换一个相机，是不是都得换一个驱动节点？这当然是不可能的！ 常用的usb相机驱动一般都是通用的，ROS中也集成了usb相机的标准驱动，我们只需要通过这样一行指令，就可以安装好，无论你用什么样的相机，只要符合usb接口协议，就可以直接使用ROS中的相机驱动节点，发布标准的图像话题了。 $ sudo apt install ros-humble-usb-cam 这样，我们的代码又得到了进一步精简，刚才自己写的图像发布节点换成了这样一句指令，视觉识别节点不需要做任何变化。 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic topic_webcam_sub 话题命令行操作 话题命令的常用操作如下： $ ros2 topic list # 查看话题列表 $ ros2 topic info <topic_name> # 查看话题信息 $ ros2 topic hz <topic_name> # 查看话题发布频率 $ ros2 topic bw <topic_name> # 查看话题传输带宽 $ ros2 topic echo <topic_name> # 查看话题数据 $ ros2 topic pub <topic_name> <msg_type> <msg_data> # 发布话题消息 思考题 关于话题通信的原理和实现方法我们就讲到这里，给大家留一个思考题：话题通信的特性是单向传输，适合周期性的数据传递，对于一个复杂的机器人系统来讲，这种特性肯定无法满足所有数据传输的需求，大家是否能够举几个例子，是话题通信无法完成的呢？ 参考链接 https://docs.ros.org/en/humble/Tutorials/Topics/Understanding-ROS2-Topics.html","text_tokens":["scripts","终端","讲解","某些","例程","能够","数值","应该","python3","方法","到","虽然","带宽","函数","加入","publishernode","以","下","角度","时候","可能","分别","参数","先","传感","subscribernode","rgb","发送数据","库",">","退出","info","一份","运行","千丝万缕","无法","很多","继续","频率","上","使用","就要","执行","是从","移植性","异步","“","read","？","python","好","比方","单位","安装","哪里","摇杆","class","逻辑","90","把","html","np","这些","发布者","来","感觉","是","已","又","string","b","。","感兴趣","mask","w","无关","self","系统","args","-","模块","pub","监控","过瘾","img","同样","呀","耦","进行","类似","imagesubscriber","array","控制","想","bgr8","std","像","接口协议","刚才","发出","approx","一次","为例","hsv","这种","def","一些","父类","这里","必然","模型","渲染","tutorials","chain","8","提示","存在","名称","可移植","大家","if","完全","from","从","circle","install","第一","才能","boundingrect","三","该","__","cvtcolor","高","写","此时","作为","这样","号","webcam","打","这个","发布","优先","接口定义","不能","间","转换","符合","list","用户","什么","get","publish","微信","什么样","程序实现","第一次","super","另","x","保证","数据","world","接收数据","二个","转化","再","知道","红色","128","int","基本原理","init","接收","setup","重要","设备","区分","颜色","稍后","感兴","硬件","cvbridge","可移植性","5","hierarchy","长宽","helloworld","，","关于","适合","！","name","通过","过程","显示","logger","node","如何","publisher","说明","的话","块","接下来","直接","驱动","一新","案例","注意","听说","每换","但是","bridge","转化成",",","data","目标","inrange","有","千丝","2","合适","编程语言","基本","10","作者","@","率","订阅","还有","cap","视觉","如下","]","采集","bin","变化","定时","唯一","从而","英文","者","传输","之为","命令行","y","换","一下","可见","下限","机器","image","人","后缀","现在","复杂","255","points","思考题","模块化","说","retr","在生活中","二","单向","多个","docs","两个","类型","已经","一句","、","运动","}","video","相机","heard","!","会","另外","配置","detect","优先级","entry","shutdown","bgr","findcontours","后","文章","就是","dds","本原","中文","选项","numpy","成功","获取","图像","功能","需求","阅读","看","：","入口","进入",")","输出","coding","检测","逻辑性","被","数据结构","代码","不","销毁","所在","点画","h","成为","org","true","周期","type","没错","与","数量","保持","二值化","集成","更","imagepublisher","值","一种","随处","让","以上","换成","中","轮廓","循环","videocapture","概念","拼接","几乎","理解","放入","并不知道","不太","听","秒","桥梁","可视","对","兴趣","主","150","焕然","msgs","因为","更好","某","字符","en","基于","rclpy","感器","to","0.1","/","解析","分析","据传","imshow","你","出去","一定","180","参考","destroy","语言","说干就干","东西","3","考题","spin","不知","定时器","和","1","描述","来看","特性","实时","既然","用于","%","*","不变","cv","多","对劲","列表","报纸","了","点","https","一个","某种","msg","还","import","create","识别","想象","之后","是否","要求",":","留","不然","imgmsg","=","得到","callback","拍摄","去除","的","联系","知识","包含","listener","frame","编程","'","之前","软件","在","复用","小编","根本","坐标","方向","s","[","接下","得","hz","每个","组织","color","可以","run","是不是","报社","bw","一行","都","只","解","处理","没","{","开始","以下","各种","平时","用","组成","效果","red","hello","优化","信息","如果","太","做成","想下","通用","排版","一篇","原理","要","最后","苹果","那",".","精简","回调","一步","$","积木","contours","啦","初始化","居","给","未来","好像","chatter","env","none","并且","提高","只要","sensor","将","第二个","个","中心","进一步","为","关系","continue","思想","echo","它","流程","xy","控制指令","上限","数据传输","0.5","左上","万缕","sudo","噪声","几个","叫","自行","示例","名","i","console","及","想要","设置"," ","发送","随处可见","呢","即可","www","叫做","humble","查看","中是","较强","object","0","里","实现","举","看到","计算","lower","utf","usr","cv2","通信","成","修改","传感器","cnt","但","完成","当然","自己","就","下来","learning","还是","receiving","名字","for","链接","初始","包","之间","第一个","所谓","一","没有","不是","转换成","接口","他会","并","as","编译","所有","像素","\\","移植","传递","topic","in","_","似乎","定义","+","例子","图像处理","格式","做到","不行","字符串","启动","我们","一帧","understanding","仔细","词","统一","本身","宽","么","打开","消息","<","raw","设计","cam","对于","做","日志","一般","操作","独立","挺","等待","”","范围","usb","物体","其中","无论","协议","文件","main","自然","收到","ros2","思考","古月","问题","长度","最","生活","阈值","焕然一新","建议","勾勒","shape","互相","总结","常用","第二","满足","\"","不过","面积","publishing","视频","subscription","魔性","各种各样","谁","等等","ros","关闭","化成","一样","timer","编写","sub","对应","guyuehome","读取","命令","传递数据","内","开发","类","各样","ret","更换","这","填充","太小","(","上角","同学","waitkey","通信模型","联系方式","话题","对象","（","#","队列","结构","方式","节点","指令","py","画面","程序","bgr2hsv","创建","drawcontours","指","了解","讲","公众","）","opencv","任何","com","杂志","exe","可视化","标准","每","也","apt","upper","称之为","出来","需要","a","原本","肯定","数据类型","来讲","左上角","topics","周期性","比如","机器人","固定"],"title":"话题","title_tokens":["话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_1","text":"节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。","text_tokens":["它","，","联系方式","话题","功能","方式","间","节点","机器","万缕","桥梁","各种各样","之间","独立","这些","其中","是","不是"," ","了","数据","。","并","传递数据","有","千丝","传递","各种","实现","最","各样","会","重要","一种","千丝万缕","的","联系","但","就是","机器人"],"title":"话题","title_tokens":["话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_2","text":"以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。","text_tokens":["，","显示","实时","到","之间","驱动","以","不是","了","一个","某种","有","传递","得到","拍摄","的","我们","上","在","？","方向","传输","之为","一下","机器","做","可以","是不是","是","b","。","两个","相机","监控","信息","要","想","获取","图像","功能","视频","为例","ros","给","必然","渲染","没错","存在","大家","将","从","这","才能","关系","中","此时","作为","这样","它","这个","话题","数据传输","方式","节点","可视","桥梁","用户","某"," ","数据","可视化","查看","据传","实现","称之为","设备","a","硬件","就","机器人"],"title":"通信模型","title_tokens":["模型","通信","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_3","text":"从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为 发布者 ，接收数据的对象称之为 订阅者 ，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。","text_tokens":["，","和","来看","特性","应该","的话","到","报纸","没有","角度","了","一个","他会","之后","有","要求","发送数据","订阅","格式","无法","的","知识","使用","是从","本身","“","小编","？","者","好","传输","之为","比方","可见","机器","把","组织","可以","”","发布者","是","都","在生活中","。","自然","收到","类型","感兴趣","、","古月","平时","会","如果","生活","另外","文章","就是","dds","排版","类似","看","等等","居","模型","成为","名称","大家","从","随处","这样","号","它","打","这个","发布","对象","话题","数据传输","节点","对","兴趣","什么","叫","微信","基于"," ","发送","数据","呢","公众","接收数据","随处可见","杂志","/","叫做","每","也","据传","实现","称之为","接收","需要","数据类型","成","出去","感兴","就","比如","机器人","固定","名字"],"title":"发布/订阅模型","title_tokens":["发布","模型","订阅","/"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_4","text":"大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。","text_tokens":["，","和","1","注意","多","报纸","不是","可能","了","一个","并","想象","有","2","不然","似乎","订阅","的","我们","很多","仔细","唯一","者","之为","一下","摇杆","机器","人","每个","这些","可以","挺","发布者","是不是","是","。","多个","、","如果","优先级","建议","想下","控制","要","魔性","谁","被","ros","不","一样","模型","没错","数量","存在","大家","个","该","号","这个","发布","通信模型","优先","话题","控制指令","听","指令","节点","对","因为","画面"," ","公众","发送","杂志","再","知道","也","里","称之为","区分","通信","机器人","还是","东西","3"],"title":"多对多通信","title_tokens":["对","多","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_5","text":"话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。","text_tokens":["，","适合","不知","某些","特性","用于","听说","所谓","报纸","时候","可能","了","一个","参数","传感","有","合适","订阅","一份","还有","的","词","异步","根本","？","者","传输","逻辑","可以","发布者","报社","是","。","收到","古月","运动","用","如果","太","后","文章","就是","类似","一篇","控制","阅读","那","发出","一次","逻辑性","等等","不","一些","居","周期","更","只要","让","这","第一","号","同学","这个","发布","并不知道","话题","指令","什么","某","第一次","指"," ","公众","数据","感器","叫做","知道","也","较强","你","通信","修改","传感器","就","比如"],"title":"异步通信","title_tokens":["异步","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_6","text":"最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过 .msg 后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。","text_tokens":["长宽","，","通过","和","描述","既然","块","了","接口","一个","msg","有","像素","rgb","编程语言","定义","订阅","格式","的","包含","我们","统一","编程","在","消息","英文","者","传输","之为","机器","得","后缀","复杂","每个","可以","发布者","是","说","都","文件","。","、","无关","系统","各种","组成","会","进行","中文","最后","图像","像",".","各种各样","等等","数据结构","ros","积木","一样","对应","这里","与","值","各样","一种","中","这样","概念","拼接","理解","发布","话题","接口定义","数据传输","结构","方式","不能","节点","自行"," ","数据","标准","也","据传","称之为","通信","成","语言","就","比如","机器人"],"title":"消息接口","title_tokens":["接口","消息"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#hello-world","text":"了解了话题的基本原理，接下来我们就要开始编写代码啦。 还是从Hello World例程开始，我们来创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。","text_tokens":["，","从而","这个","发布","者","话题","例程","接下","接下来","到","代码","字符","”","发布者","来","创建","ros","啦","是","了解","编写"," ","了","“","发送","world","一个","string","chatter","。","类型","周期","再","标准","开始","基本原理","基本","定义","hello","订阅","接收","从","的","我们","字符串","就要","下来","中","还是","本原","消息","原理"],"title":"案例一：Hello World话题通信","title_tokens":["案例","通信","话题","一","："," ","world","hello"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_7","text":"启动第一个终端，运行话题的发布者节点： $ ros2 run learning_topic topic_helloworld_pub 启动第二个终端，运行话题的订阅者节点： $ ros2 run learning_topic topic_helloworld_sub 可以看到发布者循环发布“Hello World”字符串消息，订阅者也以几乎同样的频率收到该话题的消息数据。","text_tokens":["helloworld","，","第二","几乎","者","终端","发布","话题","：","节点","可以","$","run","发布者","”","第一个","字符","以"," ","sub","数据","一个","二个","world","。","收到","ros2","也","topic","_","pub","看到","hello","订阅","第二个","运行","字符串","启动","的","同样","频率","第一","该","learning","循环","消息","“"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_8","text":"我们来看下发布者的实现方法。","text_tokens":["。","发布","我们","发布者","的","来看","下","实现","方法"],"title":"发布者代码解析","title_tokens":["发布","解析","发布者","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_9","text":"learning_topic/topic_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . pub = self . create_publisher ( String , \"chatter\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"topic_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , ], },","text_tokens":["scripts","helloworld","，","spin","name","定时器","logger","node","python3","publisher","说明","初始","包","函数","%","*","加入","publishernode","点","接口","msg","一个",",","import","data","create","并","编译",":","topic","_","10","作者","库","=","@","退出","info","callback","字符串","的","执行","'","如下","]","bin","打开","消息","定时","“","python","单位","s","[","class","日志","等待","”","发布者","points","string","main","文件","ros2","类型","已经","、","古月","{","self","args","系统","长度","-","}","pub","!","hello","信息","配置","entry","shutdown","后","进行","选项","\"","功能","std","publishing","入口","：",".",")","输出","coding","回调","代码","关闭","销毁","初始化","timer","def","父类","居","编写","guyuehome","chatter","env","none","周期","8","提示","类","from","让","填充","为","__","中","循环","(","发布","对象","话题","（","#","队列","0.5","秒","节点","主","py","msgs","get","publish","字符","程序","创建","示例","rclpy","super","名","console","设置"," ","数据","）","world","com","www","/","知道","utf","init","setup","需要","usr","完成","destroy","learning"],"title":"程序实现","title_tokens":["程序","程序实现","实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_10","text":"对以上程序进行分析，如果我们想要实现一个发布者，流程如下： 编程接口初始化 创建节点并初始化 创建发布者对象 创建并填充话题消息 发布话题消息 销毁节点并关闭接口","text_tokens":["，","流程","发布","对象","话题","：","节点","对","初始","关闭","程序","发布者","创建","销毁","初始化","想要"," ","接口","一个","并","分析","实现","如果","我们","以上","填充","进行","编程","如下","消息"],"title":"流程总结","title_tokens":["总结","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_11","text":"我们再来看下订阅者的实现方法。","text_tokens":["订阅","。","者","的","我们","再","来看","下","实现","方法"],"title":"订阅者代码解析","title_tokens":["订阅","解析","代码","者"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_12","text":"learning_topic/topic_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"topic_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , ], },","text_tokens":["scripts","helloworld","，","spin","name","logger","node","python3","说明","初始","包","函数","%","*","加入","点","接口","msg","一个",",","import","data","create","并","subscribernode","编译","\\",":","topic","_","10","作者","库","定义","@","=","info","退出","订阅","callback","的","listener","执行","'","如下","]","bin","打开","消息","“","python","者","s","[","class","日志","等待","”","points","string","main","文件","收到","ros2","处理","类型","、","古月","{","self","args","系统","长度","-","}","pub","heard","!","hello","信息","配置","entry","shutdown","后","进行","选项","\"","功能","std","入口","：","subscription",".",")","输出","coding","回调","代码","关闭","销毁","初始化","def","父类","居","sub","编写","guyuehome","chatter","env","none","8","提示","类","from","让","__","循环","(","对象","话题","（","#","队列","节点","对","主","py","msgs","get","程序","创建","示例","rclpy","super","名","i","console","设置"," ","数据","）","world","com","www","/","标准","知道","utf","init","setup","需要","usr","完成","destroy","learning"],"title":"程序实现","title_tokens":["程序","程序实现","实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_13","text":"对以上程序进行分析，如果我们想要实现一个订阅者，流程如下： 编程接口初始化 创建节点并初始化 创建订阅者对象 回调函数处理话题数据 销毁节点并关闭接口 好啦，Hello World例程大家一定还不过瘾，接下来我们基于话题通信，继续优化下之前的机器视觉例程。","text_tokens":["，","流程","者","好","对象","话题","例程","：","节点","接下","对","机器","接下来","初始","回调","函数","程序","关闭","创建","销毁","不","基于","啦","初始化","想要","下"," ","接口","数据","一个","world","还","。","并","处理","分析","实现","大家","hello","优化","订阅","如果","过瘾","的","我们","通信","以上","继续","一定","视觉","进行","编程","如下","下来","之前"],"title":"流程总结","title_tokens":["总结","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_14","text":"在节点概念的讲解过程中，我们通过一个节点驱动了相机，并且实现了对红色物体的识别。功能虽然没问题，但是对于机器人开发来讲，并没有做到程序的模块化，更好的方式是将相机驱动和视觉识别做成两个节点，节点间的联系就是这个图像数据，通过话题周期传输即可。","text_tokens":["概念","，","这个","讲解","过程","通过","功能","图像","话题","和","传输","方式","对于","间","节点","机器","对","更好","虽然","驱动","程序","但是","物体","模块化","没有","是","了","数据","即可","一个","。","并","识别","没","两个","周期","红色","问题","模块","并且","相机","开发","实现","将","做到","的","我们","联系","做成","来讲","视觉","中","就是","机器人","在"],"title":"案例二：机器视觉识别","title_tokens":["识别","案例","视觉","：","机器","二"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_15","text":"这个图像消息在ROS中是标准定义好的，如果未来要更换另一个相机，只需要修改驱动节点，视觉识别节点完全是软件功能，就可以保持不变了，这种模块化的设计思想，可以更好的保证软件的可移植性。 好啦，说干就干，我们先来看下效果如何？ 启动两个终端，分别运行以下两个节点，第一个节点驱动相机并发布图像话题，第二个节点订阅图像话题并实现视觉识别。 $ ros2 run learning_topic topic_webcam_pub $ ros2 run learning_topic topic_webcam_sub 将红色物体放入相机范围内，即可看到识别效果。","text_tokens":["，","终端","来看","如何","驱动","不变","第一个","下","了","分别","一个","先","并","识别","移植","topic","_","定义","订阅","运行","的","我们","启动","视觉","软件","移植性","在","消息","？","好","设计","范围","可以","run","模块化","是","物体","只","。","ros2","两个","以下","模块","相机","pub","效果","如果","第二","要","图像","功能","ros","$","啦","这种","sub","未来","保持","内","可移植","将","更换","完全","第二个","第一","思想","webcam","这个","发布","放入","话题","节点","更好","另","保证"," ","即可","二个","中是","标准","红色","实现","看到","需要","修改","可移植性","就","learning","说干就干"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_16","text":"learning_topic/topic_webcam_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 \"\"\" 创建一个发布者节点 \"\"\" class ImagePublisher ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . publisher_ = self . create_publisher ( Image , 'image_raw' , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.1 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . cap = cv2 . VideoCapture ( 0 ) # 创建一个视频采集对象，驱动相机采集图像（相机设备号） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于稍后将OpenCV的图像转换成ROS的图像消息 def timer_callback ( self ): ret , frame = self . cap . read () # 一帧一帧读取图像 if ret == True : # 如果图像读取成功 self . publisher_ . publish ( self . cv_bridge . cv2_to_imgmsg ( frame , 'bgr8' )) # 发布图像消息 self . get_logger () . info ( 'Publishing video frame' ) # 输出日志信息，提示已经完成图像话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImagePublisher ( \"topic_webcam_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , ], },","text_tokens":["scripts","helloworld","，","spin","name","定时器","logger","node","python3","publisher","说明","用于","初始","包","驱动","函数","cv","*","加入","bridge","转换成","点","接口","msg","一个",",","import","create","并","编译",":","topic","_","10","imgmsg","作者","库","=","@","退出","info","图像处理","callback","的","cap","frame","一帧","执行","'","如下","采集","]","bin","打开","消息","定时","read","raw","python","单位","[","image","class","日志","等待","发布者","points","main","文件","ros2","处理","类型","已经","、","古月","{","self","args","系统","长度","-","video","}","相机","pub","!","如果","信息","配置","entry","shutdown","后","进行","选项","\"","成功","图像","bgr8","功能","publishing","入口","：","视频",".",")","输出","coding","回调","代码","ros","关闭","销毁","初始化","timer","def","父类","居","编写","sub","guyuehome","env","读取","true","none","周期","8","与","提示","imagepublisher","类","if","sensor","将","ret","from","让","换成","为","__","循环","videocapture","(","号","webcam","发布","对象","话题","（","#","队列","秒","转换","节点","主","py","msgs","get","publish","程序","创建","示例","rclpy","super","名","console","设置"," ","opencv","）","to","com","www","0.1","/","知道","0","utf","init","setup","设备","usr","cv2","需要","稍后","完成","cvbridge","destroy","learning"],"title":"发布者代码解析","title_tokens":["发布","解析","发布者","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_17","text":"learning_topic/topic_webcam_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 10 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , 'topic_webcam_sub = learning_topic.topic_webcam_sub:main' , ], },","text_tokens":["scripts","helloworld","，","spin","name","for","和","1","显示","logger","数值","node","python3","说明","用于","初始","包","函数","cv","*","加入","bridge","点","接口","转化成","msg","一个",",","import","data","create","并","inrange","as","receiving","编译","像素",":","2","topic","in","_","10","imgmsg","作者","库","=","@","+","info","图像处理","订阅","得到","callback","去除","退出","的","frame","listener","使用","宽","'","]","如下","bin","打开","消息","<","raw","坐标","python","者","y","[","下限","image","class","90","日志","np","color","255","范围","等待","points","已","retr","main","文件","ros2","处理","类型","mask","、","古月","w","self","args","系统","长度","-","video","{","}","pub","效果","red","!","信息","img","阈值","detect","配置","勾勒","shutdown","bgr","findcontours","互相","shape","后","entry","进行","imagesubscriber","选项","array","numpy","\"","bgr8","图像","功能","苹果","面积","入口","：","进入","subscription",".",")","approx","输出","coding","检测","回调","hsv","ros","关闭","化成","代码","销毁","所在","contours","初始化","def","点画","父类","居","sub","一些","h","编写","guyuehome","env","模型","none","chain","8","与","二值化","提示","类","if","sensor","将","from","从","circle","中心","让","boundingrect","为","__","cvtcolor","高","中","轮廓","循环","continue","太小","(","上角","webcam","waitkey","对象","话题","（","xy","#","上限","队列","左上","转换","节点","150","主","list","py","msgs","噪声","get","bgr2hsv","程序","创建","drawcontours","示例","rclpy","super","名","及","console","x"," ","设置","opencv","）","to","com","www","/","转化","红色","int","128","知道","object","0","imshow","upper","计算","lower","出来","utf","init","setup","需要","usr","cv2","颜色","5","cnt","左上角","180","完成","cvbridge","destroy","learning","hierarchy"],"title":"订阅者代码解析","title_tokens":["订阅","解析","代码","者"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_18","text":"通过话题对原本节点功能的解耦，似乎让视觉识别的例程焕然一新了，不过似乎还有哪里不太对劲，大家有感觉到么？ ROS的目标不是提高软件复用率么，现在视觉识别的节点可以复用了，相机驱动节点好像不行呀，每换一个相机，是不是都得换一个驱动节点？这当然是不可能的！ 常用的usb相机驱动一般都是通用的，ROS中也集成了usb相机的标准驱动，我们只需要通过这样一行指令，就可以安装好，无论你用什么样的相机，只要符合usb接口协议，就可以直接使用ROS中的相机驱动节点，发布标准的图像话题了。 $ sudo apt install ros-humble-usb-cam 这样，我们的代码又得到了进一步精简，刚才自己写的图像发布节点换成了这样一句指令，视觉识别节点不需要做任何变化。 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic topic_webcam_sub","text_tokens":["，","！","通过","例程","node","到","直接","一新","驱动","对劲","每换","不是","可能","了","接口","一个","目标","识别","有","topic","_","似乎","率","得到","还有","不行","的","我们","使用","视觉","么","软件","变化","复用","？","好","cam","安装","换","哪里","做","得","一般","现在","usb","可以","run","是不是","感觉","是","一行","又","无论","都","只","协议","解","。","ros2","一句","-","相机","用","焕然一新","呀","耦","通用","常用","图像","功能","不过","接口协议","刚才","精简","一步","代码","ros","$","不","sub","好像","集成","提高","只要","大家","install","让","这","进一步","换成","写","中","这样","不太","webcam","发布","话题","符合","节点","指令","对","sudo","焕然","什么","什么样"," ","任何","exe","humble","标准","也","apt","你","需要","原本","当然","自己","就","learning"],"title":"案例三：机器视觉识别优化","title_tokens":["识别","案例","三","视觉","：","机器","优化"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_19","text":"话题命令的常用操作如下： $ ros2 topic list # 查看话题列表 $ ros2 topic info <topic_name> # 查看话题信息 $ ros2 topic hz <topic_name> # 查看话题发布频率 $ ros2 topic bw <topic_name> # 查看话题传输带宽 $ ros2 topic echo <topic_name> # 查看话题数据 $ ros2 topic pub <topic_name> <msg_type> <msg_data> # 发布话题消息","text_tokens":["发布","name","传输","话题","#","：","list","hz","操作","带宽","$","列表","bw"," ","数据","msg","data","ros2","命令","type","查看","topic","_","pub",">","info","信息","的","频率","如下","消息","echo","<","常用"],"title":"话题命令行操作","title_tokens":["操作","话题","命令行","命令"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_20","text":"关于话题通信的原理和实现方法我们就讲到这里，给大家留一个思考题：话题通信的特性是单向传输，适合周期性的数据传递，对于一个复杂的机器人系统来讲，这种特性肯定无法满足所有数据传输的需求，大家是否能够举几个例子，是话题通信无法完成的呢？","text_tokens":["关于","？","，","满足","考题","适合","需求","传输","话题","和","能够","数据传输","：","特性","对于","机器","方法","几个","到","复杂","思考题","这种","是","讲","给","数据","呢","一个","这里","单向","思考","周期","所有","是否","传递","留","系统","据传","实现","大家","举","例子","无法","的","通信","我们","肯定","来讲","完成","周期性","就","机器人","原理"],"title":"思考题","title_tokens":["思考题","考题","思考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_21","text":"https://docs.ros.org/en/humble/Tutorials/Topics/Understanding-ROS2-Topics.html","text_tokens":["html","docs","ros2","/","org","tutorials","ros","understanding","en","humble",":","topics","-",".","https"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/","text":"服务 话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。 通信模型 在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。 客户端/服务器模型 从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。 同步通信 这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。 一对多通信 比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。 服务接口 和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。 案例一：加法求解器 大家现在对ROS服务通信应该有了基本了解，接下来我们就要开始编写代码啦。还是从一个相对简单的例程开始，也是ROS官方的一个例程，通过服务实现一个加法求解器的功能。 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。 运行效果 我们一起操作下这个例程，并且看下代码的实现原理。 启动两个终端，并运行如下节点，第一个节点是服务端，等待请求数据并提供求和功能，第二个节点是客户端，发送传入的两个加数并等待求和结果。 $ ros2 run learning_service service_adder_server $ ros2 run learning_service service_adder_client 2 3 客户端代码解析 我们来看下客户端的实现方法。 程序实现 learning_service/service_adder_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-发送两个加数，请求加法器计算 \"\"\" import sys import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( AddTwoInts , 'add_two_ints' ) # 创建服务客户端对象（服务接口类型，服务名） while not self . client . wait_for_service ( timeout_sec = 1.0 ): # 循环等待服务器端成功启动 self . get_logger () . info ( 'service not available, waiting again...' ) self . request = AddTwoInts . Request () # 创建服务请求的数据对象 def send_request ( self ): # 创建一个发送服务请求的函数 self . request . a = int ( sys . argv [ 1 ]) self . request . b = int ( sys . argv [ 2 ]) self . future = self . client . call_async ( self . request ) # 异步方式发送服务请求 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderClient ( \"service_adder_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () # 发送服务请求 while rclpy . ok (): # ROS2系统正常运行 rclpy . spin_once ( node ) # 循环执行一次节点 if node . future . done (): # 数据是否处理完成 try : response = node . future . result () # 接收服务器端的反馈数据 except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( # 将收到的反馈信息打印输出 'Result of add_two_ints: for %d + %d = %d ' % ( node . request . a , node . request . b , response . sum )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个客户端，流程如下： 编程接口初始化 创建节点并初始化 创建客户端对象 创建并发送请求数据 等待服务器端应答数据 销毁节点并关闭接口 服务端代码解析 至于服务器端的实现，有点类似话题通信中的订阅者，并不知道请求数据什么时间出现，也用到了回调函数机制。 程序实现 learning_service/service_adder_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供加法器的服务器处理功能 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . srv = self . create_service ( AddTwoInts , 'add_two_ints' , self . adder_callback ) # 创建服务器对象（接口类型、服务名、服务器回调函数） def adder_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 response . sum = request . a + request . b # 完成加法求和计算，将结果放到反馈的数据中 self . get_logger () . info ( 'Incoming request \\n a: %d b: %d ' % ( request . a , request . b )) # 输出日志信息，提示已经完成加法求和计算 return response # 反馈应答信息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderServer ( \"service_adder_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个服务端，流程如下： 编程接口初始化 创建节点并初始化 创建服务器端对象 通过回调函数处进行服务 向客户端反馈应答结果 销毁节点并关闭接口 案例二：机器视觉识别 好啦，加法求解器已经实现了，回想下刚才我们提到的视觉识别流程，当我们需要知道目标物体位置的时候，通过服务通信的机制，岂不是更加合理。 运行效果 此时会有三个节点出现： 相机驱动节点 ，发布图像数据； 视觉识别节点 ，订阅图像数据，并且集成了一个服务器端对象，随时准备提供目标位置； 客户端节点 ，我们可以认为是一个机器人目标跟踪的节点，当需要根据目标运动时，就发送一次请求，然后拿到一个当前的目标位置。 启动三个终端，分别运行上述三个节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_service service_object_server $ ros2 run learning_service service_object_client 客户端代码解析 learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , ], }, 服务端代码解析 learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , 'service_object_server = learning_service.service_object_server:main' , ], }, 服务命令行操作 服务命令的常用操作如下： $ ros2 service list # 查看服务列表 $ ros2 service type <service_name> # 查看服务数据类型 $ ros2 service call <service_name> <service_type> <service_data> # 发送服务请求 思考题 话题和服务是ROS中最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 在机器人开发过程中，类似的通信应用比比皆是，ROS针对绝大部分通用场景，都设计了标准的话题和服务数据类型，比如图像数据、雷达数据、里程计数据等等，不过机器人软硬件繁杂，很多时候这些标准定义也无法满足我们的需求，这个时候，我们就要自定义通信接口了。 参考链接 https://docs.ros.org/en/humble/Tutorials/Services/Understanding-ROS2-Services.html","text_tokens":["scripts","答","终端","发给","某些","例程","数值","应该","python3","not","宕机","方法","到","函数","objectx","加入","下","传入","时候","可能","正常","分别","越好","wait","准备","传感","failed","invalid","更加","库",">","退出","of","info","运行","无法","很多","继续","频率","而是","使用","上","就要","...","执行","跟踪","自定义","异步","“","针对","位置","python","圈圈","好","器","class","90","html","np","这些","发布者","反应","当前","是","已","b","大部","。","request","有点","附近","mask","w","服务端","self","addtwoints","args","系统","-","getobjectposition","img","同样","进行","类似","imagesubscriber","array","控制","半天","bgr8","问","刚才","核心","接口类型","至于","approx","一次","hsv","服务","这种","def","父类","一些","模型","tutorials","chain","务器","8","并不需要","提示","数据通","存在","大家","if","这么","完全","from","从","circle","第一","boundingrect","高","__","cvtcolor","此时","这样","这个","发布","相比","转换","list","什么","waiting","get","程序实现","super","上层","x","数据","越快","二个","求解","转化","知道","红色","int","128","认为","init","接收","setup","颜色","硬件","cvbridge","根据","域名","5","hierarchy","简单","，","查询","适合","图像识别","name","通过","过程","显示","logger","50","node","通信接口","说明","接下来","界面","驱动","官方","案例","我","但是","bridge","转化成","1.0","转圈圈",",","目标","data","inrange","result","有","2","基本","10","反馈","作者","@","订阅","网络","还有","视觉","如下","]","bin","唯一","不同","打印","者","传输","之为","命令行","y","法器","下限","机器","随时","发","image","人","现在","255","points","思考题","retr","在生活中","二","单向","变成","多个","docs","常见","两个","类型","已经","、","运动","send","}","video","相机","两种","客户","一对","!","请求","会","另外","配置","detect","timeout","shutdown","entry","bgr","后","或者","findcontours","就是","选项","返回","numpy","成功","图像","获取","功能","需求","else","加数","：","访问","看","exception","入口","进入",")","提到","输出","岂","coding","接口类","检测","代码","不","销毁","所在","点画","h","成为","org","true","周期","type","集成","与","二值化","更","繁杂","一种","相对","让","以上","中","轮廓","循环","command","并不知道","对","主","150","msgs","放到","en","rclpy","部分","感器","加法器","—","to","/","解析","网站","分析","while","imshow","e","你","场景","出去","180","参考","destroy","绝大部分","3","考题","然后","spin","不知","和","1","来看","按照","用于","ints","%","*","cv","列表","多","async","跟随","了","点","一个","msg","同步性","https","import","create","识别","之后","三个","是否","要求",":","available","except","imgmsg","=","软硬","得到","callback","去除","的","frame","listener","最为","之前","'","编程","时","在","坐标","服务器端","前者","求和","[","比比","接下","加法","color","可以","run","处","都","处理","{","上述","开始","objectclient","各种","效果","red","信息","如果","当","后者","假设","里程计","通用","原理","client","要","打印输出","return","苹果","services","有所",".","position","用到","回调","$","状态","contours","啦","初始化","居","给","好像","try","env","自定","none","那有","并且","sec","n","sensor","将","第二个","大部分","中心","展现","一直","为","interface","continue","r","流程","call","xy","控制指令","上限","提供","左上","浏览","噪声","准确","示例","名","console","及","想要","设置"," ","发送","合理","ok","www","叫做","学习","humble","查看","object","0","有所不同","实现","看到","计算","不好","utf","lower","incoming","usr","cv2","通信","成","传感器","server","但","完成","cnt","就","下来","结果","learning","还是","receiving","一问一答","本","for","封装","链接","初始","包","之间","时间","软硬件","一起","response","第一个","一","没有","不是","adderserver","接口","拿到","并","as","编译","出现","判断","像素","\\","传递","in","_","定义","尽快","d","+","图像处理","启动","我们","understanding","简称","介绍","srv","宽","argv","应用","打开","消息","<","raw","转圈","设计","回想","cam","机制","；","服务器","sys","again","操作","一般","sum","日志","once","等待","usb","”","经常","范围","物体","其中","比比皆是","文件","main","收到","two","ros2","思考","古月","adderclient","某个","长度","形式","后续","越快越好","生活","阈值","勾勒","shape","互相","总结","雷达","里程","常用","第二","满足","\"","cs","target","不过","面积","subscription","很","应答","add","等等","ros","关闭","化成","一样","adder","编写","sub","guyuehome","命令","传递数据","绝大","开发","类","课程","数据通信","service","break","电脑","太小","(","上角","具体","waitkey","通信模型","对象","话题","（","#","队列","方式","节点","指令","网页","future","py","程序","向","创建","希望","bgr2hsv","drawcontours","页面","了解","讲","同步","）","opencv","com","exe","浏览器","done","标准","也","每","upper","称之为","出来","需要","a","数据类型","左上角","周期性","所以","等","比如","客户端","机器人","objecty","服务器发送","最新"],"title":"服务","title_tokens":["服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_1","text":"话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。","text_tokens":["，","答","者","发布","传输","话题","机制","问","节点","方法","之间","可以","ros","准确","发布者","一起","服务","我","这种","类似","讲"," ","数据","同步","—","单向","。","多个","收到","学习","是否","知道","效果","实现","订阅","将","你","一种","另外","无法","的","通信","我们","使用","异步","消息","本","常用"],"title":"服务","title_tokens":["服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_2","text":"在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。","text_tokens":["，","答","查询","然后","图像识别","发给","通过","和","按照","到","驱动","我","时候","跟随","了","一个","目标","并","识别","反馈","尽快","订阅","得到","的","我们","继续","频率","而是","使用","之前","应用","在","不同","位置","传输","机制","机器","发","可以","物体","其中","是","单向","变成","。","附近","运动","形式","相机","请求","信息","另外","或者","图像","有所","问","应答","ros","服务","这种","一样","好像","模型","成为","周期","并不需要","更","课程","这么","service","一直","高","中","此时","这样","这个","发布","通信模型","话题","节点","对","希望","上层"," ","发送","数据","红色","有所不同","实现","你","需要","通信","比如","机器人","最新"],"title":"通信模型","title_tokens":["模型","通信","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_3","text":"从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。","text_tokens":["针对","服务器端","，","返回","答","具体","通过","cs","某些","机制","来看","问","服务器","网页","很","应答","浏览","操作","经常","向","服务","我","页面","这种","时候"," ","发送","数据","在生活中","模型","收到","并","处理","/","。","叫做","常见","之后","浏览器","务器","某个","网站","也","形式","各种","反馈","实现","客户","请求","电脑","你","会","信息","需要","生活","从","的","通信","我们","简称","展现","上","或者","为","进行","就","比如","客户端","此时","就是","在","域名","服务器发送"],"title":"客户端/服务器模型","title_tokens":["模型","/","务器","服务","服务器","客户端","客户"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_4","text":"这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。","text_tokens":["服务器端","，","转圈","这个","半天","圈圈","过程","话题","通过","之为","服务器","相比","应答","浏览","宕机","一般","到","可以","服务","状态","反应","是","没有","可能","了","同步","越快","越好","转圈圈","。","浏览器","那有","务器","判断","要求","也","客户","不好","称之为","你","网络","接收","越快越好","信息","的","通信","我们","假设","一直","或者","所以","中","客户端","在"],"title":"同步通信","title_tokens":["通信","同步"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_5","text":"比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。","text_tokens":["服务器端","，","这个","通信模型","服务器","访问","人","界面","可以","不","服务","但是","一样","是","没有","居","都","一个","。","多个","并","模型","务器","古月","网站","每","存在","客户","大家","看到","完全","的","通信","同样","但","所以","比如","客户端","中","唯一"],"title":"一对多通信","title_tokens":["通信","一对","多"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_6","text":"和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。","text_tokens":["，","位置","要","话题","苹果","和","核心",".","方法","这些","ros","服务","一样","是","部分"," ","了","数据","给","一个","msg","文件","变成","。","两个","命令","传递数据","标准","传递","也","反馈","定义","大家","请求","后续","会","还有","的","通信","我们","介绍","srv","使用","比如","中","还是","在","消息","类似","坐标"],"title":"服务接口","title_tokens":["接口","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_7","text":"大家现在对ROS服务通信应该有了基本了解，接下来我们就要开始编写代码啦。还是从一个相对简单的例程开始，也是ROS官方的一个例程，通过服务实现一个加法求解器的功能。 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。","text_tokens":["，","通过","例程","应该","封装","接下来","ints","官方","了","一个","并","之后","有","基本","_","反馈","得到","的","我们","就要","时","“","针对","服务器端","器","求和","服务器","接下","现在","加法","可以","”","是","。","收到","two","两个","结果","开始","客户","请求","当","后","进行","功能","加数","应答","add","代码","ros","服务","啦","编写","给","务器","大家","将","从","相对","这个","提供","节点","对","了解","想要"," ","发送","数据","求解","也","实现","计算","需要","通信","成","出去","下来","就","客户端","还是","简单"],"title":"案例一：加法求解器","title_tokens":["加法","求解","案例","器","一","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_8","text":"我们一起操作下这个例程，并且看下代码的实现原理。 启动两个终端，并运行如下节点，第一个节点是服务端，等待请求数据并提供求和功能，第二个节点是客户端，发送传入的两个加数并等待求和结果。 $ ros2 run learning_service service_adder_server $ ros2 run learning_service service_adder_client 2 3","text_tokens":["，","第二","client","这个","终端","功能","例程","求和","提供","加数","看","3","节点","操作","代码","等待","一起","$","run","第一个","服务","是","下","传入","adder"," ","发送","数据","一个","二个","。","并","两个","结果","ros2","服务端","2","并且","_","实现","客户","请求","第二个","运行","service","的","我们","启动","第一","server","如下","客户端","learning","原理"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_9","text":"我们来看下客户端的实现方法。","text_tokens":["。","的","我们","来看","下","客户端","实现","客户","方法"],"title":"客户端代码解析","title_tokens":["解析","客户","代码","客户端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_10","text":"learning_service/service_adder_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-发送两个加数，请求加法器计算 \"\"\" import sys import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( AddTwoInts , 'add_two_ints' ) # 创建服务客户端对象（服务接口类型，服务名） while not self . client . wait_for_service ( timeout_sec = 1.0 ): # 循环等待服务器端成功启动 self . get_logger () . info ( 'service not available, waiting again...' ) self . request = AddTwoInts . Request () # 创建服务请求的数据对象 def send_request ( self ): # 创建一个发送服务请求的函数 self . request . a = int ( sys . argv [ 1 ]) self . request . b = int ( sys . argv [ 2 ]) self . future = self . client . call_async ( self . request ) # 异步方式发送服务请求 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderClient ( \"service_adder_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () # 发送服务请求 while rclpy . ok (): # ROS2系统正常运行 rclpy . spin_once ( node ) # 循环执行一次节点 if node . future . done (): # 数据是否处理完成 try : response = node . future . result () # 接收服务器端的反馈数据 except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( # 将收到的反馈信息打印输出 'Result of add_two_ints: for %d + %d = %d ' % ( node . request . a , node . request . b , response . sum )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , ], },","text_tokens":["scripts","，","spin","name","for","1","logger","node","python3","说明","not","初始","包","ints","函数","%","*","response","加入","async","正常","点","接口","一个","1.0",",","import","wait","create","并","failed","result","as","编译","是否",":","2","available","except","_","反馈","作者","库","定义","@","=","info","of","d","+","运行","的","启动","srv","...","执行","'","argv","]","自定义","bin","异步","打开","如下","打印","服务器端","python","[","法器","服务器","sys","class","again","sum","加法","once","等待","points","b","main","文件","request","ros2","两个","two","处理","类型","收到","{","古月","adderclient","self","addtwoints","send","args","-","系统","}","客户","!","请求","信息","配置","timeout","shutdown","entry","后","进行","client","选项","\"","成功","打印输出","功能","else","加数","exception","接口类型","入口","：",".",")","一次","输出","coding","add","接口类","代码","关闭","服务","销毁","初始化","def","adder","父类","居","编写","guyuehome","try","env","自定","none","务器","8","类","sec","if","将","from","service","break","让","__","interface","循环","(","r","call","对象","（","#","方式","节点","future","py","waiting","get","程序","创建","示例","rclpy","super","名","console","设置"," ","发送","数据","加法器","）","ok","com","www","/","done","知道","int","while","计算","e","utf","init","接收","setup","需要","usr","a","完成","destroy","客户端","learning"],"title":"程序实现","title_tokens":["程序","程序实现","实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_11","text":"对以上程序进行分析，如果我们想要实现一个客户端，流程如下： 编程接口初始化 创建节点并初始化 创建客户端对象 创建并发送请求数据 等待服务器端应答数据 销毁节点并关闭接口","text_tokens":["服务器端","，","流程","对象","：","服务器","节点","对","应答","初始","等待","关闭","程序","创建","服务","销毁","初始化","想要"," ","发送","接口","数据","一个","并","务器","分析","实现","客户","请求","如果","我们","以上","进行","编程","如下","客户端"],"title":"流程总结","title_tokens":["总结","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_12","text":"至于服务器端的实现，有点类似话题通信中的订阅者，并不知道请求数据什么时间出现，也用到了回调函数机制。","text_tokens":["服务器端","，","者","并不知道","话题","不知","机制","至于","服务器","什么","时间","用到","回调","函数","服务","了","数据","。","有点","务器","出现","知道","也","实现","请求","订阅","的","通信","中","类似"],"title":"服务端代码解析","title_tokens":["解析","服务端","服务","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_13","text":"learning_service/service_adder_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供加法器的服务器处理功能 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . srv = self . create_service ( AddTwoInts , 'add_two_ints' , self . adder_callback ) # 创建服务器对象（接口类型、服务名、服务器回调函数） def adder_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 response . sum = request . a + request . b # 完成加法求和计算，将结果放到反馈的数据中 self . get_logger () . info ( 'Incoming request \\n a: %d b: %d ' % ( request . a , request . b )) # 输出日志信息，提示已经完成加法求和计算 return response # 反馈应答信息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderServer ( \"service_adder_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , ], },","text_tokens":["scripts","，","spin","name","logger","node","python3","说明","初始","包","ints","函数","%","*","response","加入","adderserver","点","接口",",","import","create","并","编译","\\",":","_","反馈","作者","库","定义","@","=","+","info","d","退出","callback","的","srv","执行","'","如下","]","自定义","bin","打开","python","求和","[","法器","服务器","class","sum","加法","日志","等待","points","b","main","文件","request","ros2","处理","two","收到","类型","已经","、","古月","{","self","addtwoints","args","系统","-","}","!","请求","信息","配置","entry","shutdown","后","进行","选项","client","\"","return","功能","入口","接口类型","：",".","应答",")","输出","coding","add","接口类","回调","代码","关闭","服务","销毁","初始化","def","adder","父类","居","编写","guyuehome","env","自定","none","务器","8","提示","类","n","将","from","service","让","__","中","interface","循环","(","对象","（","#","提供","节点","对","主","py","get","放到","程序","创建","示例","rclpy","super","名","console","设置"," ","数据","加法器","）","com","www","/","知道","计算","utf","init","setup","incoming","usr","a","需要","server","完成","destroy","结果","learning"],"title":"程序实现","title_tokens":["程序","程序实现","实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_14","text":"对以上程序进行分析，如果我们想要实现一个服务端，流程如下： 编程接口初始化 创建节点并初始化 创建服务器端对象 通过回调函数处进行服务 向客户端反馈应答结果 销毁节点并关闭接口","text_tokens":["服务器端","，","流程","对象","通过","：","服务器","节点","对","应答","初始","回调","函数","程序","向","创建","服务","销毁","关闭","初始化","想要","处"," ","接口","一个","并","结果","务器","服务端","分析","反馈","实现","客户","如果","我们","以上","进行","编程","如下","客户端"],"title":"流程总结","title_tokens":["总结","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_15","text":"好啦，加法求解器已经实现了，回想下刚才我们提到的视觉识别流程，当我们需要知道目标物体位置的时候，通过服务通信的机制，岂不是更加合理。","text_tokens":["，","位置","流程","好","回想","通过","器","机制","刚才","提到","加法","岂","服务","啦","物体","下","不是","时候","合理","了","。","求解","目标","识别","已经","知道","更加","实现","需要","当","的","我们","通信","视觉"],"title":"案例二：机器视觉识别","title_tokens":["识别","案例","视觉","：","机器","二"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_16","text":"此时会有三个节点出现： 相机驱动节点 ，发布图像数据； 视觉识别节点 ，订阅图像数据，并且集成了一个服务器端对象，随时准备提供目标位置； 客户端节点 ，我们可以认为是一个机器人目标跟踪的节点，当需要根据目标运动时，就发送一次请求，然后拿到一个当前的目标位置。 启动三个终端，分别运行上述三个节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_service service_object_server $ ros2 run learning_service service_object_client","text_tokens":["服务器端","，","位置","client","然后","发布","终端","图像","对象","cam","提供","；","：","服务器","node","节点","机器","随时","机器人","一次","驱动","usb","可以","$","run","服务","当前","是","时"," ","了","数据","发送","一个","拿到","分别","准备","目标","。","识别","ros2","exe","learning","三个","出现","有","集成","务器","运动","上述","object","并且","相机","_","客户","请求","认为","订阅","会","需要","运行","当","的","我们","启动","service","server","视觉","根据","就","跟踪","客户端","此时"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_17","text":"learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , ], },","text_tokens":["scripts","，","spin","name","for","logger","node","python3","说明","not","初始","包","%","*","response","加入","async","点","接口","1.0",",","import","wait","目标","create","识别","并","failed","result","as","编译","\\",":","available","except","_","作者","库","定义","@","=","info","of","d","的","srv","...","'","如下","]","自定义","bin","打开","位置","python","y","[","class","again","once","等待","points","main","文件","request","ros2","{","古月","self","send","args","系统","-","objectclient","}","getobjectposition","!","请求","配置","timeout","shutdown","entry","后","进行","client","选项","\"","功能","target","else","exception","入口","：",".","应答",")","position","coding","代码","关闭","服务","销毁","初始化","def","adder","父类","居","编写","guyuehome","try","env","自定","true","none","8","类","sec","n","if","from","service","break","让","__","interface","(","r","call","对象","#","节点","future","py","waiting","get","程序","创建","示例","rclpy","super","console","x"," ","设置","ok","com","www","/","done","知道","object","while","e","utf","init","setup","需要","usr","server","完成","destroy","learning"],"title":"客户端代码解析","title_tokens":["解析","客户","代码","客户端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_18","text":"learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , 'service_object_server = learning_service.service_object_server:main' , ], },","text_tokens":["scripts","，","spin","name","for","和","1","显示","50","logger","数值","node","python3","说明","用于","初始","包","函数","cv","*","objectx","response","%","加入","bridge","点","接口","转化成","msg","一个",",","import","目标","create","识别","data","并","inrange","as","receiving","编译","像素","\\",":","2","in","invalid","_","10","imgmsg","作者","库","定义","@","=","+","图像处理","订阅","得到","callback","去除","info","d","的","frame","listener","srv","使用","执行","宽","'","]","如下","自定义","bin","打开","消息","<","raw","坐标","python","者","y","[","服务器","下限","image","class","90","日志","np","color","255","范围","等待","points","物体","已","retr","main","文件","request","ros2","处理","收到","类型","mask","已经","、","古月","w","self","args","系统","长度","-","video","{","getobjectposition","}","效果","red","!","请求","信息","img","阈值","detect","配置","勾勒","shutdown","bgr","findcontours","互相","shape","后","entry","进行","imagesubscriber","选项","array","client","numpy","\"","bgr8","图像","反馈","return","target","苹果","面积","功能","else","入口","接口类型","进入","：","subscription",".",")","position","approx","输出","coding","接口类","检测","回调","hsv","ros","关闭","化成","代码","服务","所在","contours","销毁","初始化","def","adder","点画","父类","居","sub","一些","h","编写","guyuehome","env","自定","模型","none","true","chain","务器","8","与","二值化","提示","类","n","if","sensor","将","from","service","从","circle","中心","让","boundingrect","为","__","cvtcolor","高","中","interface","轮廓","循环","continue","太小","(","上角","command","waitkey","对象","话题","（","xy","#","上限","队列","提供","左上","转换","节点","对","150","主","list","py","msgs","get","噪声","bgr2hsv","程序","创建","drawcontours","示例","rclpy","super","名","及","console","x"," ","设置","数据","opencv","）","to","com","www","/","转化","红色","int","128","退出","知道","object","0","imshow","upper","计算","lower","出来","utf","init","setup","需要","usr","cv2","颜色","5","server","cnt","180","左上角","cvbridge","destroy","完成","learning","objecty","hierarchy"],"title":"服务端代码解析","title_tokens":["解析","服务端","服务","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_19","text":"服务命令的常用操作如下： $ ros2 service list # 查看服务列表 $ ros2 service type <service_name> # 查看服务数据类型 $ ros2 service call <service_name> <service_type> <service_data> # 发送服务请求","text_tokens":["call","name","#","：","list","操作","$","服务","列表"," ","发送","数据","data","ros2","命令","类型","type","查看","_",">","请求","service","的","数据类型","如下","<","常用"],"title":"服务命令行操作","title_tokens":["命令行","操作","服务","命令"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_20","text":"话题和服务是ROS中最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 在机器人开发过程中，类似的通信应用比比皆是，ROS针对绝大部分通用场景，都设计了标准的话题和服务数据类型，比如图像数据、雷达数据、里程计数据等等，不过机器人软硬件繁杂，很多时候这些标准定义也无法满足我们的需求，这个时候，我们就要自定义通信接口了。","text_tokens":["，","适合","过程","和","通信接口","方法","到","软硬件","时候","了","接口","同步性","传感","目标","识别","要求","定义","软硬","无法","的","我们","很多","最为","视觉","就要","应用","自定义","在","针对","位置","设计","前者","传输","比比","机器","这些","是","都","比比皆是","大部","单向","。","类型","、","两种","后者","里程计","雷达","里程","通用","类似","常用","满足","控制","需求","获取","图像","不过","等等","ros","服务","自定","周期","绝大","数据通","更","开发","繁杂","数据通信","大部分","高","中","这个","话题","控制指令","指令","部分"," ","感器","数据","同步","标准","也","场景","通信","数据类型","传感器","硬件","周期性","等","绝大部分","比如","机器人","一问一答"],"title":"思考题","title_tokens":["思考题","考题","思考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_21","text":"https://docs.ros.org/en/humble/Tutorials/Services/Understanding-ROS2-Services.html","text_tokens":["html","docs","ros2","/","org","tutorials","ros","understanding","en","humble","services",":","-",".","https"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/","text":"通信接口 在ROS系统中，无论话题还是服务，或者我们后续将要学习的动作，都会用到一个重要的概念—— 通信接口 。 通信并不是一个人自言自语，而是两个甚至更多个人，你来我往的交流，交流的内容是什么呢？为了让大家都好理解，我们可以给传递的数据定义一个标准的结构，这就是通信接口。 接口的定义 接口的概念在各个领域随处可见，无论是硬件结构还是软件开发，都有广泛的应用。 比如生活中最为常见的插头和插座，两者必须匹配才能使用，电脑和手机上的USB接口也是，什么Micro-USB、TypeC等等，都是关于接口的具体定义。 软件开发中，接口的使用就更多了，比如我们在编写程序时，使用的函数和函数的输入输出也称之为接口，每一次调用函数的时候，就像是把主程序和调用函数通过这个接口连接到一起，系统才能正常工作。 更为形象的是图形化编程中使用的程序模块，每一个模块都有固定的结构和形状，只有两个模块相互匹配，才能在一起工作，这就很好的讲代码形象化了。 所以什么是接口，它是一种相互关系，只有彼此匹配，才能建立连接。 回到ROS的通信系统，它的主要目的就是传输数据，那就得让大家高效的建立连接，并且准确包装和解析传输的数据内容，话题、服务等机制也就诞生了，他们传输的数据，都要 符合通信接口的标准定义 。 比如摄像头驱动发布的图像话题，由每个像素点的R、G、B三原色值组成，控制机器人运动的速度指令，由线速度和角速度组成，进行机器人配置的服务，有配置的参数和反馈的结果组成等等，类似这些常用的定义，在ROS系统中都有提供，我们也可以自己开发。 这些接口看上去像是给我们加了一些约束，但却是ROS系统的精髓所在 。举个例子，我们使用相机驱动节点的时候，完全不用关注它是如何驱动相机的，只要一句话运行，我们就可以知道发布出来的图像数据是什么样的了，直接开始我们的应用开发；类似的，键盘控制我们也可以安装一个ROS包，如何实现的呢？不用关心，反正它发布出来的肯定是线速度和角速度。 ROS通信接口 接口可以让程序之间的依赖降低，便于我们使用别人的代码，也方便别人使用我们的代码，这就是ROS的核心目标，减少重复造轮子。 ROS有三种常用的通信机制，分别是 话题、服务、动作 ，通过每一种通信种定义的接口，各种节点才能有机的联系到一起。 语言无关 为了保证每一个节点可以使用不同语言编程，ROS将这些接口的设计做成了和 语言无关 的，比如这里看到的int32表示32位的整型数，int64表示64位的整型数，bool表示布尔值，还可以定义数组、结构体，这些定义在编译过程中，会自动生成对应到C++、Python等语言里的数据结构。 话题通信接口的定义使用的是.msg文件，由于是单向传输，只需要描述传输的每一帧数据是什么就行，比如在这个定义里，会传输两个32位的整型数，x、y，我们可以用来传输二维坐标的数值。 服务通信接口的定义使用的是.srv文件，包含请求和应答两部分定义，通过中间的“---”区分，比如之前我们学习的加法求和功能，请求数据是两个64位整型数a和b，应答是求和的结果sum。 动作是另外一种通信机制，用来描述机器人的一个运动过程，使用.action文件定义，比如我们让小海龟转90度，一边转一边周期反馈当前的状态，此时接口的定义分成了三个部分，分别是动作的目标，比如是开始运动，运动的结果，最终旋转的90度是否完成，还有一个周期反馈，比如每隔1s反馈一下当前转到第10度、20度还是30度了，让我们知道运动的进度。 标准接口 大家可能好奇ROS系统到底给我们定义了哪些接口呢？我们可以在ROS安装路径中的share文件夹中找到，涵盖众多标准定义，大家可以打开几个看看。 案例一：服务接口的定义与使用 了解了通信接口的概念，接下来我们再从代码实现的角度，研究下如何定义以及使用一个接口。 在之前服务概念讲解的课程中，我们编写了这样一个例程，我们再来回顾下。 有三个节点，第一个驱动相机发布图像话题，第二个是机器视觉识别节点，封装了一个服务的服务端对象，提供目标识别位置的查询服务，第三个节点在需要目标位置的时候，就可以发送请求，收到位置进行使用了。 接口定义 在这个例程中，我们使用GetObjectPosition.srv定义了服务通信的接口： learning_interface/srv/GetObjectPosition.srv bool get # 获取目标位置的指令 --- int32 x # 目标的X坐标 int32 y # 目标的Y坐标 定义中有两个部分，上边是获取目标位置的指令，get为true的话，就表示我们需要一次位置，服务端就会反馈这个x、y坐标了。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"srv/GetObjectPosition.srv\" ) ... 功能包的package.xml文件中也需要添加代码生成的功能依赖： ... <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group> ... 程序调用 我们在代码中再来重点看下接口的使用方法。 客户端接口调用 learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 服务端接口调用 learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 案例二：话题接口的定义与使用 话题通信接口的定义也是类似的，继续从之前的机器视觉案例中来衍生，我们想把服务换成话题，周期发布目标识别的位置，不管有没有人需要。 运行效果 现在我们会运行三个节点： 第一个节点，将驱动相机并发布图像话题，此时的话题数据使用的是ROS中标准定义的Image图像消息； 第二个节点，会运行视觉识别功能，识别目标的位置，这个位置我们希望封装成话题消息，发布出去，谁需要使用谁就来订阅； 第三个节点，订阅位置话题，打印到终端中。 启动三个终端，分别运行以上节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic interface_object_pub $ ros2 run learning_topic interface_object_sub 接口定义 在这个例程中，我们使用ObjectPosition.msg定义了服务通信的接口： learning_interface/msg/ObjectPosition.msg int32 x # 表示目标的X坐标 int32 y # 表示目标的Y坐标 话题消息的内容是一个位置，我们使用x、y坐标值进行描述。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"msg/ObjectPosition.msg\" ) ... 程序调用 我们在代码中再来重点看下接口的使用方法。 发布者接口调用 learning_topic/interface_object_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-发布目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . pub = self . create_publisher ( ObjectPosition , \"object_position\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , # 将苹果的图像中心点画出来 ( 0 , 255 , 0 ), - 1 ) self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 position = ObjectPosition () self . object_detect ( image ) # 苹果检测 position . x , position . y = int ( self . objectX ), int ( self . objectY ) self . pub . publish ( position ) # 发布目标位置 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 订阅者接口调用 learning_topic/interface_object_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-订阅目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ ObjectPosition , \"/object_position\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度 def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'Target Position: \"( %d , %d )\"' % ( msg . x , msg . y )) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"interface_position_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 接口命令行操作 接口命令的常用操作如下： $ ros2 interface list # 查看系统接口列表 $ ros2 interface show <interface_name> # 查看某个接口的详细定义 $ ros2 interface package <package_name> # 查看某个功能包中的接口定义 参考链接 https://docs.ros.org/en/humble/Concepts/About-ROS-Interfaces.html https://docs.ros.org/en/humble/Tutorials/Single-Package-Define-And-Use-Interface.html","text_tokens":["1s","终端","讲解","建立","哪些","例程","上去","数值","编译器","python3","not","约束","方法","更为","到","函数","objectx","标值","体","不用","下","正常","时候","可能","角度","分别","参数","wait","30","failed","subscribernode","int32","invalid",">","库","退出","of","info","运行","重点","继续","而是","使用","上","bool","...","执行","有没有","自定义","“","？","位置","python","好","三原色","安装","到底","看上去","class","转到","90","把","html","np","这些","相互","来","发布者","好奇","当前","是","c++","已","string","每隔","b","。","件夹","request","有机","mask","不管","w","服务端","无关","self","系统","args","-","模块","getobjectposition","pub","img","define","进行","类似","imagesubscriber","反正","控制","array","想","bgr8","micro","std","核心","接口类型","举个","插座","concepts","approx","一次","hsv","服务","交流","布尔值","def","一些","父类","上边","这里","模型","tutorials","chain","务器","8","提示","大家","高效","if","完全","from","从","连接","circle","两","第一","才能","boundingrect","__","cvtcolor","高","此时","摄像头","这样","generators","webcam","这个","发布","看看","找到","接口定义","包中","use","符合","转换","list","什么","waiting","get","publish","什么样","super","中有","手机","x","保证","降低","数据","像是","二个","action","runtime","转化","再","知道","红色","128","int","调用函数","init","重要","区分","颜色","project","硬件","cvbridge","single","根据","5","hierarchy","关于","，","数","查询","name","通过","过程","传输数据","显示","logger","50","node","如何","publisher","通信接口","说明","接下来","的话","interfaces","直接","驱动","案例","64","减少","bridge","转化成","1.0",",","目标","data","inrange","布尔","result","有","2","小海龟","10","反馈","作者","主程序","@","文件夹","订阅","还有","形象","g","视觉","输入输出","]","如下","bin","不同","打印","自言自语","者","传输","之为","命令行","y","一下","可见","下限","机器","image","人","现在","工作","255","方便","retr","required","二","单向","docs","两个","常见","类型","将要","已经","一句","、","匹配","运动","}","send","video","相机","客户","!","请求","会","另外","分成","配置","detect","typec","timeout","主要","shutdown","bgr","后","或者","findcontours","就是","选项","旋转","numpy","图像","获取","功能","objectposition","进度","为了","精髓","exception","：","看","else","进入","入口",")","输出","coding","接口类","检测","代码","数据结构","销毁","所在","度","数组","点画","h","org","true","周期","与","二值化","自语","更","值","众多","一种","让","随处","以上","换成","中","无论是","轮廓","循环","转到第","概念","以及","command","理解","动作","生成","转","便于","对","150","主","msgs","字符","轮子","en","rclpy","部分","—","to","路径","/","解析","种","while","imshow","e","领域","图形","出去","180","各个领域","destroy","语言","find","参考","spin","整型","摄像","---","和","描述","1","member","用于","32","%","*","cv","列表","多","async","share","涵盖","了","https","一个","还","msg","import","create","识别","加","衍生","三个","是否",":","available","except","imgmsg","=","甚至","必须","得到","callback","去除","的","联系","包含","最为","listener","frame","软件","编程","之前","时","'","在","坐标","两者","造","形状","三原","求和","[","接下","得","加法","每个","color","可以","run","关注","都","只","第三个","自动","处理","像头","{","int64","开始","回顾","objectclient","各种","代码生成","组成","packages","效果","red","信息","做成","程序模块","看上","依赖","要","添加","client","return","苹果","键盘","那",".","内容","编写程序","position","用到","彼此","$","回调","状态","contours","初始化","居","给","三种","try","20","原色","env","自定","none","并且","sec","只要","n","sensor","将","第二个","关心","中心","为","关系","interface","continue","r","速度","它","他们","exec","call","xy","目的","rosidl","上限","show","提供","左上","像素点","几个","噪声","准确","海龟","示例","名","及"," ","随处可见","软件开发","呢","标准接口","发送","ok","www","学习","build","humble","输入","查看","object","depend","0","里","实现","看到","计算","lower","utf","usr","cv2","通信","成","形象化","但","完成","server","自己","cnt","就","下来","结果","个人","还是","learning","receiving","用来","坐标值","for","cmakelists","你来我往","封装","链接","初始","包","二维","txt","之间","一起","response","第一个","表示","一","没有","不是","about","接口","图形化","话","并","as","编译","像素","\\","传递","in","topic","_","定义","例子","只有","d","第三","图像处理","+","广泛","字符串","启动","我们","一帧","srv","研究","宽","应用","打开","消息","<","raw","xml","设计","cam","机制","；","服务器","由","again","包装","小海","sum","日志","诞生","操作","usb","等待","once","”","范围","物体","无论","文件","main","收到","ros2","最终","角速度","古月","某个","长度","重复","后续","生活","阈值","default","勾勒","shape","互相","详细","一边","常用","第二","却是","\"","target","面积","线速度","subscription","很","应答","各个","等等","谁","ros","关闭","化成","group","编写","sub","对应","guyuehome","中间","命令","调用","回到","开发","类","课程","由于","service","and","break","这","电脑","太小","(","上角","具体","waitkey","对象","话题","generate","（","#","队列","结构","指令","节点","future","py","程序","bgr2hsv","创建","drawcontours","别人","中来","希望","了解","讲","opencv","）","com","位","exe","package","done","标准","也","每","插头","upper","称之为","出来","需要","就行","a","肯定","左上角","所以","等","比如","客户端","机器人","objecty","固定"],"title":"通信接口","title_tokens":["通信","接口","通信接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_1","text":"在ROS系统中，无论话题还是服务，或者我们后续将要学习的动作，都会用到一个重要的概念—— 通信接口 。 通信并不是一个人自言自语，而是两个甚至更多个人，你来我往的交流，交流的内容是什么呢？为了让大家都好理解，我们可以给传递的数据定义一个标准的结构，这就是通信接口。","text_tokens":["？","概念","，","自言自语","理解","动作","好","话题","为了","结构","你来我往","通信接口","内容","人","什么","用到","可以","ros","服务","多","交流","是","不是","无论","都"," ","接口","呢","一个","—","给","数据","。","并","两个","将要","学习","标准","系统","传递","自语","更","定义","大家","甚至","后续","会","重要","的","我们","通信","让","这","而是","或者","中","就是","个人","还是","在"],"title":"通信接口","title_tokens":["通信","接口","通信接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_2","text":"接口的概念在各个领域随处可见，无论是硬件结构还是软件开发，都有广泛的应用。 比如生活中最为常见的插头和插座，两者必须匹配才能使用，电脑和手机上的USB接口也是，什么Micro-USB、TypeC等等，都是关于接口的具体定义。 软件开发中，接口的使用就更多了，比如我们在编写程序时，使用的函数和函数的输入输出也称之为接口，每一次调用函数的时候，就像是把主程序和调用函数通过这个接口连接到一起，系统才能正常工作。 更为形象的是图形化编程中使用的程序模块，每一个模块都有固定的结构和形状，只有两个模块相互匹配，才能在一起工作，这就很好的讲代码形象化了。 所以什么是接口，它是一种相互关系，只有彼此匹配，才能建立连接。 回到ROS的通信系统，它的主要目的就是传输数据，那就得让大家高效的建立连接，并且准确包装和解析传输的数据内容，话题、服务等机制也就诞生了，他们传输的数据，都要 符合通信接口的标准定义 。 比如摄像头驱动发布的图像话题，由每个像素点的R、G、B三原色值组成，控制机器人运动的速度指令，由线速度和角速度组成，进行机器人配置的服务，有配置的参数和反馈的结果组成等等，类似这些常用的定义，在ROS系统中都有提供，我们也可以自己开发。 这些接口看上去像是给我们加了一些约束，但却是ROS系统的精髓所在 。举个例子，我们使用相机驱动节点的时候，完全不用关注它是如何驱动相机的，只要一句话运行，我们就可以知道发布出来的图像数据是什么样的了，直接开始我们的应用开发；类似的，键盘控制我们也可以安装一个ROS包，如何实现的呢？不用关心，反正它发布出来的肯定是线速度和角速度。","text_tokens":["关于","，","通过","建立","摄像","和","传输数据","上去","如何","通信接口","约束","更为","到","直接","包","驱动","函数","一起","多","不用","正常","时候","了","接口","图形化","一个","参数","话","加","有","像素","反馈","定义","主程序","例子","必须","只有","广泛","运行","的","我们","形象","最为","g","上","使用","软件","应用","输入输出","时","编程","在","？","两者","好","传输","之为","形状","三原","机制","三原色","安装","可见","；","看上去","由","机器","得","把","包装","工作","诞生","每个","usb","这些","可以","相互","关注","是","无论","都","b","。","常见","两个","像头","一句","、","角速度","匹配","运动","开始","系统","-","模块","相机","组成","生活","配置","typec","主要","程序模块","进行","就是","类似","常用","看上","却是","要","控制","反正","图像","键盘","micro","精髓","线速度","那","举个","插座","很","内容","编写程序","一次","输出","各个","等等","代码","彼此","ros","服务","所在","编写","一些","给","原色","调用","回到","并且","开发","更","只要","大家","高效","值","一种","完全","连接","关心","随处","这","让","才能","关系","中","无论是","电脑","摄像头","r","速度","概念","它","他们","具体","这个","发布","话题","目的","结构","提供","符合","指令","节点","什么","像素点","程序","准确","什么样","手机","讲"," ","随处可见","软件开发","数据","像是","呢","解析","输入","标准","知道","也","每","插头","实现","称之为","领域","调用函数","图形","出来","肯定","通信","形象化","但","各个领域","硬件","所以","等","就","比如","结果","机器人","还是","固定","自己"],"title":"接口的定义","title_tokens":["的","定义","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#ros","text":"接口可以让程序之间的依赖降低，便于我们使用别人的代码，也方便别人使用我们的代码，这就是ROS的核心目标，减少重复造轮子。 ROS有三种常用的通信机制，分别是 话题、服务、动作 ，通过每一种通信种定义的接口，各种节点才能有机的联系到一起。","text_tokens":["，","依赖","造","动作","通过","话题","机制","便于","核心","节点","到","之间","可以","ros","程序","代码","轮子","减少","别人","方便","服务","一起","是"," ","降低","接口","三种","分别","。","目标","有机","、","有","种","也","每","各种","定义","重复","一种","的","我们","通信","让","这","联系","使用","才能","就是","常用"],"title":"ROS通信接口","title_tokens":["ros","通信","接口","通信接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_3","text":"为了保证每一个节点可以使用不同语言编程，ROS将这些接口的设计做成了和 语言无关 的，比如这里看到的int32表示32位的整型数，int64表示64位的整型数，bool表示布尔值，还可以定义数组、结构体，这些定义在编译过程中，会自动生成对应到C++、Python等语言里的数据结构。 话题通信接口的定义使用的是.msg文件，由于是单向传输，只需要描述传输的每一帧数据是什么就行，比如在这个定义里，会传输两个32位的整型数，x、y，我们可以用来传输二维坐标的数值。 服务通信接口的定义使用的是.srv文件，包含请求和应答两部分定义，通过中间的“---”区分，比如之前我们学习的加法求和功能，请求数据是两个64位整型数a和b，应答是求和的结果sum。 动作是另外一种通信机制，用来描述机器人的一个运动过程，使用.action文件定义，比如我们让小海龟转90度，一边转一边周期反馈当前的状态，此时接口的定义分成了三个部分，分别是动作的目标，比如是开始运动，运动的结果，最终旋转的90度是否完成，还有一个周期反馈，比如每隔1s反馈一下当前转到第10度、20度还是30度了，让我们知道运动的进度。","text_tokens":["，","数","1s","过程","通过","整型","---","和","描述","数值","通信接口","到","二维","32","64","体","表示","了","接口","分别","一个","还","msg","目标","30","布尔","编译","三个","是否","int32","小海龟","10","反馈","定义","还有","的","我们","一帧","包含","bool","使用","srv","编程","之前","在","“","坐标","不同","python","设计","传输","机制","y","求和","一下","机器","转到","90","小海","sum","加法","可以","这些","”","当前","c++","是","只","每隔","b","文件","自动","单向","。","两个","最终","、","int64","运动","无关","开始","请求","会","另外","分成","做成","一边","旋转","功能","进度","为了",".","应答","数据结构","ros","服务","状态","度","布尔值","数组","对应","这里","20","中间","周期","将","一种","由于","让","两","中","此时","转到第","这个","生成","动作","话题","转","结构","节点","什么","海龟","部分","x","保证"," ","数据","action","位","学习","知道","每","里","看到","需要","区分","就行","a","通信","完成","语言","等","比如","结果","机器人","还是","用来"],"title":"语言无关","title_tokens":["语言","无关"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_4","text":"大家可能好奇ROS系统到底给我们定义了哪些接口呢？我们可以在ROS安装路径中的share文件夹中找到，涵盖众多标准定义，大家可以打开几个看看。","text_tokens":["？","，","看看","找到","哪些","安装","到底","几个","可以","ros","好奇","share","可能","给","接口","呢","了","涵盖","文件","路径","。","件夹","标准","系统","定义","大家","众多","文件夹","的","我们","中","打开","在"],"title":"标准接口","title_tokens":["标准接口","接口","标准"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_5","text":"了解了通信接口的概念，接下来我们再从代码实现的角度，研究下如何定义以及使用一个接口。 在之前服务概念讲解的课程中，我们编写了这样一个例程，我们再来回顾下。 有三个节点，第一个驱动相机发布图像话题，第二个是机器视觉识别节点，封装了一个服务的服务端对象，提供目标识别位置的查询服务，第三个节点在需要目标位置的时候，就可以发送请求，收到位置进行使用了。","text_tokens":["概念","，","以及","第二","位置","查询","发布","讲解","图像","话题","对象","例程","提供","接下","如何","通信接口","节点","接下来","机器","封装","驱动","代码","可以","来","服务","第一个","是","了解","下","角度","编写"," ","了","接口","第三个","一个","二个","时候","发送","。","目标","收到","识别","三个","再","有","服务端","回顾","相机","实现","定义","请求","第三","课程","第二个","需要","从","的","通信","我们","研究","使用","第一","视觉","进行","之前","下来","中","就","在","这样"],"title":"案例一：服务接口的定义与使用","title_tokens":["案例","的","服务","与","使用","一","：","定义","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_6","text":"在这个例程中，我们使用GetObjectPosition.srv定义了服务通信的接口： learning_interface/srv/GetObjectPosition.srv bool get # 获取目标位置的指令 --- int32 x # 目标的X坐标 int32 y # 目标的Y坐标 定义中有两个部分，上边是获取目标位置的指令，get为true的话，就表示我们需要一次位置，服务端就会反馈这个x、y坐标了。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"srv/GetObjectPosition.srv\" ) ... 功能包的package.xml文件中也需要添加代码生成的功能依赖： ... <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group> ...","text_tokens":["，","name","过程","例程","---","cmakelists","member","编译器","的话","interfaces","包","txt","表示","了","接口","还","目标","编译","int32","_","反馈","定义",">","of","的","我们","...","srv","使用","bool","在","<","坐标","不同","位置","xml","y","是","required","文件","自动","。","两个","、","服务端","{","}","getobjectposition","代码生成","packages","会","配置","default","后","选项","依赖","添加","\"","获取","功能","：",".",")","一次","代码","$","服务","group","上边","true","让","为","中","interface","(","generators","exec","这个","生成","generate","接口定义","#","rosidl","指令","get","中有","部分","x"," ","runtime","/","package","build","也","depend","需要","通信","project","完成","语言","根据","就","find","learning"],"title":"接口定义","title_tokens":["定义","接口","接口定义"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_7","text":"我们在代码中再来重点看下接口的使用方法。","text_tokens":["。","重点","代码","的","我们","再","来","使用","看","下","中","接口","在","方法"],"title":"程序调用","title_tokens":["程序","调用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_8","text":"learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["，","spin","name","for","logger","node","python3","说明","not","初始","%","*","response","async","接口","1.0",",","import","wait","目标","create","识别","并","failed","result","as","\\",":","available","except","_","作者","库","定义","@","=","info","of","d","的","srv","...","'","自定义","bin","位置","python","y","class","again","once","等待","main","request","ros2","古月","self","send","args","-","objectclient","getobjectposition","!","请求","timeout","shutdown","进行","client","\"","target","else","exception",".","应答",")","position","coding","关闭","服务","销毁","初始化","def","父类","居","guyuehome","try","env","自定","true","none","8","类","sec","n","if","from","service","break","__","interface","(","r","call","对象","#","节点","future","py","waiting","get","创建","示例","rclpy","super","x"," ","ok","com","www","/","done","object","while","e","utf","init","usr","destroy","learning"],"title":"客户端接口调用","title_tokens":["接口","客户","调用","客户端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_9","text":"learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["，","spin","name","for","和","1","显示","50","logger","数值","node","python3","说明","用于","初始","函数","cv","*","objectx","response","%","bridge","接口","转化成","msg","一个",",","import","目标","create","识别","data","并","inrange","as","receiving","像素","\\",":","2","in","invalid","_","10","imgmsg","作者","库","定义","@","=","+","图像处理","订阅","得到","callback","去除","info","d","的","frame","listener","srv","使用","执行","宽","'","]","自定义","bin","消息","<","raw","坐标","python","者","y","[","服务器","下限","image","class","90","日志","np","color","255","范围","等待","物体","已","retr","main","request","ros2","处理","收到","类型","mask","已经","、","古月","w","self","args","长度","-","video","getobjectposition","效果","red","!","请求","信息","img","阈值","detect","勾勒","shutdown","bgr","findcontours","互相","shape","后","进行","imagesubscriber","array","numpy","\"","bgr8","图像","反馈","return","target","苹果","面积","else","入口","接口类型","进入","subscription",".",")","position","approx","输出","coding","接口类","检测","回调","hsv","ros","关闭","化成","服务","所在","contours","销毁","初始化","def","点画","父类","居","sub","一些","h","guyuehome","env","自定","模型","none","true","chain","务器","8","与","二值化","提示","类","n","if","sensor","将","from","service","从","circle","中心","boundingrect","为","__","cvtcolor","高","中","interface","轮廓","循环","continue","太小","(","上角","command","waitkey","对象","话题","（","xy","#","上限","队列","提供","左上","转换","节点","对","150","主","list","py","msgs","get","噪声","bgr2hsv","创建","drawcontours","示例","rclpy","super","名","及","x"," ","数据","opencv","）","to","com","www","/","转化","红色","int","128","退出","object","0","imshow","upper","计算","lower","出来","utf","init","usr","cv2","颜色","5","server","cnt","180","左上角","cvbridge","destroy","learning","objecty","hierarchy"],"title":"服务端接口调用","title_tokens":["接口","服务端","服务","调用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_10","text":"话题通信接口的定义也是类似的，继续从之前的机器视觉案例中来衍生，我们想把服务换成话题，周期发布目标识别的位置，不管有没有人需要。","text_tokens":["，","位置","想","发布","话题","机器","通信接口","人","把","案例","中来","服务","是","没有","接口","。","目标","识别","不管","衍生","周期","也","定义","需要","从","的","通信","我们","继续","视觉","换成","有没有","之前","类似"],"title":"案例二：话题接口的定义与使用","title_tokens":["案例","的","话题","与","使用","：","定义","接口","二"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_11","text":"现在我们会运行三个节点： 第一个节点，将驱动相机并发布图像话题，此时的话题数据使用的是ROS中标准定义的Image图像消息； 第二个节点，会运行视觉识别功能，识别目标的位置，这个位置我们希望封装成话题消息，发布出去，谁需要使用谁就来订阅； 第三个节点，订阅位置话题，打印到终端中。 启动三个终端，分别运行以上节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic interface_object_pub $ ros2 run learning_topic interface_object_sub","text_tokens":["打印","，","第二","位置","这个","发布","终端","图像","话题","功能","cam","；","：","node","节点","封装","image","到","现在","驱动","谁","usb","ros","$","run","来","第一个","希望","是"," ","第三个","数据","分别","一个","二个","sub","。","目标","并","识别","ros2","exe","learning","三个","标准","topic","object","相机","_","pub","定义","将","会","订阅","第二个","运行","需要","第三","的","我们","成","出去","启动","以上","第一","使用","视觉","就","中","interface","此时","消息"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_12","text":"在这个例程中，我们使用ObjectPosition.msg定义了服务通信的接口： learning_interface/msg/ObjectPosition.msg int32 x # 表示目标的X坐标 int32 y # 表示目标的Y坐标 话题消息的内容是一个位置，我们使用x、y坐标值进行描述。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"msg/ObjectPosition.msg\" ) ...","text_tokens":["，","坐标值","name","过程","例程","描述","cmakelists","编译器","interfaces","包","txt","标值","表示","了","接口","msg","一个","还","目标","编译","int32","_","定义","的","我们","...","使用","在","消息","坐标","不同","位置","y","是","required","自动","。","、","{","}","配置","default","后","进行","选项","\"","objectposition","功能","：",".","内容",")","代码","$","服务","让","中","interface","(","generators","这个","生成","话题","generate","接口定义","#","rosidl","x"," ","/","package","需要","通信","project","完成","语言","根据","find","learning"],"title":"接口定义","title_tokens":["定义","接口","接口定义"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_13","text":"我们在代码中再来重点看下接口的使用方法。","text_tokens":["。","重点","代码","的","我们","再","来","使用","看","下","中","接口","在","方法"],"title":"程序调用","title_tokens":["程序","调用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_14","text":"learning_topic/interface_object_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-发布目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . pub = self . create_publisher ( ObjectPosition , \"object_position\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , # 将苹果的图像中心点画出来 ( 0 , 255 , 0 ), - 1 ) self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 position = ObjectPosition () self . object_detect ( image ) # 苹果检测 position . x , position . y = int ( self . objectX ), int ( self . objectY ) self . pub . publish ( position ) # 发布目标位置 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["，","spin","name","for","和","1","显示","50","logger","数值","node","python3","publisher","说明","用于","初始","函数","cv","*","objectx","bridge","接口","转化成","msg","一个",",","import","目标","create","data","并","inrange","as","receiving","像素",":","2","topic","in","_","10","imgmsg","作者","库","定义","@","=","+","图像处理","订阅","得到","callback","去除","info","退出","的","frame","listener","使用","宽","'","]","自定义","bin","消息","<","raw","坐标","位置","python","者","y","[","下限","image","class","90","日志","np","color","255","范围","等待","发布者","已","retr","main","ros2","处理","类型","mask","、","古月","w","self","args","长度","-","video","pub","效果","red","!","信息","img","阈值","detect","勾勒","shutdown","bgr","findcontours","互相","shape","后","进行","imagesubscriber","array","numpy","\"","bgr8","图像","objectposition","苹果","面积","入口","进入","subscription",".",")","position","approx","输出","coding","检测","回调","hsv","ros","关闭","化成","销毁","所在","contours","初始化","def","点画","父类","居","sub","一些","h","guyuehome","env","自定","模型","none","chain","8","与","二值化","提示","类","if","sensor","将","from","从","circle","中心","boundingrect","为","__","cvtcolor","高","中","interface","轮廓","循环","continue","太小","(","上角","webcam","waitkey","发布","对象","话题","（","xy","#","上限","队列","左上","转换","节点","150","主","list","py","msgs","噪声","get","publish","bgr2hsv","创建","drawcontours","示例","rclpy","super","名","及","x"," ","opencv","）","to","com","www","/","转化","红色","int","128","object","0","imshow","upper","计算","lower","出来","utf","init","usr","cv2","颜色","5","cnt","左上角","180","cvbridge","destroy","learning","objecty","hierarchy"],"title":"发布者接口调用","title_tokens":["发布","发布者","接口","调用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_15","text":"learning_topic/interface_object_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-订阅目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ ObjectPosition , \"/object_position\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度 def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'Target Position: \"( %d , %d )\"' % ( msg . x , msg . y )) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"interface_position_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["，","spin","name","logger","node","python3","说明","初始","函数","%","*","接口","msg","一个",",","import","目标","create","并","subscribernode","\\",":","topic","_","10","作者","库","定义","@","=","info","d","订阅","退出","callback","字符串","的","listener","执行","'","自定义","bin","消息","位置","python","者","y","class","日志","等待","string","main","收到","ros2","处理","类型","、","古月","self","args","长度","-","!","信息","shutdown","后","进行","\"","objectposition","target","std","入口","subscription",".",")","position","输出","coding","回调","关闭","销毁","初始化","def","父类","居","sub","guyuehome","env","自定","none","8","提示","类","from","__","interface","循环","(","对象","话题","（","#","队列","节点","对","主","py","msgs","get","字符","创建","示例","rclpy","super","名","x"," ","数据","com","www","/","object","utf","init","usr","destroy","learning"],"title":"订阅者接口调用","title_tokens":["订阅","接口","调用","者"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_16","text":"接口命令的常用操作如下： $ ros2 interface list # 查看系统接口列表 $ ros2 interface show <interface_name> # 查看某个接口的详细定义 $ ros2 interface package <package_name> # 查看某个功能包中的接口定义","text_tokens":["name","功能","show","#","接口定义","包中","：","list","操作","$","列表"," ","接口","ros2","命令","package","查看","某个","系统","_",">","定义","的","详细","如下","interface","<","常用"],"title":"接口命令行操作","title_tokens":["操作","接口","命令行","命令"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_17","text":"https://docs.ros.org/en/humble/Concepts/About-ROS-Interfaces.html https://docs.ros.org/en/humble/Tutorials/Single-Package-Define-And-Use-Interface.html","text_tokens":["use","concepts",".","interfaces","html","ros","en","about"," ","https","docs","/","org","tutorials","package","humble",":","-","and","single","define","interface"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/","text":"动作 机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。 通信模型 举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。 客户端/服务器模型 动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。 一对多通信 和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。 同步通信 既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。 由服务和话题合成 大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。 案例一：小海龟的动作 我们再用小海龟的案例加深对动作概念的理解。 按照以下命令启动小海龟仿真器，接下来使用action命令控制小海龟的动作，可以让海龟运动到某一指定的姿态： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key $ ros2 action info /turtle1/rotate_absolute $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" --feedback 案例二：机器人画圆 如何通过代码来实现动作的编程呢？ 动作虽然是基于话题和服务实现的，但在实际使用中，并不会直接使用话题和服务的编程方法，而是有一套针对动作特性封装好的编程接口，接下来我们就一起试一试。 假设我们有一个机器人，我们希望通过动作的通信方法，让机器人转个圈，请编程实现动作通信中，客户端和服务器端的实现过程。 运行效果 启动两个终端，分别运行一下命令，启动动作示例的服务端和客户端： $ ros2 run learning_action action_move_server $ ros2 run learning_action action_move_client 终端中，我们可以看到客户端发送动作目标之后，服务器端开始模拟机器人运动，每30度发送一次反馈信息，最终完成运动，并反馈结束运动的信息。 接下来我们就分析下这个例程实现背后的原理。 接口定义 例程使用的动作并不是ROS中的标准定义，我们通过MoveCircle.action进行自定义： learning_interface/action/MoveCircle.action bool enable # 定义动作的目标，表示动作开始的指令 --- bool finish # 定义动作的结果，表示是否成功执行 --- int32 state # 定义动作的反馈，表示当前执行到的位置 包含三个部分： 第一块是 动作的目标 ，enable为true时，表示开始运动； 第二块是 动作的执行结果 ，finish为true，表示动作执行完成； 第三块是 动作的周期反馈 ，表示当前机器人旋转到的角度。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"action/MoveCircle.action\" ) ... 通信模型 通信模型就是这样，客户端发送给一个动作目标，服务器控制机器人开始运动，并周期反馈，结束后反馈结束信息。 思路理清楚，接下来开始写代码。相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。 服务端代码解析 learning_action/action_move_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-负责执行圆周运动动作的服务端 \"\"\" import time import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionServer # ROS2 动作服务器类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_server = ActionServer ( # 创建动作服务器（接口类型、动作名、回调函数） self , MoveCircle , 'move_circle' , self . execute_callback ) def execute_callback ( self , goal_handle ): # 执行收到动作目标之后的处理函数 self . get_logger () . info ( 'Moving circle...' ) feedback_msg = MoveCircle . Feedback () # 创建一个动作反馈信息的消息 for i in range ( 0 , 360 , 30 ): # 从0到360度，执行圆周运动，并周期反馈信息 feedback_msg . state = i # 创建反馈信息，表示当前执行到的角度 self . get_logger () . info ( 'Publishing feedback: %d ' % feedback_msg . state ) goal_handle . publish_feedback ( feedback_msg ) # 发布反馈信息 time . sleep ( 0.5 ) goal_handle . succeed () # 动作执行成功 result = MoveCircle . Result () # 创建结果消息 result . finish = True return result # 反馈最终动作执行的结果 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionServer ( \"action_move_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_server = learning_action.action_move_server:main' , ], }, 客户端代码解析 learning_action/action_move_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-请求执行圆周运动动作的客户端 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionClient # ROS2 动作客户端类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_client = ActionClient ( # 创建动作客户端（接口类型、动作名） self , MoveCircle , 'move_circle' ) def send_goal ( self , enable ): # 创建一个发送动作目标的函数 goal_msg = MoveCircle . Goal () # 创建一个动作目标的消息 goal_msg . enable = enable # 设置动作目标为使能，希望机器人开始运动 self . _action_client . wait_for_server () # 等待动作的服务器端启动 self . _send_goal_future = self . _action_client . send_goal_async ( # 异步方式发送动作的目标 goal_msg , # 动作目标 feedback_callback = self . feedback_callback ) # 处理周期反馈消息的回调函数 self . _send_goal_future . add_done_callback ( self . goal_response_callback ) # 设置一个服务器收到目标之后反馈时的回调函数 def goal_response_callback ( self , future ): # 创建一个服务器收到目标之后反馈时的回调函数 goal_handle = future . result () # 接收动作的结果 if not goal_handle . accepted : # 如果动作被拒绝执行 self . get_logger () . info ( 'Goal rejected :(' ) return self . get_logger () . info ( 'Goal accepted :)' ) # 动作被顺利执行 self . _get_result_future = goal_handle . get_result_async () # 异步获取动作最终执行的结果反馈 self . _get_result_future . add_done_callback ( self . get_result_callback ) # 设置一个收到最终结果的回调函数 def get_result_callback ( self , future ): # 创建一个收到最终结果的回调函数 result = future . result () . result # 读取动作执行的结果 self . get_logger () . info ( 'Result: { %d }' % result . finish ) # 日志输出执行结果 def feedback_callback ( self , feedback_msg ): # 创建处理周期反馈消息的回调函数 feedback = feedback_msg . feedback # 读取反馈的数据 self . get_logger () . info ( 'Received feedback: { %d }' % feedback . state ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionClient ( \"action_move_client\" ) # 创建ROS2节点对象并进行初始化 node . send_goal ( True ) # 发送动作目标 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_client = learning_action.action_move_client:main' , 'action_move_server = learning_action.action_move_server:main' , ], }, 动作命令行操作 动作命令的常用操作如下： $ ros2 action list # 查看服务列表 $ ros2 action info <action_name> # 查看服务数据类型 $ ros2 action send_goal <action_name> <action_type> <action_data> # 发送服务请求 参考链接 https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Actions.html","text_tokens":["scripts","1s","终端","动图","rotate","例程","编译器","python3","not","方法","更为","到","虽然","函数","加入","下","角度","可能","分别","先","wait","30","turtlesim","rotateabsolute","int32","库",">","退出","info","运行","而是","上","使用","有没有","执行","bool","...","自定义","异步","？","针对","位置","python","好","到底","哪里","class","把","html","眼前","这些","发布者","来","当前","其实","是","不仅仅","又","不仅","每隔","。","360","range","装","服务端","self","args","系统","-","模块","进行","类似","handle","控制","想","像","接口类型","举个","发出","底层","一次","某一","sleep","服务","这种","def","父类","上边","模型","tutorials","务器","请","8","不会","一块","大家","if","这么","from","从","控","circle","第一","才能","写","__","这样","抓取","generators","这个","发布","enable","接口定义","相比","list","什么","get","publish","送货","背后","super","数据","action","完整","再","知道","能","time","1.57","init","接收","setup","project","根据","简单","，","name","过程","通过","logger","实际","node","如何","通信接口","说明","接下来","interfaces","直接","案例","就此","但是","段时间",",","目标","data","result","actionclient","有","合成","合适","小海龟","10","反馈","作者","@","订阅","--","如下","]","bin","不同","者","命令行","一下","机器","随时","二块","现在","复杂","succeed","goal","points","required","二","多个","docs","两个","圆周","类型","、","运动","send","}","客户","一对","只能","请求","!","秘密","会","另外","配置","entry","shutdown","后","起来","就是","含义","选项","旋转","需求","成功","获取","功能","进度","movecircleactionserver","三块","看","：","入口","拒绝执行",")","输出","圆周运动","coding","接口类","被","代码","不","销毁","度","org","true","周期","turtle","没错","第二块","type","move","一种","相对","让","中","turtle1","循环","遥控","概念","姿态","加深","理解","动作","生成","转","便于","第一块","对","主","某","en","基于","rclpy","部分","结束","actionserver","—","应带","/","解析","分析","第三块","teleop","场景","参考","destroy","语言","find","accepted","spin","---","和","导航","特性","应用层","实时","既然","按照","finish","%","*","列表","多","async","absolute","了","点","https","一个","还","msg","使","import","识别","之后","三个","是否",":","=","state","callback","的","包含","发现","之前","编程","'","时","在","根本","坐标","服务器端","再用","[","机械","臂","接下","常常","得","可以","run","是不是","较长","都","自动","处理","{","开始","圈","以下","多少度","效果","信息","如果","一点","当","假设","进度条","转个","原理","指定","client","return","键盘","那",".","用到","回调","$","达到","状态","初始化","干什么","居","所处","20","key","自定","env","none","直到","一段时间","execute","为","顺利","告诉","interface","处理函数","当中","流程","一点一点","目的","rosidl","0.5","海龟","示例","名","负责","i","console","设置"," ","发送","ok","呢","分拣","www","humble","查看","0","feedback","实现","取消","看到","utf","usr","管理","通信","server","完成","但","received","就","下来","送餐","learning","结果","名字","一段","for","cmakelists","仅仅","封装","链接","初始","包","txt","rejected","时间","一起","response","过","表示","一","没有","不是","接口","整个","并","编译","仿真器","毕竟","还会","in","_","定义","例子","只有","d","第三","启动","我们","understanding","介绍","仔细","其","就此结束","应用","打开","消息","<","movecircle","转圈","机制","；","服务器","由","发送给","小海","日志","操作","等待","拒绝","文件","清楚","试一试","main","收到","ros2","最终","古月","某个","actions","送给","default","隐藏","一边","常用","movecircleactionclient","第二","满足","多少","同时","\"","publishing","很","add","ros","关闭","思路","moving","智能","一样","理","编写","guyuehome","行为","真器","命令","读取","调用","类","一套","这","(","具体","通信模型","对象","话题","generate","（","#","方式","指令","节点","动","future","py","程序","创建","希望","同步","）","com","package","done","模拟","标准","也","仿真","每","需要","竟然","肯定","数据类型","等","theta","画圆","比如","客户端","机器人"],"title":"动作","title_tokens":["动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_1","text":"机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。","text_tokens":["遥控","概念","，","满足","具体","流程","这个","理解","需求","动作","好","功能","目的","键盘","机制","那","便于","仅仅","机器","对","常常","很","某一","复杂","用到","这些","ros","被","可以","含义","送货","智能","这种","是","不仅仅","不仅"," ","一个","—","分拣","。","目标","并","识别","行为","完整","、","运动","某个","系统","也","实现","这么","会","需要","另外","一种","从","的","我们","场景","通信","管理","上","等","进行","应用","中","送餐","机器人","就是","在","就","简单","名字"],"title":"动作","title_tokens":["动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_2","text":"举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。","text_tokens":["一段","，","1s","过程","更为","到","时间","表示","没有","不是","了","一个","还","段时间","并","30","之后","合适","10","反馈","例子","的","我们","使用","有没有","执行","在","根本","？","转圈","机制","一下","到底","哪里","机器","随时","得","把","现在","眼前","可以","当前","是","每隔","。","360","、","装","运动","开始","圈","多少度","信息","如果","一点","假设","后","进度条","转个","旋转","想","多少","进度","像","举个","发出","不","度","20","行为","命令","直到","一段时间","控","让","这","才能","告诉","这样","当中","一点一点","动作","转","指令","结束"," ","发送","ok","再","知道","取消","需要","肯定","通信","完成","就","比如","机器人"],"title":"通信模型","title_tokens":["模型","通信","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_3","text":"动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。","text_tokens":["服务器端","，","姿态","控制","想","同时","动作","过程","这个","和","导航","机械","服务器","臂","机器","实时","动","什么","达到","服务","状态","就此","当前","是","干什么","又","结束","发送"," ","可能","所处","一个","整个","模型","目标","。","收到","之后","周期","务器","再","运动","开始","也","反馈","客户","如果","信息","当","的","通信","让","使用","后","执行","起来","就此结束","就","中","客户端","机器人","一边","类似","抓取","坐标"],"title":"客户端/服务器模型","title_tokens":["模型","/","务器","服务","服务器","客户端","客户"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_4","text":"和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。","text_tokens":["服务器端","，","动作","和","服务器","机器","可以","服务","但是","一样","下","发送","都","一个","先","。","多个","命令","务器","有","运动","毕竟","大家","客户","只能","只有","的","通信","完成","才能","执行","中","客户端","机器人"],"title":"一对多通信","title_tokens":["通信","一对","多"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_5","text":"既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。","text_tokens":["，","动作","过程","机制","那","通信接口","既然",".","过","是","同步","数据","接口","action","文件","。","有","也","反馈","定义","一种","的","通信","我们","介绍","使用","进行","之前","中"],"title":"同步通信","title_tokens":["通信","同步"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_6","text":"大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。","text_tokens":["服务器端","，","者","发布","动作","过程","话题","动图","机制","和","看","服务器","应用层","底层","发布者","来","服务","是不是","基于","表示","其实","是","下","不是","时"," ","发送","上边","一个","应带","。","目标","收到","两个","命令","三个","周期","再","有","运动","还会","调用","务器","也","没错","模块","反馈","实现","大家","客户","请求","秘密","会","订阅","竟然","一种","当","的","通信","发现","使用","仔细","其","隐藏","应用","就是","客户端"],"title":"由服务和话题合成","title_tokens":["话题","服务","和","合成","由"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_7","text":"我们再用小海龟的案例加深对动作概念的理解。 按照以下命令启动小海龟仿真器，接下来使用action命令控制小海龟的动作，可以让海龟运动到某一指定的姿态： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key $ ros2 action info /turtle1/rotate_absolute $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" --feedback","text_tokens":["指定","概念","，","姿态","再用","加深","理解","控制","动作","\"","rotate","：","node","接下","对","按照","接下来","小海","到","某","案例","可以","海龟","$","run","goal","一","absolute"," ","action","。","key","ros2","真器","命令","turtlesim","/","仿真器","turtle","运动","{","send","仿真","rotateabsolute","以下","小海龟",":","-","_","1.57","}","feedback","teleop","info","的","我们","启动","让","使用","--","theta","下来","turtle1"],"title":"案例一：小海龟的动作","title_tokens":["小海","案例","的","海龟","动作","一","小海龟","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_8","text":"如何通过代码来实现动作的编程呢？ 动作虽然是基于话题和服务实现的，但在实际使用中，并不会直接使用话题和服务的编程方法，而是有一套针对动作特性封装好的编程接口，接下来我们就一起试一试。 假设我们有一个机器人，我们希望通过动作的通信方法，让机器人转个圈，请编程实现动作通信中，客户端和服务器端的实现过程。","text_tokens":["？","针对","，","服务器端","动作","通过","话题","好","过程","和","实际","特性","服务器","如何","接下","封装","机器","接下来","方法","直接","虽然","代码","一起","来","服务","基于","希望","是"," ","接口","呢","一个","试一试","。","并","务器","有","请","不会","圈","客户端","实现","客户","一套","的","我们","通信","让","假设","而是","使用","但","编程","下来","中","就","机器人","在","转个"],"title":"案例二：机器人画圆","title_tokens":["案例","机器人","：","画圆","机器","二"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_9","text":"启动两个终端，分别运行一下命令，启动动作示例的服务端和客户端： $ ros2 run learning_action action_move_server $ ros2 run learning_action action_move_client 终端中，我们可以看到客户端发送动作目标之后，服务器端开始模拟机器人运动，每30度发送一次反馈信息，最终完成运动，并反馈结束运动的信息。 接下来我们就分析下这个例程实现背后的原理。","text_tokens":["服务器端","，","client","这个","终端","动作","例程","和","一下","：","服务器","接下","机器","机器人","接下来","一次","可以","$","run","服务","示例","背后","度","结束","下"," ","发送","分别","action","。","目标","ros2","两个","30","命令","并","之后","最终","务器","服务端","模拟","开始","运动","每","分析","_","反馈","实现","客户","看到","move","信息","运行","启动","的","我们","server","完成","下来","中","客户端","learning","就","原理"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_10","text":"例程使用的动作并不是ROS中的标准定义，我们通过MoveCircle.action进行自定义： learning_interface/action/MoveCircle.action bool enable # 定义动作的目标，表示动作开始的指令 --- bool finish # 定义动作的结果，表示是否成功执行 --- int32 state # 定义动作的反馈，表示当前执行到的位置 包含三个部分： 第一块是 动作的目标 ，enable为true时，表示开始运动； 第二块是 动作的执行结果 ，finish为true，表示动作执行完成； 第三块是 动作的周期反馈 ，表示当前机器人旋转到的角度。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"action/MoveCircle.action\" ) ...","text_tokens":["，","name","通过","过程","例程","---","cmakelists","编译器","finish","interfaces","包","到","txt","表示","不是","角度","接口","还","目标","并","三个","编译","是否","int32","_","反馈","定义","state","第三","的","我们","包含","bool","使用","...","执行","时","自定义","在","movecircle","不同","位置","；","机器","二块","当前","是","required","自动","。","{","运动","开始","}","配置","default","后","进行","第二","选项","旋转","\"","成功","功能","三块","：",".",")","代码","ros","$","自定","true","learning","周期","第二块","一块","让","第一","为","中","interface","(","generators","enable","动作","生成","generate","接口定义","#","rosidl","指令","第一块","部分"," ","action","/","package","标准","第三块","需要","project","完成","语言","根据","find","结果","机器人"],"title":"接口定义","title_tokens":["定义","接口","接口定义"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_11","text":"通信模型就是这样，客户端发送给一个动作目标，服务器控制机器人开始运动，并周期反馈，结束后反馈结束信息。 思路理清楚，接下来开始写代码。相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。","text_tokens":["，","控制","通信模型","动作","话题","例程","和","一下","服务器","相比","发送给","机器","接下","接下来","代码","程序","服务","思路","理","一","结束","较长","发送"," ","一个","清楚","模型","目标","并","。","周期","务器","运动","开始","分析","反馈","客户","送给","信息","运行","的","通信","相对","我们","后","写","起来","之前","下来","就是","客户端","机器人","这样"],"title":"通信模型","title_tokens":["模型","通信","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_12","text":"learning_action/action_move_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-负责执行圆周运动动作的服务端 \"\"\" import time import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionServer # ROS2 动作服务器类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_server = ActionServer ( # 创建动作服务器（接口类型、动作名、回调函数） self , MoveCircle , 'move_circle' , self . execute_callback ) def execute_callback ( self , goal_handle ): # 执行收到动作目标之后的处理函数 self . get_logger () . info ( 'Moving circle...' ) feedback_msg = MoveCircle . Feedback () # 创建一个动作反馈信息的消息 for i in range ( 0 , 360 , 30 ): # 从0到360度，执行圆周运动，并周期反馈信息 feedback_msg . state = i # 创建反馈信息，表示当前执行到的角度 self . get_logger () . info ( 'Publishing feedback: %d ' % feedback_msg . state ) goal_handle . publish_feedback ( feedback_msg ) # 发布反馈信息 time . sleep ( 0.5 ) goal_handle . succeed () # 动作执行成功 result = MoveCircle . Result () # 创建结果消息 result . finish = True return result # 反馈最终动作执行的结果 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionServer ( \"action_move_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_server = learning_action.action_move_server:main' , ], },","text_tokens":["scripts","，","spin","name","for","logger","node","python3","说明","finish","初始","包","到","函数","%","*","加入","表示","角度","点","接口","msg","一个",",","import","目标","30","并","之后","result","编译",":","in","_","反馈","作者","库","定义","@","=","info","state","d","退出","callback","的","...","执行","'","如下","]","自定义","bin","打开","消息","movecircle","python","[","服务器","class","succeed","等待","goal","points","当前","main","文件","收到","ros2","圆周","处理","类型","最终","range","、","古月","运动","服务端","self","360","args","-","系统","{","}","!","信息","配置","entry","shutdown","后","进行","handle","选项","\"","成功","return","功能","movecircleactionserver","publishing","入口","接口类型","：",".",")","sleep","圆周运动","coding","接口类","回调","代码","关闭","服务","moving","销毁","初始化","度","def","父类","居","编写","guyuehome","env","自定","true","none","周期","务器","8","类","execute","move","from","从","circle","让","__","interface","循环","处理函数","(","发布","动作","对象","（","#","0.5","节点","主","py","get","publish","程序","创建","示例","rclpy","负责","super","名","i","console","设置"," ","）","actionserver","action","com","www","/","知道","time","0","feedback","utf","init","setup","需要","usr","server","完成","destroy","结果","learning"],"title":"服务端代码解析","title_tokens":["解析","服务端","服务","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_13","text":"learning_action/action_move_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-请求执行圆周运动动作的客户端 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionClient # ROS2 动作客户端类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_client = ActionClient ( # 创建动作客户端（接口类型、动作名） self , MoveCircle , 'move_circle' ) def send_goal ( self , enable ): # 创建一个发送动作目标的函数 goal_msg = MoveCircle . Goal () # 创建一个动作目标的消息 goal_msg . enable = enable # 设置动作目标为使能，希望机器人开始运动 self . _action_client . wait_for_server () # 等待动作的服务器端启动 self . _send_goal_future = self . _action_client . send_goal_async ( # 异步方式发送动作的目标 goal_msg , # 动作目标 feedback_callback = self . feedback_callback ) # 处理周期反馈消息的回调函数 self . _send_goal_future . add_done_callback ( self . goal_response_callback ) # 设置一个服务器收到目标之后反馈时的回调函数 def goal_response_callback ( self , future ): # 创建一个服务器收到目标之后反馈时的回调函数 goal_handle = future . result () # 接收动作的结果 if not goal_handle . accepted : # 如果动作被拒绝执行 self . get_logger () . info ( 'Goal rejected :(' ) return self . get_logger () . info ( 'Goal accepted :)' ) # 动作被顺利执行 self . _get_result_future = goal_handle . get_result_async () # 异步获取动作最终执行的结果反馈 self . _get_result_future . add_done_callback ( self . get_result_callback ) # 设置一个收到最终结果的回调函数 def get_result_callback ( self , future ): # 创建一个收到最终结果的回调函数 result = future . result () . result # 读取动作执行的结果 self . get_logger () . info ( 'Result: { %d }' % result . finish ) # 日志输出执行结果 def feedback_callback ( self , feedback_msg ): # 创建处理周期反馈消息的回调函数 feedback = feedback_msg . feedback # 读取反馈的数据 self . get_logger () . info ( 'Received feedback: { %d }' % feedback . state ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionClient ( \"action_move_client\" ) # 创建ROS2节点对象并进行初始化 node . send_goal ( True ) # 发送动作目标 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_client = learning_action.action_move_client:main' , 'action_move_server = learning_action.action_move_server:main' , ], },","text_tokens":["scripts","，","spin","name","for","logger","node","python3","说明","not","finish","初始","包","rejected","函数","%","*","response","加入","async","点","接口","一个","msg",",","import","使","目标","wait","并","actionclient","之后","result","编译",":","_","反馈","作者","库","定义","@","=","info","d","state","退出","callback","的","启动","执行","'","如下","]","自定义","bin","异步","时","消息","打开","movecircle","服务器端","python","[","服务器","机器","class","日志","等待","goal","points","拒绝","main","文件","收到","ros2","圆周","处理","结果","类型","最终","、","古月","运动","self","send","开始","{","-","}","args","系统","客户","!","请求","如果","配置","entry","shutdown","后","进行","movecircleactionclient","handle","client","选项","\"","return","获取","功能","入口","接口类型","：","机器人",".","拒绝执行",")","输出","圆周运动","coding","接口类","add","回调","被","关闭","代码","服务","销毁","初始化","def","父类","居","编写","guyuehome","env","自定","读取","none","true","周期","务器","8","类","if","move","from","circle","让","为","__","顺利","interface","循环","(","enable","动作","对象","（","#","方式","节点","主","future","py","get","程序","创建","希望","示例","rclpy","super","名","console","设置"," ","发送","数据","）","action","com","www","/","done","知道","能","feedback","utf","init","接收","setup","需要","usr","server","完成","accepted","received","destroy","客户端","learning"],"title":"客户端代码解析","title_tokens":["解析","客户","代码","客户端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_14","text":"动作命令的常用操作如下： $ ros2 action list # 查看服务列表 $ ros2 action info <action_name> # 查看服务数据类型 $ ros2 action send_goal <action_name> <action_type> <action_data> # 发送服务请求","text_tokens":["动作","name","#","：","list","操作","$","服务","列表","goal"," ","发送","数据","action","data","ros2","命令","类型","type","查看","send","_",">","info","请求","的","数据类型","如下","<","常用"],"title":"动作命令行操作","title_tokens":["动作","操作","命令行","命令"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Actions.html","text_tokens":["html","docs","ros2","/","org","tutorials","ros","understanding","en","humble","actions",":","-",".","https"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/","text":"参数 话题、服务、动作，不知道这三种通信机制大家是否已经了解清楚，本节我们再来介绍一种ROS系统中常用的数据传输方式—— 参数 。 类似C++编程中的全局变量，可以便于在多个程序中共享某些数据， 参数是ROS机器人系统中的全局字典，可以运行多个节点中共享数据。 通信模型 比如在机器视觉识别的时候，有很多参数都会影响视觉识别的效果。 在NodeA相机驱动节点中，就需要考虑很多问题，相机连接到哪个usb端口，使用的图像分辨率是多少，曝光度和编码格式分别是什么，这些都可以通过参数设置，我们可以通过配置文件或者程序进行设置。 NodeB节点中也是一样，图像识别使用的阈值是多少，整个图像面积很大，那个部分是我们关注的核心区域，识别过程是否需要美颜等等，就像我们使用美颜相机一样，我们可以通过滑动条或者输入框设置很多参数，不同参数设置后，都会改变执行功能的一些效果。 这就是参数的作用。 全局字典 在ROS系统中，参数是以 全局字典 的形态存在的，什么叫字典？就像真实的字典一样，由名称和数值组成，也叫做键和值，合成 键值 。或者我们也可以理解为，就像编程中的参数一样，有一个参数名 ，然后跟一个等号，后边就是参数值了，在使用的时候，访问这个参数名即可。 可动态监控 在ROS2中，参数的特性非常丰富，比如某一个节点共享了一个参数，其他节点都可以访问，如果某一个节点对参数进行了修改，其他节点也有办法立刻知道，从而获取最新的数值。这在 参数的高级编程 中，大家都可能会用到。 案例一：小海龟例程中的参数 在小海龟的例程中，仿真器也提供了不少参数，我们一起来通过这个例程，熟悉下参数的含义和命令行的使用方法。 启动两个终端，分别运行小海龟仿真器和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 查看参数列表 当前系统中有哪些参数呢？我们可以启动一个终端，并使用如下命令查询： $ ros2 param list 参数查询与修改 如果想要查询或者修改某个参数的值，可以在param命令后边跟get或者set子命令： $ ros2 param describe turtlesim background_b # 查看某个参数的描述信息 $ ros2 param get turtlesim background_b # 查询某个参数的值 $ ros2 param set turtlesim background_b 10 # 修改某个参数的值 参数文件保存与加载 一个一个查询/修改参数太麻烦了，不如试一试参数文件，ROS中的参数文件使用yaml格式，可以在param命令后边跟dump子命令，将某个节点的参数都保存到文件中，或者通过load命令一次性加载某个参数文件中的所有内容： $ ros2 param dump turtlesim >> turtlesim.yaml # 将某个节点的参数保存到参数文件中 $ ros2 param load turtlesim turtlesim.yaml # 一次性加载某一个文件中的所有参数 案例二：参数编程 接下来就要开始写程序了，在程序中设置参数和读取参数都比较简单，一两句函数就可以实现，我们先来体验一下这几个函数的使用方法。 运行效果 启动一个终端，先运行第一句指令，启动param_declare节点，终端中可以看到循环打印的日志信息，其中的“mbot”就是我们设置的一个参数值，参数名称是“robot_name”，通过命令行修改这个参数，看下终端中会发生什么？ $ ros2 run learning_parameter param_declare $ ros2 param set param_declare robot_name turtle 代码解析 我们来看下在代码中，如何声明、创建、修改一个参数的值。 learning_parameter/param_declare.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-创建、读取、修改参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 class ParameterNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . timer = self . create_timer ( 2 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . declare_parameter ( 'robot_name' , 'mbot' ) # 创建一个参数，并设置参数的默认值 def timer_callback ( self ): # 创建定时器周期执行的回调函数 robot_name_param = self . get_parameter ( 'robot_name' ) . get_parameter_value () . string_value # 从ROS2系统中读取参数的值 self . get_logger () . info ( 'Hello %s !' % robot_name_param ) # 输出日志信息，打印读取到的参数值 new_name_param = rclpy . parameter . Parameter ( 'robot_name' , # 重新将参数值设置为指定值 rclpy . Parameter . Type . STRING , 'mbot' ) all_new_parameters = [ new_name_param ] self . set_parameters ( all_new_parameters ) # 将重新创建的参数列表发送给ROS2系统 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ParameterNode ( \"param_declare\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , ], }, 案例三：机器视觉应用 参数大家已经会使用了，如何在机器人中应用呢？ 继续优化机器视觉的示例，物体识别对光线比较敏感，不同的环境大家使用的阈值也是不同的，每次在代码中修改阈值还挺麻烦，不如我们就把阈值提炼成参数，运行过程中就可以动态设置，不是大大提高了程序的易用性么？ 说干就干，我们先来看下效果如何，再看下代码中的变化。 运行效果 启动三个终端，分别运行： 相机驱动节点 视觉识别节点 修改红色阈值 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_parameter param_object_detect $ ros2 param set param_object_detect red_h_upper 180 在启动的视觉识别节点中，我们故意将视觉识别中红色阈值的上限设置为0，如果不修改参数，将无法实现目标识别。 为了便于调整阈值，我们在节点中将红色阈值的限位修改为了ROS参数，通过命令行修改该参数的值，就可以实现视觉识别啦。 代码解析 我们来看下在视觉识别的代码中，是如何通过参数来设置阈值的。 learning_parameter/param_object_detect.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-设置目标识别的颜色阈值参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） 'image_raw' , self . listener_callback , 10 ) self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . declare_parameter ( 'red_h_upper' , 0 ) # 创建一个参数，表示阈值上限 self . declare_parameter ( 'red_h_lower' , 0 ) # 创建一个参数，表示阈值下限 def object_detect ( self , image ): upper_red [ 0 ] = self . get_parameter ( 'red_h_upper' ) . get_parameter_value () . integer_value # 读取阈值上限的参数值 lower_red [ 0 ] = self . get_parameter ( 'red_h_lower' ) . get_parameter_value () . integer_value # 读取阈值下限的参数值 self . get_logger () . info ( 'Get Red H Upper: %d , Lower: %d ' % ( upper_red [ 0 ], lower_red [ 0 ])) # 通过日志打印读取到的参数值 hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , \"bgr8\" ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"param_object_detect\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , 'param_object_detect = learning_parameter.param_object_detect:main' , ], }, 参考链接 https://docs.ros.org/en/humble/Tutorials/Parameters/Understanding-ROS2-Parameters.html","text_tokens":["scripts","终端","哪些","某些","例程","数值","丰富","python3","方法","高级","到","函数","调整","加入","以","下","时候","可能","分别","参数","先","turtlesim","parameter","保存","value",">","库","退出","info","运行","无法","很多","继续","使用","就要","执行","“","？","python","单位","class","90","把","html","np","这些","来","可","当前","c++","是","已","string","b","。","mask","w","故意","不如","self","系统","args","-","第一句","监控","yaml","分辨率","img","进行","立刻","类似","imagesubscriber","array","控制","bgr8","其他","像","核心","approx","一次","hsv","服务","def","默认值","一些","父类","mbot","模型","tutorials","chain","parameternode","比较","8","提示","存在","名称","大家","if","from","从","连接","circle","第一","三","boundingrect","写","__","该","cvtcolor","高","号","这个","转换","list","什么","get","super","中有","x","端口","数据","转化","再","知道","红色","128","int","init","setup","颜色","cvbridge","param","5","hierarchy","简单","，","查询","图像识别","name","通过","过程","显示","logger","50","node","如何","说明","接下来","变量","驱动","案例","bridge","曝光","加载","转化成","办法",",","目标","data","inrange","有","参数设置","滑动","合成","2","小海龟","10","作者","@","改变","形态","不少","订阅","视觉","辨率","set","如下","]","bin","变化","中将","定时","不同","打印","从而","者","传输","命令行","影响","y","一下","区域","下限","机器","动态","image","声明","255","points","retr","二","多个","docs","两个","类型","已经","一句","、","}","video","相机","!","会","配置","detect","entry","shutdown","bgr","findcontours","后","或者","起来","就是","含义","环境","选项","敏感","integer","numpy","图像","获取","功能","为了","：","访问","看","入口","进入",")","输出","coding","检测","代码","不","销毁","所在","度","跟","点画","h","org","周期","turtle","type","与","二值化","值","一种","后边","让","中","轮廓","循环","理解","动作","便于","秒","对","主","发生","150","msgs","某","en","rclpy","部分","—","to","/","解析","重新","all","imshow","teleop","180","参考","destroy","说干就干","然后","spin","定时器","和","描述","1","比较简单","来看","特性","限位","用于","%","*","cv","列表","了","点","https","一个","还","msg","import","create","识别","三个","background","是否",":","imgmsg","=","得到","callback","去除","的","frame","listener","提炼","编程","'","在","输入框","坐标","s","[","接下","color","可以","run","关注","都","处理","{","开始","效果","组成","那个","red","hello","优化","如果","信息","太","条","实现目标","每次","指定","大大","一次性","苹果","键盘",".","内容","用到","回调","$","真实","作用","contours","啦","初始化","parameters","居","三种","key","env","dump","none","考虑","提高","sensor","将","中心","为","continue","节","很大","xy","上限","提供","左上","几个","噪声","叫","海龟","全局","示例","名","console","及","想要","设置"," ","即可","发送","呢","load","www","叫做","humble","输入","查看","一两句","体验","object","0","实现","看到","计算","lower","utf","usr","cv2","通信","修改","成","cnt","完成","就","下来","learning","receiving","本","一两","new","for","链接","初始","包","两句","表示","一","不是","nodea","参数值","接口","整个","并","as","编译","仿真器","所有","像素","nodeb","in","_","d","+","图像处理","格式","启动","我们","understanding","大大提高","介绍","传输方式","么","宽","应用","打开","消息","<","raw","describe","分辨","cam","机制","美颜","由","发送给","小海","日志","usb","等待","挺","”","范围","物体","其中","清楚","文件","试一试","declare","麻烦","ros2","main","古月","问题","某个","长度","默认","送给","光线","阈值","勾勒","shape","互相","非常","字典","常用","多少","\"","面积","哪个","subscription","等等","ros","关闭","化成","一样","timer","编写","sub","配置文件","guyuehome","易用","读取","真器","命令","类","编码","子","这","太小","(","上角","键值","waitkey","通信模型","对象","话题","（","全局变量","#","队列","方式","节点","指令","py","程序","bgr2hsv","创建","drawcontours","了解","）","共享","opencv","com","易用性","exe","也","仿真","键和值","upper","出来","需要","熟悉","左上角","robot","等","比如","机器人","最新"],"title":"参数","title_tokens":["参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_1","text":"话题、服务、动作，不知道这三种通信机制大家是否已经了解清楚，本节我们再来介绍一种ROS系统中常用的数据传输方式—— 参数 。 类似C++编程中的全局变量，可以便于在多个程序中共享某些数据， 参数是ROS机器人系统中的全局字典，可以运行多个节点中共享数据。","text_tokens":["，","动作","传输","话题","全局变量","某些","机制","方式","便于","节点","机器","变量","可以","ros","程序","不","服务","来","全局","c++","了解","类似","是"," ","数据","三种","参数","—","清楚","共享","。","多个","已经","、","是否","知道","再","系统","大家","一种","运行","的","我们","通信","这","介绍","传输方式","常用","编程","中","机器人","在","本","字典","节"],"title":"参数","title_tokens":["参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_2","text":"比如在机器视觉识别的时候，有很多参数都会影响视觉识别的效果。 在NodeA相机驱动节点中，就需要考虑很多问题，相机连接到哪个usb端口，使用的图像分辨率是多少，曝光度和编码格式分别是什么，这些都可以通过参数设置，我们可以通过配置文件或者程序进行设置。 NodeB节点中也是一样，图像识别使用的阈值是多少，整个图像面积很大，那个部分是我们关注的核心区域，识别过程是否需要美颜等等，就像我们使用美颜相机一样，我们可以通过滑动条或者输入框设置很多参数，不同参数设置后，都会改变执行功能的一些效果。 这就是参数的作用。","text_tokens":["，","图像识别","通过","过程","和","到","驱动","曝光","nodea","时候","分别","参数","整个","识别","有","参数设置","是否","nodeb","滑动","改变","格式","的","我们","很多","使用","视觉","执行","辨率","在","输入框","不同","分辨","影响","美颜","区域","机器","usb","这些","可以","关注","是","都","文件","。","问题","相机","效果","那个","会","分辨率","配置","阈值","条","后","或者","进行","就是","多少","图像","功能","面积","哪个","像","核心","等等","作用","度","一样","一些","配置文件","考虑","连接","编码","这","中","很大","节点","什么","程序","部分","设置"," ","端口","输入","也","需要","就","比如"],"title":"通信模型","title_tokens":["模型","通信","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_3","text":"在ROS系统中，参数是以 全局字典 的形态存在的，什么叫字典？就像真实的字典一样，由名称和数值组成，也叫做键和值，合成 键值 。或者我们也可以理解为，就像编程中的参数一样，有一个参数名 ，然后跟一个等号，后边就是参数值了，在使用的时候，访问这个参数名即可。","text_tokens":["？","号","，","键值","理解","然后","这个","和","像","数值","访问","由","什么","叫","可以","ros","全局","真实","名","以","是","一样","跟","参数值"," ","了","时候","即可","参数","一个","。","叫做","有","系统","也","合成","存在","名称","组成","键和值","形态","后边","的","我们","使用","或者","为","等","编程","就","中","就是","在","字典"],"title":"全局字典","title_tokens":["全局","字典"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_4","text":"在ROS2中，参数的特性非常丰富，比如某一个节点共享了一个参数，其他节点都可以访问，如果某一个节点对参数进行了修改，其他节点也有办法立刻知道，从而获取最新的数值。这在 参数的高级编程 中，大家都可能会用到。","text_tokens":["，","从而","获取","其他","特性","访问","数值","节点","丰富","对","高级","某","用到","可以","都","了"," ","可能","共享","一个","参数","办法","。","ros2","有","知道","也","大家","会","如果","的","修改","这","进行","立刻","非常","中","比如","编程","在","最新"],"title":"可动态监控","title_tokens":["可","监控","动态"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_5","text":"在小海龟的例程中，仿真器也提供了不少参数，我们一起来通过这个例程，熟悉下参数的含义和命令行的使用方法。 启动两个终端，分别运行小海龟仿真器和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["，","控制","这个","终端","通过","命令行","例程","和","键盘","提供","：","node","节点","方法","小海","$","海龟","run","一","下"," ","了","分别","参数","。","key","ros2","两个","真器","命令","turtlesim","仿真器","turtle","仿真","也","小海龟","_","teleop","不少","运行","的","我们","启动","熟悉","使用","起来","中","含义","在"],"title":"案例一：小海龟例程中的参数","title_tokens":["小海","案例","的","海龟","例程","一","小海龟","：","中","参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_6","text":"当前系统中有哪些参数呢？我们可以启动一个终端，并使用如下命令查询： $ ros2 param list","text_tokens":["？","，","查询","终端","哪些","：","list","可以","$","当前","中有"," ","呢","一个","参数","并","ros2","命令","系统","启动","我们","使用","如下","param"],"title":"查看参数列表","title_tokens":["参数","查看","列表"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_7","text":"如果想要查询或者修改某个参数的值，可以在param命令后边跟get或者set子命令： $ ros2 param describe turtlesim background_b # 查看某个参数的描述信息 $ ros2 param get turtlesim background_b # 查询某个参数的值 $ ros2 param set turtlesim background_b 10 # 修改某个参数的值","text_tokens":["，","describe","查询","#","描述","：","get","可以","$","跟","想要"," ","参数","b","ros2","turtlesim","命令","background","查看","某个","_","10","值","如果","信息","后边","的","修改","子","或者","set","param","在"],"title":"参数查询与修改","title_tokens":["修改","参数","与","查询"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_8","text":"一个一个查询/修改参数太麻烦了，不如试一试参数文件，ROS中的参数文件使用yaml格式，可以在param命令后边跟dump子命令，将某个节点的参数都保存到文件中，或者通过load命令一次性加载某个参数文件中的所有内容： $ ros2 param dump turtlesim >> turtlesim.yaml # 将某个节点的参数保存到参数文件中 $ ros2 param load turtlesim turtlesim.yaml # 一次性加载某一个文件中的所有参数","text_tokens":["，","查询","通过","一次性","#","：","节点",".","内容","一次","到","某","可以","ros","$","跟","都","了","加载"," ","参数","一个","文件","load","试一试","麻烦","dump","ros2","/","命令","turtlesim","保存","所有","不如","某个",">","yaml","格式","将","太","后边","的","修改","子","使用","或者","中","param","在"],"title":"参数文件保存与加载","title_tokens":["保存","与","加载","参数","文件"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_9","text":"接下来就要开始写程序了，在程序中设置参数和读取参数都比较简单，一两句函数就可以实现，我们先来体验一下这几个函数的使用方法。","text_tokens":["，","和","比较简单","一下","接下","接下来","方法","几个","两句","一两","可以","函数","程序","来","设置","都","了","参数","先","。","读取","比较","开始","一两句","体验","实现","的","我们","这","使用","就要","写","下来","中","就","在","简单"],"title":"案例二：参数编程","title_tokens":["案例","编程","：","参数","二"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_10","text":"启动一个终端，先运行第一句指令，启动param_declare节点，终端中可以看到循环打印的日志信息，其中的“mbot”就是我们设置的一个参数值，参数名称是“robot_name”，通过命令行修改这个参数，看下终端中会发生什么？ $ ros2 run learning_parameter param_declare $ ros2 param set param_declare robot_name turtle","text_tokens":["打印","？","，","这个","终端","name","通过","命令行","数值","看","节点","指令","发生","什么","日志","可以","$","”","run","其中","是","下","设置","参数值"," ","一个","参数","先","mbot","declare","ros2","命令","learning","parameter","一句","turtle","_","名称","第一句","看到","会","信息","运行","启动","的","我们","修改","第一","robot","set","中","就是","param","循环","“"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_11","text":"我们来看下在代码中，如何声明、创建、修改一个参数的值。 learning_parameter/param_declare.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-创建、读取、修改参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 class ParameterNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . timer = self . create_timer ( 2 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . declare_parameter ( 'robot_name' , 'mbot' ) # 创建一个参数，并设置参数的默认值 def timer_callback ( self ): # 创建定时器周期执行的回调函数 robot_name_param = self . get_parameter ( 'robot_name' ) . get_parameter_value () . string_value # 从ROS2系统中读取参数的值 self . get_logger () . info ( 'Hello %s !' % robot_name_param ) # 输出日志信息，打印读取到的参数值 new_name_param = rclpy . parameter . Parameter ( 'robot_name' , # 重新将参数值设置为指定值 rclpy . Parameter . Type . STRING , 'mbot' ) all_new_parameters = [ new_name_param ] self . set_parameters ( all_new_parameters ) # 将重新创建的参数列表发送给ROS2系统 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ParameterNode ( \"param_declare\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , ], },","text_tokens":["scripts","new","，","spin","name","定时器","来看","logger","数值","node","如何","python3","说明","初始","包","到","函数","%","*","列表","加入","下","参数值","点","接口","参数","一个",",","import","create","并","parameter","编译","value",":","2","_","作者","库","=","@","退出","info","callback","的","我们","执行","'","]","set","如下","bin","打开","在","定时","打印","python","单位","s","[","发送给","class","日志","声明","等待","points","string","main","文件","。","declare","ros2","、","古月","{","self","args","系统","}","-","默认","!","hello","信息","送给","配置","entry","shutdown","后","进行","指定","选项","\"","功能","入口","：",".",")","输出","coding","回调","代码","关闭","销毁","初始化","timer","def","默认值","父类","居","parameters","编写","guyuehome","mbot","env","读取","none","learning","周期","parameternode","type","8","类","值","将","from","从","让","为","__","中","循环","(","对象","（","#","秒","节点","主","py","get","程序","创建","示例","rclpy","super","console","设置"," ","发送","）","com","www","/","知道","重新","all","utf","init","setup","需要","usr","修改","robot","完成","destroy","param"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_12","text":"参数大家已经会使用了，如何在机器人中应用呢？ 继续优化机器视觉的示例，物体识别对光线比较敏感，不同的环境大家使用的阈值也是不同的，每次在代码中修改阈值还挺麻烦，不如我们就把阈值提炼成参数，运行过程中就可以动态设置，不是大大提高了程序的易用性么？ 说干就干，我们先来看下效果如何，再看下代码中的变化。","text_tokens":["？","不同","，","敏感","环境","大大","每次","过程","来看","看","如何","机器","对","动态","把","代码","挺","可以","程序","变化","示例","物体","是","下","不是","设置"," ","了","呢","参数","还","先","。","麻烦","易用","识别","易用性","说干就干","已经","再","比较","不如","也","提高","效果","大家","优化","会","光线","运行","阈值","的","修改","我们","继续","成","大大提高","使用","视觉","提炼","么","应用","中","就","机器人","在"],"title":"案例三：机器视觉应用","title_tokens":["案例","三","视觉","：","应用","机器"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_13","text":"启动三个终端，分别运行： 相机驱动节点 视觉识别节点 修改红色阈值 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_parameter param_object_detect $ ros2 param set param_object_detect red_h_upper 180 在启动的视觉识别节点中，我们故意将视觉识别中红色阈值的上限设置为0，如果不修改参数，将无法实现目标识别。 为了便于调整阈值，我们在节点中将红色阈值的限位修改为了ROS参数，通过命令行修改该参数的值，就可以实现视觉识别啦。","text_tokens":["，","终端","通过","cam","命令行","上限","为了","：","便于","node","节点","限位","驱动","usb","可以","$","run","param","不","ros","调整","啦","设置"," ","分别","h","参数","。","目标","ros2","识别","exe","命令","parameter","三个","故意","红色","object","相机","_","0","实现","red","upper","值","将","如果","运行","阈值","启动","修改","detect","的","我们","无法","实现目标","中将","视觉","180","为","该","set","就","中","learning","在"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_14","text":"我们来看下在视觉识别的代码中，是如何通过参数来设置阈值的。 learning_parameter/param_object_detect.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-设置目标识别的颜色阈值参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） 'image_raw' , self . listener_callback , 10 ) self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . declare_parameter ( 'red_h_upper' , 0 ) # 创建一个参数，表示阈值上限 self . declare_parameter ( 'red_h_lower' , 0 ) # 创建一个参数，表示阈值下限 def object_detect ( self , image ): upper_red [ 0 ] = self . get_parameter ( 'red_h_upper' ) . get_parameter_value () . integer_value # 读取阈值上限的参数值 lower_red [ 0 ] = self . get_parameter ( 'red_h_lower' ) . get_parameter_value () . integer_value # 读取阈值下限的参数值 self . get_logger () . info ( 'Get Red H Upper: %d , Lower: %d ' % ( upper_red [ 0 ], lower_red [ 0 ])) # 通过日志打印读取到的参数值 hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , \"bgr8\" ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"param_object_detect\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , 'param_object_detect = learning_parameter.param_object_detect:main' , ], },","text_tokens":["scripts","，","spin","name","通过","for","和","1","显示","来看","logger","数值","50","node","如何","python3","说明","用于","初始","包","到","函数","cv","*","%","加入","bridge","表示","下","参数值","点","接口","转化成","参数","msg","一个",",","import","目标","create","识别","data","并","parameter","as","inrange","receiving","value","像素","编译",":","2","in","_","10","imgmsg","作者","库","=","@","d","info","图像处理","订阅","得到","callback","去除","+","退出","的","我们","frame","listener","使用","视觉","宽","'","]","如下","bin","打开","在","消息","<","raw","坐标","打印","python","者","y","[","下限","image","class","90","日志","np","color","255","范围","等待","来","points","是","已","retr","main","文件","。","declare","ros2","处理","类型","mask","、","古月","w","self","args","系统","长度","-","video","{","}","效果","red","!","信息","img","阈值","detect","配置","勾勒","shutdown","bgr","findcontours","互相","shape","后","entry","进行","imagesubscriber","选项","array","integer","numpy","\"","bgr8","图像","功能","苹果","面积","入口","：","进入","subscription",".",")","approx","输出","coding","检测","回调","代码","ros","hsv","化成","关闭","销毁","所在","contours","初始化","def","点画","父类","居","sub","h","一些","编写","guyuehome","env","模型","读取","none","learning","chain","8","与","二值化","提示","类","if","sensor","将","from","从","circle","中心","让","boundingrect","为","__","cvtcolor","高","中","轮廓","循环","continue","太小","(","上角","waitkey","对象","话题","（","xy","#","上限","队列","左上","转换","节点","150","主","list","py","msgs","get","噪声","bgr2hsv","程序","创建","drawcontours","示例","rclpy","super","名","及","console","设置"," ","x","opencv","）","to","com","www","/","转化","红色","int","128","知道","object","0","imshow","upper","计算","lower","出来","utf","init","setup","需要","usr","颜色","cv2","5","cnt","左上角","180","完成","cvbridge","destroy","param","hierarchy"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Parameters/Understanding-ROS2-Parameters.html","text_tokens":["html","docs","ros2","/","org","tutorials","ros","understanding","en","humble",":","-","parameters",".","https"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/","text":"分布式通信 智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统， 可以实现多计算平台上的任务分配。 分布式通信 什么叫分布式？ 之前我们也讲过，在ROS系统中，机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如这款机器人系统中，有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用 树莓派 作为控制器，主要实现传感器驱动和电机控制等功能，不过视觉处理和应用功能就不适合在树莓派里运行了，我们放在另外一个性能更强的 笔记本电脑 中，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个电脑之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过ROS系统都已经为我们设计好了，我们只需要在每一个电脑上配置好ROS环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下ROS分布式系统的魅力。 分布式网络搭建 除了我使用的笔记本电脑之外，另外一个计算平台我们选择了树莓派，模拟一个放置在机器人上的控制器。 树莓派配置 在开发之前，我们需要先配置好树莓派的环境，网上也有很多资料，大家都可以参考。 装系统 我们先要给树莓派装系统，这里我们选择的是 Ubuntu Mate 针对树莓派的镜像，下载镜像之后，烧写到树莓派的SD卡中就可以启动系统了。 Ubuntu MATE镜像下载链接： https://ubuntu-mate.org/download/ 安装ROS2 在安装好的Ubuntu Mate系统中，安装ROS2，和电脑端安装的流程一样。 编译代码 将我们课程的代码也下载到树莓派中，进行编译。 远程桌面 如果大家有显示器，可以直接在树莓派上连接键盘鼠标显示器使用，如果使用不方便的话，也可以在树莓派上配置好远程桌面，就可以通过网络访问树莓派的桌面系统了。 以上步骤的整体流程和电脑端操作基本一致，大家也可以参考如下链接配置树莓派： https://blog.csdn.net/qq_52785580/article/details/122599728 分布式数据传输 树莓派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 Attention 如使用虚拟机，请将虚拟机网络修改为 桥接模式 在树莓派端，使用如下命令启动一个发布者节点： $ ros2 run demo_nodes_cpp talker #树莓派端 接下来在电脑端，使用如下命令启动一个订阅者节点： $ ros2 run demo_nodes_py listener #PC端 神奇的事情就这样发生了，只要两个计算机安装好ROS2，并且处于同一网络中，他们就可以实现之前讲过的话题、服务、动作等通信了，感觉就像在一个电脑里一样。 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。 分布式网络分组 没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和树莓派端的.bashrc中加入这样一句配置，即可将两者分配到一个小组中： $ export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。 案例一：小海龟分布式控制 分布式通信网络似乎已经建立成功了，是否真有我们想的这么神奇，我们继续测试之前学习过的一些例程。 先来试试ROS中的经典案例——小海龟。 我们可以在电脑端启动小海龟仿真器，树莓派上启动键盘控制节点，或者反过来也可以，依然可以流畅的控制小海龟运动： $ ros2 run turtlesim turtlesim_node # PC端 $ ros2 run turtlesim turtle_teleop_key # 树莓派端 案例二：话题分布式通信 我们之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 先试试话题通信，树莓派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串： $ ros2 run learning_topic topic_helloworld_pub # 树莓派端 $ ros2 run learning_topic topic_helloworld_sub # PC端 案例三：服务分布式通信 话题没有问题，服务也不在话下。 我们电脑端运行服务器程序，树莓派端运行客户端程序，还是可以顺利实现加法求和功能： $ ros2 run learning_service service_adder_server # PC端 $ ros2 run learning_service service_adder_client 2 3 # 树莓派端 案例四：机器视觉分布式应用 以上这些功能还不够复杂？没问题，视觉识别的例程安排上。 接下来，我们将使用树莓派连接摄像头，模拟一个小型机器人，可以采集实时图像，然后再通过分布式网络，将图像发给电脑端的处理节点，识别图像中的红色物体： $ ros2 run usb_cam usb_cam_node_exe # 树莓派端 $ ros2 run learning_topic topic_webcam_sub # PC端 没有任何问题，视觉识别的效果如下。 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，ROS为分布式网络的搭建提供了非常友好的支持，我们几乎不需要任何配置，代码也不需要做任何修改， 只要使用ROS系统，一切都会变得如此轻松 。 参考链接 https://docs.ros.org/en/humble/Concepts/About-Domain-ID.html","text_tokens":["发给","建立","例程","上去","频繁","方法","到","一致","加入","下","选择","可能","先","一切","繁多","传感","turtlesim","如","attention",">","运行","无法","客户端程序","很多","继续","上","使用","而是","压力","？","针对","好","拆解","安装","看上去","html","这些","相互","发布者","来","基本一致","感觉","是","。","端","有点","之外","派装","装","系统","-","cpp","pub","监控","bashrc","进行","类似","控制","局域","打通","想","像","concepts","而言","讲过","服务","这种","一些","上边","下载","article","这里","务器","比较","请","笔记","体积","远程","大家","之一","这么","完全","连接","典型","支持","三","才能","作为","这样","摄像头","webcam","发布","什么","全都","笔记本","中有","数据","world","再","红色","魅力","52785580","过来","树莓","helloworld","，","适合","显示器","通过","显示","实际","消耗","node","接下来","的话","直接","驱动","案例","任务分配","我","pc","domain","任务","更强","则","有","2","小海龟","分布式","基本","订阅","网络","远程桌面","视觉","放","如下","采集","布式","变化","确保","demo","不同","者","传输","命令行","一下","blog","遇到","机器","复杂","算机","如此","方便","二","分布","多个","docs","两个","已经","一句","、","运动","客户","会","经典","另外","配置","主要","后","或者","起来","就是","放置","环境","成功","图像","功能","同一个","整体","：","访问","反过","带领","岂","顺利实现","export","代码","不","分组","桌面","分布式应用","org","turtle","同一","真有","以上","sd","中","搭建","试试","几乎","动作","除了","发生","csdn","字符","qq","en","位于","感器","—","小型","/","据传","teleop","你","nodes","参考","不在","3","先要","然后","摄像","和","实时","桥接","多","id","采用","了","https","一个","还","变得","识别","之后","是否",":","流畅","=","的","减轻","listener","之前","在","虚拟机","两者","轻松","求和","接下","局域网","加法","可以","run","步骤","都","分布式系统","只","计算能力","安排","处理","没","像头","各种","组成","用","效果","分配","hello","如果","信息","处于","派端","看上","client","键盘","较",".","一系","虚拟","用到","$","啦","给","key","友好","并且","只要","神奇","将","简而言之","your","个","烧写","电机","为","顺利","他们","流程","数据传输","提供","details","性能","叫","感受","海龟","事情"," ","即可","呢","控制器","学习","笔记本电脑","humble","里","实现","计算","计算机","通信","修改","传感器","server","完成","就","派里","下来","learning","还是","122599728","带来","不在话下","链接","之间","过","一","没有","不是","ubuntu","about","端的","依然","并","编译","出现","仿真器","毕竟","所","topic","互联","_","卡顿","似乎","字符串","启动","我们","应用","于是","net","此外","<","设计","反过来","cam","机制","一系列","服务器","由","做","小海","操作","usb","挺","经常","小组","物体","派","ros2","问题","情况","互通","系列","非常","卡中","不过","mate","小","款","ros","智能","一样","adder","编写","sub","不够","资料","真器","命令","平台","开发","download","课程","service","模式","放在","这","镜像","电脑","具体","话题","#","结构","节点","资源","网上","py","程序","希望","讲","任何","服务器程序","exe","模拟","也","每","测试","仿真","能力","局域网络","需要","原本","鼠标","四","等","框架","比如","客户端","机器人","talker"],"title":"分布式通信","title_tokens":["通信","分布式","分布","布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_1","text":"智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统， 可以实现多计算平台上的任务分配。","text_tokens":["？","，","拆解","功能","遇到","机器","到","岂","全都","可以","算机","这些","经常","布式","任务分配","多","智能","不是"," ","分布式系统","一个","计算能力","分布","不够","。","繁多","多个","处理","任务","、","出现","平台","系统","情况","分布式","卡顿","里","实现","能力","计算","分配","将","会","如果","计算机","运行","的","放在","减轻","这","上","等","中","压力","机器人","就是"],"title":"分布式通信","title_tokens":["通信","分布式","分布","布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_2","text":"什么叫分布式？ 之前我们也讲过，在ROS系统中，机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如这款机器人系统中，有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用 树莓派 作为控制器，主要实现传感器驱动和电机控制等功能，不过视觉处理和应用功能就不适合在树莓派里运行了，我们放在另外一个性能更强的 笔记本电脑 中，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个电脑之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过ROS系统都已经为我们设计好了，我们只需要在每一个电脑上配置好ROS环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下ROS分布式系统的魅力。","text_tokens":["树莓","，","适合","和","上去","消耗","接下来","到","之间","驱动","多","过","一","下","可能","采用","了","一个","还","传感","任务","更强","有","毕竟","分布式","运行","的","我们","减轻","上","视觉","之前","应用","放","压力","布式","于是","在","变化","此外","？","不同","设计","传输","好","看上去","由","机器","接下","做","复杂","这些","算机","可以","相互","挺","方便","是","都","只","分布式系统","派","分布","。","两个","处理","有点","已经","运动","系统","各种","组成","分配","监控","信息","另外","配置","主要","起来","非常","就是","环境","看上","控制","功能","不过","小","较","带领","款","ros","不","这种","上边","平台","比较","并且","开发","笔记","体积","远程","大家","之一","将","完全","放在","典型","电机","这","为","中","电脑","作为","结构","节点","资源","什么","性能","叫","感受","笔记本","位于","讲"," ","感器","数据","任何","控制器","笔记本电脑","也","每","魅力","实现","计算","计算机","需要","原本","通信","传感器","等","框架","就","比如","派里","机器人","下来"],"title":"分布式通信","title_tokens":["通信","分布式","分布","布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_3","text":"除了我使用的笔记本电脑之外，另外一个计算平台我们选择了树莓派，模拟一个放置在机器人上的控制器。","text_tokens":["树莓","，","控制","除了","机器","我","笔记本","选择","了","一个","派","控制器","。","在","之外","笔记本电脑","平台","模拟","笔记","计算","另外","的","我们","上","使用","机器人","放置","电脑"],"title":"分布式网络搭建","title_tokens":["网络","搭建","分布式","布式","分布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_4","text":"在开发之前，我们需要先配置好树莓派的环境，网上也有很多资料，大家都可以参考。","text_tokens":["树莓","环境","，","好","网上","可以","都","派","先","资料","。","有","也","开发","大家","需要","配置","的","我们","很多","参考","之前","在"],"title":"树莓派配置","title_tokens":["树莓","派","配置"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_5","text":"我们先要给树莓派装系统，这里我们选择的是 Ubuntu Mate 针对树莓派的镜像，下载镜像之后，烧写到树莓派的SD卡中就可以启动系统了。 Ubuntu MATE镜像下载链接： https://ubuntu-mate.org/download/","text_tokens":["树莓","针对","，","先要","卡中","mate","：",".","链接","到","可以","是","ubuntu","选择"," ","给","下载","了","派","这里","https","。","/","org","派装","之后","系统",":","-","download","的","我们","烧写","启动","sd","就","镜像"],"title":"装系统","title_tokens":["系统","装"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#ros2","text":"在安装好的Ubuntu Mate系统中，安装ROS2，和电脑端安装的流程一样。","text_tokens":["。","，","ros2","端","流程","的","好","和","安装","系统","一样","mate","中","ubuntu"," ","在","电脑"],"title":"安装ROS2","title_tokens":["安装","ros2"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_6","text":"将我们课程的代码也下载到树莓派中，进行编译。","text_tokens":["将","课程","到","树莓","，","。","代码","的","我们","编译","也","进行","中","下载","派"],"title":"编译代码","title_tokens":["编译","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_7","text":"如果大家有显示器，可以直接在树莓派上连接键盘鼠标显示器使用，如果使用不方便的话，也可以在树莓派上配置好远程桌面，就可以通过网络访问树莓派的桌面系统了。 以上步骤的整体流程和电脑端操作基本一致，大家也可以参考如下链接配置树莓派： https://blog.csdn.net/qq_52785580/article/details/122599728","text_tokens":["树莓","，","流程","122599728","显示器","好","通过","键盘","显示","和","整体","blog","：","访问","details",".","的话","链接","操作","直接","csdn","可以","一致","qq","不","方便","步骤","基本一致"," ","了","桌面","https","article","派","。","端","/","有","也","系统",":","基本","_","大家","远程","电脑","网络","如果","远程桌面","配置","连接","的","52785580","以上","上","鼠标","使用","参考","就","如下","在","net"],"title":"远程桌面","title_tokens":["桌面","远程","远程桌面"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_8","text":"树莓派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 Attention 如使用虚拟机，请将虚拟机网络修改为 桥接模式 在树莓派端，使用如下命令启动一个发布者节点： $ ros2 run demo_nodes_cpp talker #树莓派端 接下来在电脑端，使用如下命令启动一个订阅者节点： $ ros2 run demo_nodes_py listener #PC端 神奇的事情就这样发生了，只要两个计算机安装好ROS2，并且处于同一网络中，他们就可以实现之前讲过的话题、服务、动作等通信了，感觉就像在一个电脑里一样。 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。","text_tokens":["树莓","，","和","带来","接下来","到","直接","之间","桥接","了","一个","pc","并","如","所","attention","互联","_","订阅","网络","无法","的","我们","启动","listener","很多","而是","使用","之前","如下","确保","在","虚拟机","demo","？","者","好","命令行","安装","一下","局域网","接下","做","可以","算机","run","发布者","小组","感觉","是","都","派","。","ros2","两个","端","已经","、","问题","cpp","用","效果","会","如果","配置","后","处于","互通","派端","局域","打通","不过","同一个","像","：","而言","讲过","虚拟","$","不","服务","分组","一样","命令","平台","请","并且","只要","同一","神奇","将","简而言之","个","连接","模式","这","为","中","电脑","这样","他们","具体","发布","动作","话题","#","节点","发生","什么","py","希望","中有","事情"," ","呢","也","测试","里","实现","能力","计算","你","局域网络","计算机","需要","nodes","通信","修改","完成","等","下来","就","talker"],"title":"分布式数据传输","title_tokens":["传输","数据传输","据传","分布式","布式","数据","分布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_9","text":"没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和树莓派端的.bashrc中加入这样一句配置，即可将两者分配到一个小组中： $ export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。","text_tokens":["树莓","不同","，","两者","同一个","机制","和","提供","：",".","到","export","可以","算机","$","ros","小组","加入","分组","一样","id","这样","了","即可","端的","一个","派"," ","domain","。","ros2","没","一句","则","问题","_",">","同一","=","计算","分配","电脑","实现","将","your","如果","计算机","bashrc","配置","的","通信","我们","无法","才能","处于","就","中","在","类似","<"],"title":"分布式网络分组","title_tokens":["网络","分组","分布式","布式","分布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_10","text":"分布式通信网络似乎已经建立成功了，是否真有我们想的这么神奇，我们继续测试之前学习过的一些例程。 先来试试ROS中的经典案例——小海龟。 我们可以在电脑端启动小海龟仿真器，树莓派上启动键盘控制节点，或者反过来也可以，依然可以流畅的控制小海龟运动： $ ros2 run turtlesim turtlesim_node # PC端 $ ros2 run turtlesim turtle_teleop_key # 树莓派端","text_tokens":["树莓","，","试试","控制","想","成功","建立","反过来","例程","键盘","#","：","反过","node","节点","小海","案例","ros","海龟","可以","来","$","run","过","一些"," ","了","—","分布","先","派","。","依然","端","ros2","真器","turtlesim","pc","学习","已经","key","仿真器","是否","运动","turtle","仿真","也","测试","小海龟","分布式","_","似乎","流畅","teleop","神奇","电脑","网络","这么","经典","真有","的","通信","我们","继续","启动","上","或者","派端","之前","中","布式","在","过来"],"title":"案例一：小海龟分布式控制","title_tokens":["小海","控制","案例","海龟","一","小海龟","：","分布式","布式","分布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_11","text":"我们之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 先试试话题通信，树莓派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串： $ ros2 run learning_topic topic_helloworld_pub # 树莓派端 $ ros2 run learning_topic topic_helloworld_sub # PC端","text_tokens":["？","树莓","，","helloworld","试试","者","发布","话题","例程","#","：","直接","可以","代码","字符","发布者","不","$","run","作为","下","编写"," ","sub","呢","任何","派","先","world","pc","ros2","端","是否","情况","topic","_","pub","hello","电脑","订阅","字符串","的","我们","修改","通信","使用","派端","之前","learning","在"],"title":"案例二：话题分布式通信","title_tokens":["案例","通信","话题","：","分布式","布式","二","分布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_12","text":"话题没有问题，服务也不在话下。 我们电脑端运行服务器程序，树莓派端运行客户端程序，还是可以顺利实现加法求和功能： $ ros2 run learning_service service_adder_server # PC端 $ ros2 run learning_service service_adder_client 2 3 # 树莓派端","text_tokens":["树莓","，","client","话题","功能","#","求和","：","服务器","不在话下","顺利实现","加法","可以","$","程序","run","服务","没有","adder"," ","pc","。","服务器程序","端","ros2","务器","问题","也","2","_","实现","客户","运行","service","客户端程序","我们","server","派端","顺利","客户端","learning","还是","电脑","不在","3"],"title":"案例三：服务分布式通信","title_tokens":["案例","通信","服务","三","：","分布式","布式","分布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_13","text":"以上这些功能还不够复杂？没问题，视觉识别的例程安排上。 接下来，我们将使用树莓派连接摄像头，模拟一个小型机器人，可以采集实时图像，然后再通过分布式网络，将图像发给电脑端的处理节点，识别图像中的红色物体： $ ros2 run usb_cam usb_cam_node_exe # 树莓派端 $ ros2 run learning_topic topic_webcam_sub # PC端 没有任何问题，视觉识别的效果如下。 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，ROS为分布式网络的搭建提供了非常友好的支持，我们几乎不需要任何配置，代码也不需要做任何修改， 只要使用ROS系统，一切都会变得如此轻松 。","text_tokens":["树莓","，","然后","发给","通过","摄像","例程","频繁","实际","node","实时","接下来","方法","没有","了","端的","一个","还","一切","pc","变得","识别","topic","分布式","_","网络","的","我们","上","使用","视觉","如下","采集","布式","在","？","好","cam","轻松","一系列","接下","机器","做","复杂","usb","这些","可以","run","如此","物体","都","派","分布","安排","。","ros2","处理","没","端","像头","问题","系统","效果","会","配置","派端","系列","非常","类似","图像","功能","：","机器人","一系","用到","代码","$","ros","不","啦","sub","不够","友好","开发","只要","将","连接","以上","支持","为","中","电脑","摄像头","搭建","webcam","几乎","#","提供","节点"," ","任何","小型","exe","再","模拟","红色","也","测试","需要","修改","下来","learning"],"title":"案例四：机器视觉分布式应用","title_tokens":["案例","四","视觉","：","应用","分布式","布式","机器","分布式应用","分布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_14","text":"https://docs.ros.org/en/humble/Concepts/About-Domain-ID.html","text_tokens":["domain","html","docs","/","org","ros","en","humble",":","-","id","concepts","about",".","https"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2_%E6%A6%82%E5%BF%B5%E6%80%BB%E8%A7%88/","text":"从本节开始，我们将进入第二个篇章，以ROS2的核心概念为线索，详细讲解ROS2的应用开发方法。","text_tokens":["概念","，","第二","开发方法","讲解","核心","进入","方法","以","从本节","线索","二个","。","ros2","开始","开发","本节","将","第二个","篇章","的","我们","为","详细","应用"],"title":"概念总览","title_tokens":["概念","总览"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/","text":"Launch：多节点启动与配置脚本 到目前为止，每当我们运行一个ROS节点，都需要打开一个新的终端运行一个命令。机器人系统中节点很多，每次都这样启动好麻烦呀。有没有一种方式可以一次性启动所有节点呢？答案当然是肯定的，那就是 Launch启动文件 ，它是ROS系统中多节点启动与配置的一种脚本。 Launch文件 这是一个完整的Launch文件，乍看上去，好像Python代码呀，没错， ROS2中的Launch文件就是基于Python描述的 。 Launch的核心目的是 启动节点 ，我们在命令行中输入的各种参数，在Launch文件中，通过类似这样的很多代码模版，也可以进行配置，甚至还可以使用Python原有的编程功能，大大丰富了启动过程中的多样化配置。 Launch文件在ROS系统中出现的频次相当之高，它就像粘合剂一样，可以自由组装和配置各个节点，那如何编写或者阅读一个Launch文件呢，我们通过一系列例程带领大家来了解。 多节点启动 先来看看如何启动多个节点。 运行效果 启动终端，使用ros2中的launch命令来启动第一个launch文件示例： $ ros2 launch learning_launch simple.launch.py 运行成功后，就可以在终端中看到发布者和订阅者两个节点的日志信息啦。 文件解析 这两个节点是如何启动的呢？我们来分析下这个launch文件。 learning_launch/simple.launch.py from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'learning_topic' , # 节点所在的功能包 executable = 'topic_helloworld_pub' , # 节点的可执行文件 ), Node ( # 配置一个节点的启动 package = 'learning_topic' , # 节点所在的功能包 executable = 'topic_helloworld_sub' , # 节点的可执行文件名 ), ]) 命令行参数配置 我们使用ros2命令在终端中启动节点时，还可以在命令后配置一些传入程序的参数，使用launch文件一样可以做到。 运行效果 比如我们想要运行一个Rviz可视化上位机，并且加载某一个配置文件，使用命令行的话，是这样的： $ ros2 run rviz2 rviz2 -d <PACKAGE-PATH>/rviz/turtle_rviz.rviz 命令后边还得跟一长串配置文件的路径，如果放在launch文件里，启动就优雅很多了： $ ros2 launch learning_launch rviz.launch.py 文件解析 命令行后边的参数是如何通过launch传入节点的呢？来看下这个launch文件。 learning_launch/rviz.launch.py import os from ament_index_python.packages import get_package_share_directory # 查询功能包路径的方法 from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 rviz_config = os . path . join ( # 找到配置文件的完整路径 get_package_share_directory ( 'learning_launch' ), 'rviz' , 'turtle_rviz.rviz' ) return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'rviz2' , # 节点所在的功能包 executable = 'rviz2' , # 节点的可执行文件名 name = 'rviz2' , # 对节点重新命名 arguments = [ '-d' , rviz_config ] # 加载命令行参数 ) ]) 资源重映射 ROS社区中的资源非常多，当我们使用别人代码的时候，经常会发现通信的话题名称不太符合我们的要求，能否对类似的资源重新命名呢？ 为了提高软件的复用性，ROS提供了资源重映射的机制，可以帮助我们解决类似的问题。 运行效果 启动一个终端，运行如下例程，很快会看到出现了两个小海龟仿真器界面；再打开一个终端，发布如下话题，让海龟1动起来，海龟2也会一起运动： $ ros2 launch learning_launch rviz.launch.py $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\" 文件解析 为什么两个海龟都会动呢？这里要用到turtlesim功能包里另外一个节点，叫做mimic，它的功能是订阅某一个海龟的Pose位置，通过计算，变换成一个同样运动的速度指令，发布出去。 至于mimic节点订阅或者发布的话题名叫什么呢？我们就可以通过重映射修改成对应任意海龟的名字。 learning_launch/remapping.launch.py from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 namespace = 'turtlesim1' , # 节点所在的命名空间 executable = 'turtlesim_node' , # 节点的可执行文件名 name = 'sim' # 对节点重新命名 ), Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 namespace = 'turtlesim2' , # 节点所在的命名空间 executable = 'turtlesim_node' , # 节点的可执行文件名 name = 'sim' # 对节点重新命名 ), Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 executable = 'mimic' , # 节点的可执行文件名 name = 'mimic' , # 对节点重新命名 remappings = [ # 资源重映射列表 ( '/input/pose' , '/turtlesim1/turtle1/pose' ), # 将/input/pose话题名修改为/turtlesim1/turtle1/pose ( '/output/cmd_vel' , '/turtlesim2/turtle1/cmd_vel' ), # 将/output/cmd_vel话题名修改为/turtlesim2/turtle1/cmd_vel ] ) ]) ROS参数设置 ROS系统中的参数，也可以在Launch文件中设置。 运行效果 启动一个终端，运行如下命令： $ ros2 launch learning_launch parameters.launch.py 在启动的海龟仿真器中，我们看到背景颜色被改变了，这个颜色参数的设置就是在launch文件中完成的。 文件解析 我们看下在launch文件中如何来设置参数的。 learning_launch/parameters.launch.py from launch import LaunchDescription # launch文件的描述类 from launch.actions import DeclareLaunchArgument # 声明launch文件内使用的Argument类 from launch.substitutions import LaunchConfiguration , TextSubstitution from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 background_r_launch_arg = DeclareLaunchArgument ( 'background_r' , default_value = TextSubstitution ( text = '0' ) # 创建一个Launch文件内参数（arg）background_r ) background_g_launch_arg = DeclareLaunchArgument ( 'background_g' , default_value = TextSubstitution ( text = '84' ) # 创建一个Launch文件内参数（arg）background_g ) background_b_launch_arg = DeclareLaunchArgument ( 'background_b' , default_value = TextSubstitution ( text = '122' ) # 创建一个Launch文件内参数（arg）background_b ) return LaunchDescription ([ # 返回launch文件的描述信息 background_r_launch_arg , # 调用以上创建的参数（arg） background_g_launch_arg , background_b_launch_arg , Node ( # 配置一个节点的启动 package = 'turtlesim' , executable = 'turtlesim_node' , # 节点所在的功能包 name = 'sim' , # 对节点重新命名 parameters = [{ # ROS参数列表 'background_r' : LaunchConfiguration ( 'background_r' ), # 创建参数background_r 'background_g' : LaunchConfiguration ( 'background_g' ), # 创建参数background_g 'background_b' : LaunchConfiguration ( 'background_b' ), # 创建参数background_b }] ), ]) Attention launch文件中出现的argument和parameter，虽都译为“参数”，但含义不同： - argument：仅限launch文件内部使用，方便在launch中调用某些数值； - parameter：ROS系统的参数，方便在节点见使用某些数值。 加载参数文件 以上例程我们在launch文件中一个一个的设置参数，略显麻烦，当参数比较多的时候，建议使用参数文件进行加载。 learning_launch/parameters_yaml.launch.py import os from ament_index_python.packages import get_package_share_directory # 查询功能包路径的方法 from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 config = os . path . join ( # 找到参数文件的完整路径 get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 executable = 'turtlesim_node' , # 节点的可执行文件名 namespace = 'turtlesim2' , # 节点所在的命名空间 name = 'sim' , # 对节点重新命名 parameters = [ config ] # 加载参数文件 ) ]) Launch文件包含 在复杂的机器人系统中，launch文件也会有很多，此时我们可以使用类似编程中的include机制，让launch文件互相包含。 文件解析 learning_launch/namespaces.launch.py import os from ament_index_python.packages import get_package_share_directory # 查询功能包路径的方法 from launch import LaunchDescription # launch文件的描述类 from launch.actions import IncludeLaunchDescription # 节点启动的描述类 from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.actions import GroupAction # launch文件中的执行动作 from launch_ros.actions import PushRosNamespace # ROS命名空间配置 def generate_launch_description (): # 自动生成launch文件的函数 parameter_yaml = IncludeLaunchDescription ( # 包含指定路径下的另外一个launch文件 PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'learning_launch' ), 'launch' ), '/parameters_nonamespace.launch.py' ]) ) parameter_yaml_with_namespace = GroupAction ( # 对指定launch文件中启动的功能加上命名空间 actions = [ PushRosNamespace ( 'turtlesim2' ), parameter_yaml ] ) return LaunchDescription ([ # 返回launch文件的描述信息 parameter_yaml_with_namespace ]) 功能包编译配置 ... data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( 'share' , package_name , 'launch' ), glob ( os . path . join ( 'launch' , '*.launch.py' ))), ( os . path . join ( 'share' , package_name , 'config' ), glob ( os . path . join ( 'config' , '*.*' ))), ( os . path . join ( 'share' , package_name , 'rviz' ), glob ( os . path . join ( 'rviz' , '*.*' ))), ], ... 参考链接 https://docs.ros.org/en/humble/Tutorials/Launch/Launch-Main.html https://docs.ros.org/en/humble/Tutorials/Launch/Using-ROS2-Launch-For-Large-Projects.html","text_tokens":["终端","会动","例程","上去","某些","数值","丰富","cmd","namespace","方法","到","executable","函数","见","angular","下","传入","时候","参数","先","一长串","turtlesim","parameter","value","解决","attention",">","join","运行","很多","优雅","使用","...","有没有","执行","背景","“","？","位置","名叫","python","好","config","看上去","pythonlaunchdescriptionsource","html","发布者","来","是","b","。","前为","系统","-","projects","pub","yaml","呀","同样","进行","rviz2","类似","twist","很快","为止","像","核心","至于","一次","geometry","def","一些","这里","tutorials","性","行文","比较","declarelaunchargument","原有","名称","大家","turtlesim1","from","1.8","第一","此时","这样","目前为止","这个","看看","发布","找到","帮助","符合","2.0","什么","get","x","粘合剂","完整","再","加上","using","颜色","rviz","目前","helloworld","，","查询","name","通过","过程","node","如何","0.0","simple","的话","界面","上位","略显","index","加载",",","textsubstitution","data","groupaction","参数设置","有","input","2","小海龟","改变","launch","订阅","g","--","]","如下","不同","者","命令行","之高","y","机器","能否","复杂","声明","方便","多样","多个","docs","两个","运动","includelaunchdescription","}","arguments","合剂","launchdescription","会","另外","配置","后","中多","或者","起来","substitutions","就是","含义","122","返回","成功","功能","为了","阅读","：","带领",")","代码","被","所在","跟","output","argument","path","虽","org","turtle","没错","与","large","description","一种","后边","让","以上","中","turtle1","不太","生成","动作","pushrosnamespace","可视","arg","对","相当","msgs","某","z","en","基于","nonamespace","组装","sources","路径","新","/","remapping","解析","重","重新","分析","出去","参考","粘合","描述","和","1","来看","长串","*","rate","多","列表","share","vel","重新命名","了","https","一个","还","msg","import","background","要求",":","directory","=","甚至","的","包含","发现","编程","'","软件","时","在","复用","[","得","可以","run","看下","都","自动","任意","{","各种","packages","效果","84","信息","如果","当","每次","指定","大大","看上","要","return","一次性","那","机",".","一系","模版","用到","$","啦","linear","parameters","好像","乍","并且","resource","提高","glob","将","为","turtlesim2","r","mimic","速度","它","目的","提供","空间","海龟","脚本","答案","示例","名","include","想要","设置"," ","呢","叫做","humble","仅限","输入","0","里","看到","计算","通信","成","修改","内部","当然","完成","但","就","learning","名字","for","链接","包","一起","第一个","没有","pose","这是","编译","出现","所有","仿真器","频次","topic","_","d","+","做到","启动","我们","打开","社区","<","xml","机制","；","一系列","launchconfiguration","映射","小海","日志","”","经常","with","文件","main","麻烦","ros2","自由","actions","问题","译","建议","default","互相","text","系列","sim","非常","\"","各个","每当","ros","命名","一样","编写","sub","为什么","配置文件","对应","真器","命令","内","调用","类","变换","放在","这","(","generate","话题","（","#","files","方式","节点","指令","资源","动","py","程序","ament","创建","别人","namespaces","remappings","了解","可执行文件","）","可视化","package","也","仿真","需要","肯定","多样化","比如","机器人","os"],"title":"Launch","title_tokens":["launch"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch","text":"到目前为止，每当我们运行一个ROS节点，都需要打开一个新的终端运行一个命令。机器人系统中节点很多，每次都这样启动好麻烦呀。有没有一种方式可以一次性启动所有节点呢？答案当然是肯定的，那就是 Launch启动文件 ，它是ROS系统中多节点启动与配置的一种脚本。","text_tokens":["目前为止","？","它","，","终端","好","一次性","为止","方式","那","节点","机器","机器人","一次","到","可以","每当","ros","脚本","答案","是","没有","都"," ","呢","一个","文件","。","麻烦","新","命令","前为","所有","与","系统","launch","运行","需要","一种","配置","的","我们","很多","启动","呀","肯定","当然","有没有","中多","中","目前","打开","就是","每次","这样"],"title":"Launch：多节点启动与配置脚本","title_tokens":["launch","配置","启动","脚本","多","与","：","节点"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch_1","text":"这是一个完整的Launch文件，乍看上去，好像Python代码呀，没错， ROS2中的Launch文件就是基于Python描述的 。 Launch的核心目的是 启动节点 ，我们在命令行中输入的各种参数，在Launch文件中，通过类似这样的很多代码模版，也可以进行配置，甚至还可以使用Python原有的编程功能，大大丰富了启动过程中的多样化配置。 Launch文件在ROS系统中出现的频次相当之高，它就像粘合剂一样，可以自由组装和配置各个节点，那如何编写或者阅读一个Launch文件呢，我们通过一系列例程带领大家来了解。","text_tokens":["粘合","，","通过","过程","例程","上去","描述","和","如何","丰富","了","一个","参数","还","这是","出现","频次","甚至","launch","的","启动","我们","很多","使用","编程","在","python","命令行","之高","一系列","看上去","可以","来","多样","是","文件","。","ros2","自由","系统","各种","合剂","配置","呀","或者","进行","系列","就是","类似","大大","看上","功能","阅读","像","核心","那","带领","一系","模版","各个","代码","ros","一样","编写","好像","命令","没错","乍","原有","大家","中","这样","它","目的","节点","相当","基于","了解","组装"," ","呢","粘合剂","完整","输入","也","就","多样化"],"title":"Launch文件","title_tokens":["launch","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_1","text":"先来看看如何启动多个节点。","text_tokens":["。","多个","看看","启动","来","节点","如何","先"],"title":"多节点启动","title_tokens":["启动","多","节点"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_2","text":"启动终端，使用ros2中的launch命令来启动第一个launch文件示例： $ ros2 launch learning_launch simple.launch.py 运行成功后，就可以在终端中看到发布者和订阅者两个节点的日志信息啦。","text_tokens":["，","者","终端","成功","发布","和","：","节点",".","simple","py","日志","可以","$","发布者","来","第一个","示例","啦"," ","一个","文件","。","ros2","两个","命令","_","看到","launch","订阅","信息","运行","启动","的","使用","第一","后","就","中","learning","在"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_3","text":"这两个节点是如何启动的呢？我们来分析下这个launch文件。 learning_launch/simple.launch.py from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'learning_topic' , # 节点所在的功能包 executable = 'topic_helloworld_pub' , # 节点的可执行文件 ), Node ( # 配置一个节点的启动 package = 'learning_topic' , # 节点所在的功能包 executable = 'topic_helloworld_sub' , # 节点的可执行文件名 ), ])","text_tokens":["？","helloworld","返回","这个","生成","return","generate","功能","#","描述","[","node","节点","如何",".","simple",")","py","包","executable","ros","函数","来","所在","名","是","def","下"," ","可执行文件","sub","呢","一个","文件","自动","import","。",",","两个","/","package","行文","actions",":","分析","topic","_","pub","类","launchdescription","description","=","launch","信息","from","配置","启动","的","我们","这","执行","'","]","learning","("],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_4","text":"我们使用ros2命令在终端中启动节点时，还可以在命令后配置一些传入程序的参数，使用launch文件一样可以做到。","text_tokens":["，","终端","节点","可以","程序","一样","传入","一些","参数","还","文件","。","ros2","命令","launch","做到","配置","启动","我们","的","使用","后","中","时","在"],"title":"命令行参数配置","title_tokens":["命令行","参数","命令","配置"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_5","text":"比如我们想要运行一个Rviz可视化上位机，并且加载某一个配置文件，使用命令行的话，是这样的： $ ros2 run rviz2 rviz2 -d <PACKAGE-PATH>/rviz/turtle_rviz.rviz 命令后边还得跟一长串配置文件的路径，如果放在launch文件里，启动就优雅很多了： $ ros2 launch learning_launch rviz.launch.py","text_tokens":["，","命令行","：","机","可视",".","的话","得","py","长串","上位","某","$","run","是","跟","想要"," ","了","加载","一个","配置文件","文件","还","一长串","路径","ros2","path","/","命令","可视化","package","turtle","-","并且","_","里",">","d","launch","如果","运行","配置","的","我们","rviz","后边","放在","启动","使用","优雅","很多","就","比如","rviz2","learning","这样","<"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_6","text":"命令行后边的参数是如何通过launch传入节点的呢？来看下这个launch文件。 learning_launch/rviz.launch.py import os from ament_index_python.packages import get_package_share_directory # 查询功能包路径的方法 from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 rviz_config = os . path . join ( # 找到配置文件的完整路径 get_package_share_directory ( 'learning_launch' ), 'rviz' , 'turtle_rviz.rviz' ) return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'rviz2' , # 节点所在的功能包 executable = 'rviz2' , # 节点的可执行文件名 name = 'rviz2' , # 对节点重新命名 arguments = [ '-d' , rviz_config ] # 加载命令行参数 ) ])","text_tokens":["查询","name","通过","描述","来看","node","如何","方法","包","executable","函数","share","下","传入","重新命名","index","加载","参数","一个",",","import",":","directory","_","=","join","d","launch","的","启动","执行","'","]","？","python","命令行","config","[","是","文件","自动","。","actions","-","arguments","packages","launchdescription","信息","配置","rviz2","返回","return","功能",".",")","ros","命名","所在","def","配置文件","path","命令","turtle","行文","类","description","from","后边","(","这个","生成","找到","generate","#","节点","对","py","get","ament","名"," ","可执行文件","呢","路径","/","package","完整","重新","rviz","learning","os"],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_7","text":"ROS社区中的资源非常多，当我们使用别人代码的时候，经常会发现通信的话题名称不太符合我们的要求，能否对类似的资源重新命名呢？ 为了提高软件的复用性，ROS提供了资源重映射的机制，可以帮助我们解决类似的问题。","text_tokens":["？","，","不太","帮助","话题","机制","为了","提供","符合","对","资源","映射","能否","代码","ros","命名","经常","可以","多","别人","时候","重新命名"," ","了","呢","。","重","性","问题","要求","重新","复用","解决","名称","提高","会","当","的","我们","通信","发现","使用","软件","非常","中","社区","类似"],"title":"资源重映射","title_tokens":["重","资源","映射"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_8","text":"启动一个终端，运行如下例程，很快会看到出现了两个小海龟仿真器界面；再打开一个终端，发布如下话题，让海龟1动起来，海龟2也会一起运动： $ ros2 launch learning_launch rviz.launch.py $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\"","text_tokens":["，","很快","终端","发布","\"","话题","例程","1","y","；","：",".","2.0","cmd","0.0","动","小海","界面","py","msgs","z","$","海龟","一起","rate","geometry","angular","linear","vel","x"," ","了","一个","msg",",","ros2","两个","真器","/","learning","出现","仿真器","再","运动","{","仿真","2","也","小海龟","topic",":","_","pub","}","看到","launch","会","运行","启动","1.8","rviz","让","--","起来","如下","打开","turtle1","twist"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_9","text":"为什么两个海龟都会动呢？这里要用到turtlesim功能包里另外一个节点，叫做mimic，它的功能是订阅某一个海龟的Pose位置，通过计算，变换成一个同样运动的速度指令，发布出去。 至于mimic节点订阅或者发布的话题名叫什么呢？我们就可以通过重映射修改成对应任意海龟的名字。 learning_launch/remapping.launch.py from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 namespace = 'turtlesim1' , # 节点所在的命名空间 executable = 'turtlesim_node' , # 节点的可执行文件名 name = 'sim' # 对节点重新命名 ), Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 namespace = 'turtlesim2' , # 节点所在的命名空间 executable = 'turtlesim_node' , # 节点的可执行文件名 name = 'sim' # 对节点重新命名 ), Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 executable = 'mimic' , # 节点的可执行文件名 name = 'mimic' , # 对节点重新命名 remappings = [ # 资源重映射列表 ( '/input/pose' , '/turtlesim1/turtle1/pose' ), # 将/input/pose话题名修改为/turtlesim1/turtle1/pose ( '/output/cmd_vel' , '/turtlesim2/turtle1/cmd_vel' ), # 将/output/cmd_vel话题名修改为/turtlesim2/turtle1/cmd_vel ] ) ])","text_tokens":["，","会动","通过","name","描述","node","cmd","namespace","包","executable","函数","列表","vel","重新命名","pose","一个",",","import","turtlesim",":","input","_","=","订阅","launch","的","我们","启动","执行","'","]","？","位置","名叫","[","映射","可以","是","都","文件","自动","。","两个","任意","运动","actions","launchdescription","信息","另外","配置","同样","或者","sim","返回","要","return","功能","至于",".",")","用到","ros","命名","所在","def","output","为什么","对应","这里","行文","类","description","turtlesim1","变换","将","from","为","turtlesim2","turtle1","(","mimic","速度","它","发布","生成","话题","generate","#","节点","指令","对","资源","什么","py","某","空间","海龟","名","remappings"," ","可执行文件","呢","/","remapping","叫做","package","重","重新","里","计算","修改","成","出去","就","learning","名字"],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#ros","text":"ROS系统中的参数，也可以在Launch文件中设置。","text_tokens":["launch","。","，","可以","ros","的","系统","也","中","设置","在","参数","文件"],"title":"ROS参数设置","title_tokens":["ros","参数设置","参数","设置"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_10","text":"启动一个终端，运行如下命令： $ ros2 launch learning_launch parameters.launch.py 在启动的海龟仿真器中，我们看到背景颜色被改变了，这个颜色参数的设置就是在launch文件中完成的。","text_tokens":["，","这个","终端","：",".","背景","py","被","$","海龟","parameters"," ","了","设置","一个","参数","文件","。","ros2","真器","命令","仿真器","仿真","_","看到","改变","launch","运行","颜色","启动","的","我们","完成","如下","中","就是","learning","在"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_11","text":"我们看下在launch文件中如何来设置参数的。 learning_launch/parameters.launch.py from launch import LaunchDescription # launch文件的描述类 from launch.actions import DeclareLaunchArgument # 声明launch文件内使用的Argument类 from launch.substitutions import LaunchConfiguration , TextSubstitution from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 background_r_launch_arg = DeclareLaunchArgument ( 'background_r' , default_value = TextSubstitution ( text = '0' ) # 创建一个Launch文件内参数（arg）background_r ) background_g_launch_arg = DeclareLaunchArgument ( 'background_g' , default_value = TextSubstitution ( text = '84' ) # 创建一个Launch文件内参数（arg）background_g ) background_b_launch_arg = DeclareLaunchArgument ( 'background_b' , default_value = TextSubstitution ( text = '122' ) # 创建一个Launch文件内参数（arg）background_b ) return LaunchDescription ([ # 返回launch文件的描述信息 background_r_launch_arg , # 调用以上创建的参数（arg） background_g_launch_arg , background_b_launch_arg , Node ( # 配置一个节点的启动 package = 'turtlesim' , executable = 'turtlesim_node' , # 节点所在的功能包 name = 'sim' , # 对节点重新命名 parameters = [{ # ROS参数列表 'background_r' : LaunchConfiguration ( 'background_r' ), # 创建参数background_r 'background_g' : LaunchConfiguration ( 'background_g' ), # 创建参数background_g 'background_b' : LaunchConfiguration ( 'background_b' ), # 创建参数background_b }] ), ]) Attention launch文件中出现的argument和parameter，虽都译为“参数”，但含义不同： - argument：仅限launch文件内部使用，方便在launch中调用某些数值； - parameter：ROS系统的参数，方便在节点见使用某些数值。","text_tokens":["，","name","某些","描述","和","数值","node","如何","包","executable","函数","见","列表","重新命名","参数","一个",",","import","textsubstitution","turtlesim","parameter","background","出现","value",":","attention","_","=","launch","的","我们","启动","g","使用","'","]","在","“","不同","[","；","launchconfiguration","声明","看下","”","来","方便","都","b","文件","自动","。","{","actions","}","系统","-","译","launchdescription","84","信息","配置","default","text","substitutions","sim","含义","122","返回","return","功能","：",".",")","ros","命名","所在","def","parameters","argument","虽","内","调用","declarelaunchargument","类","description","from","以上","为","中","r","(","生成","generate","（","#","节点","arg","对","py","创建","设置"," ","）","/","package","仅限","重新","0","内部","但","learning"],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_12","text":"以上例程我们在launch文件中一个一个的设置参数，略显麻烦，当参数比较多的时候，建议使用参数文件进行加载。 learning_launch/parameters_yaml.launch.py import os from ament_index_python.packages import get_package_share_directory # 查询功能包路径的方法 from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 config = os . path . join ( # 找到参数文件的完整路径 get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 executable = 'turtlesim_node' , # 节点的可执行文件名 namespace = 'turtlesim2' , # 节点所在的命名空间 name = 'sim' , # 对节点重新命名 parameters = [ config ] # 加载参数文件 ) ])","text_tokens":["，","查询","name","例程","描述","node","namespace","方法","包","略显","executable","函数","多","share","时候","重新命名","index","加载","参数","一个",",","import","turtlesim",":","directory","_","=","join","launch","的","我们","启动","使用","执行","'","]","在","python","config","[","文件","自动","。","麻烦","actions","packages","launchdescription","yaml","信息","当","配置","建议","进行","sim","返回","return","功能",".",")","ros","命名","所在","def","parameters","path","比较","行文","类","description","from","以上","turtlesim2","中","(","生成","找到","generate","#","节点","对","py","get","空间","ament","名","设置"," ","可执行文件","路径","/","package","完整","重新","learning","os"],"title":"加载参数文件","title_tokens":["加载","参数","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch_2","text":"在复杂的机器人系统中，launch文件也会有很多，此时我们可以使用类似编程中的include机制，让launch文件互相包含。","text_tokens":["，","机制","机器","机器人","复杂","可以","include","文件","。","有","系统","也","launch","会","的","我们","很多","让","包含","使用","互相","编程","中","此时","在","类似"],"title":"Launch文件包含","title_tokens":["launch","包含","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_13","text":"learning_launch/namespaces.launch.py import os from ament_index_python.packages import get_package_share_directory # 查询功能包路径的方法 from launch import LaunchDescription # launch文件的描述类 from launch.actions import IncludeLaunchDescription # 节点启动的描述类 from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.actions import GroupAction # launch文件中的执行动作 from launch_ros.actions import PushRosNamespace # ROS命名空间配置 def generate_launch_description (): # 自动生成launch文件的函数 parameter_yaml = IncludeLaunchDescription ( # 包含指定路径下的另外一个launch文件 PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'learning_launch' ), 'launch' ), '/parameters_nonamespace.launch.py' ]) ) parameter_yaml_with_namespace = GroupAction ( # 对指定launch文件中启动的功能加上命名空间 actions = [ PushRosNamespace ( 'turtlesim2' ), parameter_yaml ] ) return LaunchDescription ([ # 返回launch文件的描述信息 parameter_yaml_with_namespace ])","text_tokens":["查询","描述","namespace","方法","包","函数","share","下","index","一个",",","import","groupaction","parameter",":","directory","_","=","join","launch","的","启动","包含","执行","'","]","python","[","pythonlaunchdescriptionsource","with","文件","自动","includelaunchdescription","actions","packages","launchdescription","yaml","信息","另外","配置","指定","返回","return","功能",".",")","ros","命名","def","parameters","path","类","description","from","turtlesim2","中","(","动作","生成","generate","#","pushrosnamespace","节点","对","py","get","空间","ament","namespaces","nonamespace"," ","sources","路径","/","package","加上","learning","os"],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_14","text":"... data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( 'share' , package_name , 'launch' ), glob ( os . path . join ( 'launch' , '*.launch.py' ))), ( os . path . join ( 'share' , package_name , 'config' ), glob ( os . path . join ( 'config' , '*.*' ))), ( os . path . join ( 'share' , package_name , 'rviz' ), glob ( os . path . join ( 'rviz' , '*.*' ))), ], ...","text_tokens":["xml","name","config","[","files",".",")","py","ament","*","share"," ","index",",","data","path","/","package","resource","_","packages","glob","=","+","join","launch","rviz","...","'","]","os","("],"title":"功能包编译配置","title_tokens":["包","编译","功能","配置"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Launch/Launch-Main.html https://docs.ros.org/en/humble/Tutorials/Launch/Using-ROS2-Launch-For-Large-Projects.html","text_tokens":["for",".","html","ros","en"," ","https","main","docs","ros2","/","org","tutorials","humble",":","-","projects","large","launch","using"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/","text":"TF：机器人坐标系管理神器 坐标系是我们非常熟悉的一个概念，也是机器人学中的重要基础，在一个完整的机器人系统中，会存在很多坐标系，这些坐标系之间的位置关系该如何管理？ ROS给我们提供了一个坐标系的管理神器—— TF 。 机器人中的坐标系 机器人中都有哪些坐标系呢？ 比如在机械臂形态的机器人中，机器人安装的位置叫做 基坐标系 Base Frame，机器人安装位置在外部环境下的参考系叫做 世界坐标系 World Frame，机器人末端夹爪的位置叫做 工具坐标系 ，外部被操作物体的位置叫做 工件坐标系 ，在机械臂抓取外部物体的过程中，这些坐标系之间的关系也在跟随变化。 在移动机器人系统中，坐标系一样至关重要，比如一个移动机器人的中心点是 基坐标系 Base Link，雷达所在的位置叫做 雷达坐标系 laser link，机器人要移动，里程计会累积位置，这个位置的参考系叫做 里程计坐标系 odom，里程计又会有累积误差和漂移，绝对位置的参考系叫做 地图坐标系 map。 一层一层坐标系之间关系复杂，有一些是相对固定的，也有一些是不断变化的，看似简单的坐标系也在空间范围内变得复杂，良好的坐标系管理系统就显得格外重要。 关于坐标系变换关系的基本理论，在每一本机器人学的教材中都会有讲解，可以分解为 平移和旋转 两个部分，通过一个四乘四的矩阵进行描述，在空间中画出坐标系，那两者之间的变换关系，其实就是向量的数学描述。 ROS中TF功能的底层原理，就是对这些数学变换进行了封装，详细的理论知识大家可以参考机器人学的教材，我们主要讲解TF坐标管理系统的使用方法。 TF命令行操作 ROS中的TF该如何使用呢？我们先通过两只小海龟的示例，了解下基于坐标系的一种机器人跟随算法。 小海龟跟随例程 这个示例需要我们先安装相应的功能包，然后就可以通过一个launch文件启动，之后我们可以控制其中的一只小海龟，另外一只小海龟会自动跟随运动。 $ sudo apt install ros-humble-turtle-tf2-py ros-humble-tf2-tools $ sudo pip3 install transforms3d 具体运行的效果如何？我们来试一试。 $ ros2 launch turtle_tf2_py turtle_tf2_demo.launch.py $ ros2 run turtlesim turtle_teleop_key 当我们控制一只海龟运动时，另外一只海龟也会跟随运动。 查看TF树 在当前运行的两只海龟中，有哪些坐标系呢，我们可以通过这个小工具来做查看。 $ ros2 run tf2_tools view_frames 默认在当前终端路径下生成了一个frames.pdf文件，打开之后，就可以看到系统中各个坐标系的关系了。 查询坐标变换信息 只看到坐标系的结构还不行，如果我们想要知道某两个坐标系之间的具体关系，可以通过tf2_echo这个工具查看： $ ros2 run tf2_ros tf2_echo turtle2 turtle1 运行成功后，终端中就会循环打印坐标系的变换数值了，由平移和旋转两个部分组成，还有旋转矩阵。 坐标系可视化 看数值还不直观？可以试试用可视化软件来做显示： $ ros2 run rviz2 rviz2 -d $( ros2 pkg prefix --share turtle_tf2_py ) /rviz/turtle_rviz.rviz 再让小海龟动起来，Rviz中的坐标轴就会开始运动，这样是不是更加直观了呢！ 小海龟跟随的案例有点意思，这背后的原理是怎样的呢？大家不要着急，我们先来了解下TF的使用方法，便于大家慢慢理解。 静态TF广播 我们说TF的主要作用是对坐标系进行管理，那就管理一个试试呗？ 坐标变换中最为简单的应该是相对位置不发生变化的情况，比如你家的房子在哪个位置，只要房子不拆，这个坐标应该就不会变化。 在机器人系统中也很常见，比如激光雷达和机器人底盘之间的位置关系，安装好之后基本不会变化。 在TF中，这种情况也称之为 静态TF变换 ，我们来看看在程序中该如何实现？ 运行效果 启动终端，运行如下命令： $ ros2 run learning_tf static_tf_broadcaster $ ros2 run tf2_tools view_frames 可以看到当前系统中存在两个坐标系，一个是world，一个是house，两者之间的相对位置不会发生改变，通过一个静态的TF对象进行维护。 代码解析 来看下在代码中是如何创建坐标系并且发布静态变换的。 learning_tf/static_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播静态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros.static_transform_broadcaster import StaticTransformBroadcaster # TF静态坐标系广播器类 class StaticTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . tf_broadcaster = StaticTransformBroadcaster ( self ) # 创建一个TF广播器对象 static_transformStamped = TransformStamped () # 创建一个坐标变换的消息对象 static_transformStamped . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 static_transformStamped . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 static_transformStamped . child_frame_id = 'house' # 设置一个坐标变换的目标坐标系 static_transformStamped . transform . translation . x = 10.0 # 设置坐标变换中的X、Y、Z向的平移 static_transformStamped . transform . translation . y = 5.0 static_transformStamped . transform . translation . z = 0.0 quat = tf_transformations . quaternion_from_euler ( 0.0 , 0.0 , 0.0 ) # 将欧拉角转换为四元数（roll, pitch, yaw） static_transformStamped . transform . rotation . x = quat [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） static_transformStamped . transform . rotation . y = quat [ 1 ] static_transformStamped . transform . rotation . z = quat [ 2 ] static_transformStamped . transform . rotation . w = quat [ 3 ] self . tf_broadcaster . sendTransform ( static_transformStamped ) # 广播静态坐标变换，广播后两个坐标系的位置关系保持不变 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = StaticTFBroadcaster ( \"static_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , ], }, 经过这段代码，两个坐标系的变化是描述清楚了，到了使用的时候，我们又该如何查询呢？ TF监听 我们再来学习下如何查询两个坐标系之间的位置关系。 运行效果 启动一个终端，运行如下节点，就可以在终端中看到周期显示的坐标关系了。 $ ros2 run learning_tf tf_listener 代码解析 这个节点中是如何查询坐标关系的，我们来看下代码。 learning_tf/tf_listener.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-监听某两个坐标系之间的变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 class TFListener ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'source_frame' , 'world' ) # 创建一个源坐标系名的参数 self . source_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) . get_parameter_value () . string_value self . declare_parameter ( 'target_frame' , 'house' ) # 创建一个目标坐标系名的参数 self . target_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'target_frame' ) . get_parameter_value () . string_value self . tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self . tf_listener = TransformListener ( self . tf_buffer , self ) # 创建坐标变换的监听器 self . timer = self . create_timer ( 1.0 , self . on_timer ) # 创建一个固定周期的定时器，处理坐标信息 def on_timer ( self ): try : now = rclpy . time . Time () # 获取ROS系统的当前时间 trans = self . tf_buffer . lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 self . target_frame , self . source_frame , now ) except TransformException as ex : # 如果坐标变换获取失败，进入异常报告 self . get_logger () . info ( f 'Could not transform { self . target_frame } to { self . source_frame } : { ex } ' ) return pos = trans . transform . translation # 获取位置信息 quat = trans . transform . rotation # 获取姿态信息（四元数） euler = tf_transformations . euler_from_quaternion ([ quat . x , quat . y , quat . z , quat . w ]) self . get_logger () . info ( 'Get %s --> %s transform: [ %f , %f , %f ] [ %f , %f , %f ]' % ( self . source_frame , self . target_frame , pos . x , pos . y , pos . z , euler [ 0 ], euler [ 1 ], euler [ 2 ])) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TFListener ( \"tf_listener\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 好啦，大家现在对TF的基本使用有所了解了。我们继续挑战两只海龟跟随的案例。 海龟跟随功能解析 还是之前小海龟跟随的示例，我们自己通过代码来实现一下。 运行效果 先看下实现的效果，启动终端后，通过如下命令启动例程： $ ros2 launch learning_tf turtle_following_demo.launch.py $ ros2 run turtlesim turtle_teleop_key 看到的效果和ROS自带的例程相同。 原理解析 在两只海龟的仿真器中，我们可以定义三个坐标系，比如仿真器的全局参考系叫做world，turtle1和turtle2坐标系在两只海龟的中心点，这样，turtle1和world坐标系的相对位置，就可以表示海龟1的位置，海龟2也同理。 要实现海龟2向海龟1运动，我们在两者中间做一个连线，再加一个箭头，怎么样，是不是有想起高中时学习的向量计算？我们说坐标变换的描述方法就是向量，所以在这个跟随例程中，用TF就可以很好的解决。 向量的长度表示距离，方向表示角度，有了距离和角度，我们随便设置一个时间，不就可以计算得到速度了么，然后就是速度话题的封装和发布，海龟2也就可以动起来了。 所以这个例程的核心就是通过坐标系实现向量的计算，两只海龟还会不断运动，这个向量也得按照某一个周期计算，这就得用上TF的动态广播与监听了。 我们一起看下代码该如何实现。 Launch文件解析 先来看下刚才运行的launch文件，里边启动了四个节点，分别是： 小海龟仿真器 海龟1的坐标系广播 海龟2的坐标系广播 海龟跟随控制 其中，两个坐标系的广播复用了turtle_tf_broadcaster节点，通过传入的参数名修改维护的坐标系名称。 learning_tf/launch/turtle_following_demo.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster1' , parameters = [ { 'turtlename' : 'turtle1' } ] ), DeclareLaunchArgument ( 'target_frame' , default_value = 'turtle1' , description = 'Target frame name.' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster2' , parameters = [ { 'turtlename' : 'turtle2' } ] ), Node ( package = 'learning_tf' , executable = 'turtle_following' , name = 'listener' , parameters = [ { 'target_frame' : LaunchConfiguration ( 'target_frame' )} ] ), ]) 坐标系动态广播 海龟1和海龟2在world坐标系下的坐标变换，在turtle_tf_broadcaster节点中实现，除了海龟坐标系的名字不同之外，针对两个海龟的功能是一样的。 learning_tf/turtle_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播动态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros import TransformBroadcaster # TF坐标变换广播器 from turtlesim.msg import Pose # turtlesim小海龟位置消息 class TurtleTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'turtlename' , 'turtle' ) # 创建一个海龟名称的参数 self . turtlename = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'turtlename' ) . get_parameter_value () . string_value self . tf_broadcaster = TransformBroadcaster ( self ) # 创建一个TF坐标变换的广播对象并初始化 self . subscription = self . create_subscription ( # 创建一个订阅者，订阅海龟的位置消息 Pose , f '/ { self . turtlename } /pose' , # 使用参数中获取到的海龟名称 self . turtle_pose_callback , 1 ) def turtle_pose_callback ( self , msg ): # 创建一个处理海龟位置消息的回调函数，将位置消息转变成坐标变换 transform = TransformStamped () # 创建一个坐标变换的消息对象 transform . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 transform . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 transform . child_frame_id = self . turtlename # 设置一个坐标变换的目标坐标系 transform . transform . translation . x = msg . x # 设置坐标变换中的X、Y、Z向的平移 transform . transform . translation . y = msg . y transform . transform . translation . z = 0.0 q = tf_transformations . quaternion_from_euler ( 0 , 0 , msg . theta ) # 将欧拉角转换为四元数（roll, pitch, yaw） transform . transform . rotation . x = q [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） transform . transform . rotation . y = q [ 1 ] transform . transform . rotation . z = q [ 2 ] transform . transform . rotation . w = q [ 3 ] # Send the transformation self . tf_broadcaster . sendTransform ( transform ) # 广播坐标变换，海龟位置变化后，将及时更新坐标变换信息 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TurtleTFBroadcaster ( \"turtle_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 海龟跟随 坐标系都正常广播了，接下来我们就可以订阅两只海龟的位置关系，并且变换成速度指令进行控制啦。 learning_tf/turtle_following.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-通过坐标变化实现海龟跟随功能 \"\"\" import math import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 from geometry_msgs.msg import Twist # ROS2 速度控制消息 from turtlesim.srv import Spawn # 海龟生成的服务接口 class TurtleFollowing ( Node ) : def __init__ ( self, name ) : super () .__init__ ( name ) # ROS2节点父类初始化 self.declare_parameter ( 'source_frame' , 'turtle1' ) # 创建一个源坐标系名的参数 self.source_frame = self.get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) .get_parameter_value () .string_value self.tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self.tf_listener = TransformListener ( self.tf_buffer, self ) # 创建坐标变换的监听器 self.spawner = self.create_client ( Spawn, 'spawn' ) # 创建一个请求产生海龟的客户端 self.turtle_spawning_service_ready = False # 是否已经请求海龟生成服务的标志位 self.turtle_spawned = False # 海龟是否产生成功的标志位 self.publisher = self.create_publisher ( Twist, 'turtle2/cmd_vel' , 1 ) # 创建跟随运动海龟的速度话题 self.timer = self.create_timer ( 1 .0, self.on_timer ) # 创建一个固定周期的定时器，控制跟随海龟的运动 def on_timer ( self ) : from_frame_rel = self.source_frame # 源坐标系 to_frame_rel = 'turtle2' # 目标坐标系 if self.turtle_spawning_service_ready: # 如果已经请求海龟生成服务 if self.turtle_spawned: # 如果跟随海龟已经生成 try: now = rclpy.time.Time () # 获取ROS系统的当前时间 trans = self.tf_buffer.lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 to_frame_rel, from_frame_rel, now ) except TransformException as ex: # 如果坐标变换获取失败，进入异常报告 self.get_logger () .info ( f 'Could not transform {to_frame_rel} to {from_frame_rel}: {ex}' ) return msg = Twist () # 创建速度控制消息 scale_rotation_rate = 1 .0 # 根据海龟角度，计算角速度 msg.angular.z = scale_rotation_rate * math.atan2 ( trans.transform.translation.y, trans.transform.translation.x ) scale_forward_speed = 0 .5 # 根据海龟距离，计算线速度 msg.linear.x = scale_forward_speed * math.sqrt ( trans.transform.translation.x ** 2 + trans.transform.translation.y ** 2 ) self.publisher.publish ( msg ) # 发布速度指令，海龟跟随运动 else : # 如果跟随海龟没有生成 if self.result.done () : # 查看海龟是否生成 self.get_logger () .info ( f 'Successfully spawned {self.result.result().name}' ) self.turtle_spawned = True else : # 依然没有生成跟随海龟 self.get_logger () .info ( 'Spawn is not finished' ) else : # 如果没有请求海龟生成服务 if self.spawner.service_is_ready () : # 如果海龟生成服务器已经准备就绪 request = Spawn.Request () # 创建一个请求的数据 request.name = 'turtle2' # 设置请求数据的内容，包括海龟名、xy位置、姿态 request.x = float ( 4 ) request.y = float ( 2 ) request.theta = float ( 0 ) self.result = self.spawner.call_async ( request ) # 发送服务请求 self.turtle_spawning_service_ready = True # 设置标志位，表示已经发送请求 else : self.get_logger () .info ( 'Service is not ready' ) # 海龟生成服务器还没准备就绪的提示 def main ( args = None ) : rclpy.init ( args = args ) # ROS2 Python接口初始化 node = TurtleFollowing ( \"turtle_following\" ) # 创建ROS2节点对象并进行初始化 rclpy.spin ( node ) # 循环等待ROS2退出 node.destroy_node () # 销毁节点对象 rclpy.shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , 'turtle_following = learning_tf.turtle_following:main' , ], }, 参考链接 https://docs.ros.org/en/humble/Tutorials/Tf2/Tf2-Main.html","text_tokens":["scripts","相同","想起","终端","讲解","哪些","例程","source","数值","应该","python3","not","cmd","方法","到","broadcaster","理论","executable","函数","加入","缓冲区","angular","工具","下","角度","时候","传入","正常","分别","生变","参数","先","准备","turtlesim","激光雷达","parameter","value","保存","解决","更加","库",">","退出","info","运行","怎么","很多","继续","上","使用","坐标系","就绪","不要","同理","？","针对","位置","python","好","static","器","中画","安装","欧拉角","一层","class","html","中该","这些","来","spawned","当前","其实","是","慢慢","又","string","。","自带","request","有点","之外","w","self","args","系统","-","odom","进行","rviz2","末端","twist","静态","四元","控制","tools","transformations","刚才","核心","底层","服务","geometry","这种","def","默认值","一些","父类","on","turtletfbroadcaster","出","tutorials","务器","clock","8","transformation","提示","不会","declarelaunchargument","存在","名称","随便","大家","child","if","pip3","外部","spawning","from","工件","install","该","__","累积","漂移","这样","抓取","这个","看看","发布","优先","转换","绝对","get","rotation","publish","背后","super","x","数据","world","完整","再","知道","time","转变","init","setup","重要","rviz","段","laser","根据","5","简单","关于","，","数","看似","查询","！","name","过程","通过","5.0","产生","显示","speed","logger","node","如何","header","publisher","说明","0.0","源","接下来","turtle2","案例","tflistener","1.0",",","中心点","目标","怎样","view","result","有","2","小海龟","基本","作者","@","形态","改变","launch","订阅","还有","管理系","--","如下","]","变化","bin","怎么样","定时","demo",".__","理论知识","打印","不同","者","之为","命令行","更新","y","一下","机器","动态","现在","复杂","良好","transformbroadcaster","否则","转变成","points","说","statictfbroadcaster","相应","变成","docs","两个","常见","已经","、","运动","}","send","tf2","launchdescription","客户","!","请求","会","另外","配置","entry","主要","shutdown","后","起来","substitutions","就是","你家","环境","选项","旋转","地图","成功","获取","功能","夹","else","：","看","入口","进入",")","coding","被","代码","不","销毁","所在","戳","准备就绪","不断","org","true","周期","turtle","保持","与","pitch","时刻","description","一种","相对","让","中","turtle1","循环","外部环境","左边","概念","姿态","试试","理解","q","生成","误差","便于","除了","可视","对","发生","yaw","msgs","某","z","euler","en","frames","基于","rclpy","部分","器类","—","to","路径","lookup","/","解析","10.0","teleop","sqrt","神器","坐标轴","参考","destroy","3","following","基础","然后","spin","定时器","先看","和","描述","发生变化","来看","1","按照","不变","*","%","rate","async","share","id","vel","了","跟随","点","一个","还","msg","spawner","import","变得","https","create","加","之后","三个","是否","标志",":","spawn","except","=","得到","callback","的","知识","frame","最为","listener","4","trans","ready","软件","'","之前","时","在","复用","坐标","两者","方向","now","动机","quat","s","[","机械","臂","接下","atan2","得","拆","可以","分解","run","维护","是不是","人学","都","只","自动","处理","没","false","link","{","开始","效果","组成","用","信息","如果","当","里程计","着急","向量","原理","树","一只","client","要","return","有所","那","四个",".","内容","回调","$","作用","啦","初始化","linear","parameters","居","给","try","key","env","缓冲","none","失败","变得复杂","could","并且","translation","只要","roll","将","f","中心","为","关系","平移","echo","速度","监听器","call","xy","至关重要","提供","sudo","广播","空间","海龟","全局","示例","名","连线","console","scale","想要","设置"," ","意思","successfully","呢","发送","报告","www","箭头","叫做","两只","pdf","prefix","humble","学习","查看","数学","中是","存储","transformlistener","0","实现","看到","计算","utf","显得","底盘","usr","管理","修改","成","完成","transform","自己","就","下来","learning","还是","名字","the","高中","map","封装","链接","机器人学","矩阵","包","初始","之间","时间","一起","pos","管理系统","stamp","表示","没有","不是","参数值","接口","sendtransform","pose","依然","并","as","编译","仿真器","还会","_","quaternion","math","定义","里边","d","+","不行","启动","我们","pkg","异常","移动","srv","么","打开","rel","消息","基","一本","服务器","由","做","launchconfiguration","世界","操作","小海","范围","等待","物体","其中","turtlename","house","文件","main","试一试","清楚","declare","ros2","直观","古月","ex","actions","角速度","情况","statictransformbroadcaster","长度","tf","finished","transformexception","默认","移动机器人","参考系","至关","default","爪","距离","broadcaster1","详细","is","雷达","非常","sim","里程","base","及时","包括","\"","target","哪个","线速度","小","transformstamped","subscription","很","各个","ros","关闭","一样","timer","编写","guyuehome","turtlefollowing","中间","真器","命令","内","类","格外","变换","service","欧拉","这","经过","算法","(","buffer","具体","对象","话题","（","generate","#","结构","节点","指令","两者之间","挑战","动","broadcaster2","py","监听","程序","向","创建","float","了解","）","com","位","可视化","跟随运动","transforms3d","package","done","也","每","apt","呗","仿真","激光","称之为","需要","又会有","房子","熟悉","forward","四","教材","所以","theta","比如","客户端","机器人","固定","四乘"],"title":"TF","title_tokens":["tf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf","text":"坐标系是我们非常熟悉的一个概念，也是机器人学中的重要基础，在一个完整的机器人系统中，会存在很多坐标系，这些坐标系之间的位置关系该如何管理？ ROS给我们提供了一个坐标系的管理神器—— TF 。","text_tokens":["？","概念","，","位置","基础","提供","如何","机器","机器人学","之间","这些","ros","是","人学"," ","给","了","一个","—","。","完整","也","系统","存在","tf","会","重要","神器","管理","的","我们","很多","熟悉","坐标系","关系","该","非常","中","机器人","在","坐标"],"title":"TF：机器人坐标系管理神器","title_tokens":["神器","管理","坐标系","机器人","：","tf","机器","坐标"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_1","text":"机器人中都有哪些坐标系呢？ 比如在机械臂形态的机器人中，机器人安装的位置叫做 基坐标系 Base Frame，机器人安装位置在外部环境下的参考系叫做 世界坐标系 World Frame，机器人末端夹爪的位置叫做 工具坐标系 ，外部被操作物体的位置叫做 工件坐标系 ，在机械臂抓取外部物体的过程中，这些坐标系之间的关系也在跟随变化。 在移动机器人系统中，坐标系一样至关重要，比如一个移动机器人的中心点是 基坐标系 Base Link，雷达所在的位置叫做 雷达坐标系 laser link，机器人要移动，里程计会累积位置，这个位置的参考系叫做 里程计坐标系 odom，里程计又会有累积误差和漂移，绝对位置的参考系叫做 地图坐标系 map。 一层一层坐标系之间关系复杂，有一些是相对固定的，也有一些是不断变化的，看似简单的坐标系也在空间范围内变得复杂，良好的坐标系管理系统就显得格外重要。 关于坐标系变换关系的基本理论，在每一本机器人学的教材中都会有讲解，可以分解为 平移和旋转 两个部分，通过一个四乘四的矩阵进行描述，在空间中画出坐标系，那两者之间的变换关系，其实就是向量的数学描述。 ROS中TF功能的底层原理，就是对这些数学变换进行了封装，详细的理论知识大家可以参考机器人学的教材，我们主要讲解TF坐标管理系统的使用方法。","text_tokens":["关于","，","看似","讲解","过程","通过","哪些","和","描述","map","封装","机器人学","矩阵","方法","之间","理论","管理系统","工具","下","跟随","了","一个","变得","中心点","有","基本","形态","管理系","的","知识","frame","我们","移动","使用","坐标系","变化","在","坐标","？","理论知识","两者","位置","动机","中画","安装","基","一本","机械","臂","一层","机器","世界","操作","复杂","良好","范围","这些","可以","分解","物体","是","其实","都","人学","。","两个","link","系统","tf","移动机器人","会","参考系","至关","爪","主要","里程计","odom","详细","进行","雷达","就是","里程","末端","向量","原理","base","环境","要","旋转","地图","功能","夹","那","底层","被","ros","所在","一样","一些","不断","出","内","变得复杂","格外","大家","外部","变换","工件","中心","相对","为","关系","中","累积","漂移","外部环境","抓取","平移","这个","至关重要","误差","两者之间","对","绝对","空间","部分"," ","呢","world","叫做","数学","也","每","显得","重要","又会有","管理","四","laser","参考","教材","就","比如","机器人","固定","四乘","简单"],"title":"机器人中的坐标系","title_tokens":["的","坐标系","机器人","中","机器","坐标"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_1","text":"ROS中的TF该如何使用呢？我们先通过两只小海龟的示例，了解下基于坐标系的一种机器人跟随算法。","text_tokens":["？","，","通过","如何","机器","小海","ros","海龟","基于","示例","了解","下","跟随","呢","先","。","两只","小海龟","tf","一种","的","我们","使用","坐标系","该","算法","中","机器人","坐标"],"title":"TF命令行操作","title_tokens":["操作","命令行","命令","tf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_2","text":"这个示例需要我们先安装相应的功能包，然后就可以通过一个launch文件启动，之后我们可以控制其中的一只小海龟，另外一只小海龟会自动跟随运动。 $ sudo apt install ros-humble-turtle-tf2-py ros-humble-tf2-tools $ sudo pip3 install transforms3d 具体运行的效果如何？我们来试一试。 $ ros2 launch turtle_tf2_py turtle_tf2_demo.launch.py $ ros2 run turtlesim turtle_teleop_key 当我们控制一只海龟运动时，另外一只海龟也会跟随运动。","text_tokens":["？","一只","，","控制","tools","这个","然后","具体","通过","功能","安装","如何","sudo",".","包","小海","py","可以","$","海龟","ros","来","run","示例","其中"," ","跟随","一个","相应","文件","先","自动","。","试一试","ros2","turtlesim","key","跟随运动","之后","transforms3d","humble","turtle","运动","也","apt","-","小海龟","_","tf2","效果","teleop","pip3","launch","会","需要","另外","运行","当","的","我们","启动","install","就","时","demo"],"title":"小海龟跟随例程","title_tokens":["小海","海龟","例程","小海龟","跟随"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_2","text":"在当前运行的两只海龟中，有哪些坐标系呢，我们可以通过这个小工具来做查看。 $ ros2 run tf2_tools view_frames 默认在当前终端路径下生成了一个frames.pdf文件，打开之后，就可以看到系统中各个坐标系的关系了。","text_tokens":["，","tools","这个","终端","生成","通过","哪些","小",".","做","各个","可以","$","海龟","run","来","frames","当前","工具","下"," ","了","呢","一个","文件","路径","。","ros2","两只","pdf","view","之后","有","查看","系统","_","tf2","默认","看到","运行","的","我们","坐标系","关系","就","中","打开","在","坐标"],"title":"查看TF树","title_tokens":["查看","树","tf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_3","text":"只看到坐标系的结构还不行，如果我们想要知道某两个坐标系之间的具体关系，可以通过tf2_echo这个工具查看： $ ros2 run tf2_ros tf2_echo turtle2 turtle1 运行成功后，终端中就会循环打印坐标系的变换数值了，由平移和旋转两个部分组成，还有旋转矩阵。","text_tokens":["打印","，","具体","旋转","这个","终端","成功","通过","平移","和","结构","：","数值","由","矩阵","turtle2","某","之间","可以","$","run","ros","工具","部分","想要"," ","只","了","还","。","ros2","两个","知道","查看","_","tf2","组成","看到","变换","会","如果","运行","还有","不行","的","我们","坐标系","后","关系","就","中","turtle1","循环","echo","坐标"],"title":"查询坐标变换信息","title_tokens":["变换","信息","查询","坐标"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_4","text":"看数值还不直观？可以试试用可视化软件来做显示： $ ros2 run rviz2 rviz2 -d $( ros2 pkg prefix --share turtle_tf2_py ) /rviz/turtle_rviz.rviz 再让小海龟动起来，Rviz中的坐标轴就会开始运动，这样是不是更加直观了呢！ 小海龟跟随的案例有点意思，这背后的原理是怎样的呢？大家不要着急，我们先来了解下TF的使用方法，便于大家慢慢理解。","text_tokens":["，","！","显示","数值","方法","案例","share","下","不是","了","跟随","还","先","怎样","小海龟","_","更加","d","的","pkg","我们","使用","--","软件","不要","坐标","？","做","小海","可以","run","来","是不是","是","慢慢","。","ros2","有点","直观","运动","开始","-","tf","用","tf2","会","着急","起来","rviz2","原理","看","：",".",")","$","不","turtle","大家","让","这","中","这样","(","试试","理解","便于","可视","动","py","海龟","背后","了解"," ","意思","呢","/","可视化","prefix","再","rviz","坐标轴","就"],"title":"坐标系可视化","title_tokens":["坐标系","可视","可视化","坐标"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_3","text":"我们说TF的主要作用是对坐标系进行管理，那就管理一个试试呗？ 坐标变换中最为简单的应该是相对位置不发生变化的情况，比如你家的房子在哪个位置，只要房子不拆，这个坐标应该就不会变化。 在机器人系统中也很常见，比如激光雷达和机器人底盘之间的位置关系，安装好之后基本不会变化。 在TF中，这种情况也称之为 静态TF变换 ，我们来看看在程序中该如何实现？","text_tokens":["？","静态","，","位置","试试","这个","看看","好","之为","和","发生变化","哪个","安装","那","如何","应该","对","机器","发生","机器人","很","拆","之间","中该","程序","不","来","作用","这种","说","是"," ","生变","一个","。","常见","激光雷达","之后","系统","情况","不会","呗","也","基本","tf","只要","实现","激光","称之为","变换","底盘","管理","的","我们","相对","最为","主要","房子","坐标系","关系","进行","雷达","就","中","比如","变化","你家","在","简单","坐标"],"title":"静态TF广播","title_tokens":["静态","广播","tf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_5","text":"启动终端，运行如下命令： $ ros2 run learning_tf static_tf_broadcaster $ ros2 run tf2_tools view_frames 可以看到当前系统中存在两个坐标系，一个是world，一个是house，两者之间的相对位置不会发生改变，通过一个静态的TF对象进行维护。","text_tokens":["静态","，","两者","tools","位置","终端","static","通过","对象","：","两者之间","发生","broadcaster","之间","可以","$","run","维护","frames","当前","是"," ","house","一个","world","。","ros2","两个","命令","view","系统","不会","_","tf","tf2","存在","看到","改变","运行","启动","的","相对","坐标系","进行","如下","中","learning","坐标"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_6","text":"来看下在代码中是如何创建坐标系并且发布静态变换的。 learning_tf/static_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播静态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros.static_transform_broadcaster import StaticTransformBroadcaster # TF静态坐标系广播器类 class StaticTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . tf_broadcaster = StaticTransformBroadcaster ( self ) # 创建一个TF广播器对象 static_transformStamped = TransformStamped () # 创建一个坐标变换的消息对象 static_transformStamped . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 static_transformStamped . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 static_transformStamped . child_frame_id = 'house' # 设置一个坐标变换的目标坐标系 static_transformStamped . transform . translation . x = 10.0 # 设置坐标变换中的X、Y、Z向的平移 static_transformStamped . transform . translation . y = 5.0 static_transformStamped . transform . translation . z = 0.0 quat = tf_transformations . quaternion_from_euler ( 0.0 , 0.0 , 0.0 ) # 将欧拉角转换为四元数（roll, pitch, yaw） static_transformStamped . transform . rotation . x = quat [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） static_transformStamped . transform . rotation . y = quat [ 1 ] static_transformStamped . transform . rotation . z = quat [ 2 ] static_transformStamped . transform . rotation . w = quat [ 3 ] self . tf_broadcaster . sendTransform ( static_transformStamped ) # 广播静态坐标变换，广播后两个坐标系的位置关系保持不变 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = StaticTFBroadcaster ( \"static_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , ], }, 经过这段代码，两个坐标系的变化是描述清楚了，到了使用的时候，我们又该如何查询呢？","text_tokens":["scripts","数","，","查询","spin","name","5.0","描述","1","来看","node","如何","python3","header","说明","0.0","源","初始","包","到","broadcaster","时间","不变","*","加入","stamp","下","id","时候","点","接口","sendtransform","msg","一个","了",",","import","目标","并","编译",":","2","_","quaternion","作者","库","=","@","退出","的","我们","frame","使用","坐标系","'","]","如下","bin","打开","在","消息","变化","坐标","？","位置","python","now","static","quat","器","y","[","欧拉角","class","等待","points","是","又","statictfbroadcaster","house","main","文件","清楚","。","ros2","两个","、","古月","w","self","args","系统","{","-","statictransformbroadcaster","}","tf","tf2","!","配置","entry","shutdown","后","进行","静态","四元","选项","旋转","\"","功能","transformations","入口","：","transformstamped",".",")","coding","代码","ros","销毁","geometry","初始化","戳","def","父类","居","编写","guyuehome","env","none","clock","8","保持","并且","pitch","translation","类","child","roll","变换","将","from","欧拉","让","这","经过","为","__","关系","该","中","平移","循环","(","发布","对象","（","#","转换","节点","广播","yaw","py","msgs","get","z","rotation","euler","向","创建","程序","示例","rclpy","super","console","设置"," ","x","器类","world","to","）","com","www","呢","/","10.0","中是","知道","0","utf","init","setup","需要","usr","段","完成","transform","destroy","learning","3"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_4","text":"我们再来学习下如何查询两个坐标系之间的位置关系。","text_tokens":["。","两个","之间","查询","位置","学习","我们","的","再","来","坐标系","关系","下","如何","坐标"],"title":"TF监听","title_tokens":["监听","tf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_7","text":"启动一个终端，运行如下节点，就可以在终端中看到周期显示的坐标关系了。 $ ros2 run learning_tf tf_listener","text_tokens":["，","终端","显示","节点","可以","$","run"," ","了","一个","。","ros2","周期","_","tf","看到","运行","启动","的","listener","关系","如下","就","中","learning","在","坐标"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_8","text":"这个节点中是如何查询坐标关系的，我们来看下代码。 learning_tf/tf_listener.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-监听某两个坐标系之间的变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 class TFListener ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'source_frame' , 'world' ) # 创建一个源坐标系名的参数 self . source_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) . get_parameter_value () . string_value self . declare_parameter ( 'target_frame' , 'house' ) # 创建一个目标坐标系名的参数 self . target_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'target_frame' ) . get_parameter_value () . string_value self . tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self . tf_listener = TransformListener ( self . tf_buffer , self ) # 创建坐标变换的监听器 self . timer = self . create_timer ( 1.0 , self . on_timer ) # 创建一个固定周期的定时器，处理坐标信息 def on_timer ( self ): try : now = rclpy . time . Time () # 获取ROS系统的当前时间 trans = self . tf_buffer . lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 self . target_frame , self . source_frame , now ) except TransformException as ex : # 如果坐标变换获取失败，进入异常报告 self . get_logger () . info ( f 'Could not transform { self . target_frame } to { self . source_frame } : { ex } ' ) return pos = trans . transform . translation # 获取位置信息 quat = trans . transform . rotation # 获取姿态信息（四元数） euler = tf_transformations . euler_from_quaternion ([ quat . x , quat . y , quat . z , quat . w ]) self . get_logger () . info ( 'Get %s --> %s transform: [ %f , %f , %f ] [ %f , %f , %f ]' % ( self . source_frame , self . target_frame , pos . x , pos . y , pos . z , euler [ 0 ], euler [ 1 ], euler [ 2 ])) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TFListener ( \"tf_listener\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 好啦，大家现在对TF的基本使用有所了解了。我们继续挑战两只海龟跟随的案例。","text_tokens":["scripts","，","数","查询","spin","name","定时器","source","1","来看","logger","数值","node","如何","python3","说明","not","源","初始","包","到","broadcaster","之间","时间","案例","%","*","pos","加入","缓冲区","下","tflistener","参数值","点","接口","了","一个","参数","1.0",",","import","跟随","目标","create","并","parameter","as","编译","value","保存",":","2","except","基本","_","quaternion","作者","库","=","@",">","info","退出","的","我们","异常","listener","frame","继续","使用","坐标系","trans","--","'","]","如下","bin","打开","定时","坐标","位置","python","now","static","好","quat","y","[","s","class","现在","否则","等待","points","当前","string","house","main","文件","。","declare","ros2","两个","处理","{","古月","ex","self","}","系统","w","-","args","tf","tf2","用","transformexception","默认","!","信息","如果","配置","entry","shutdown","后","进行","四元","选项","\"","获取","return","功能","target","transformations","有所","入口","：","进入",".",")","coding","代码","ros","关闭","销毁","啦","初始化","timer","def","默认值","父类","居","on","编写","guyuehome","try","env","缓冲","none","失败","周期","8","could","translation","类","时刻","大家","变换","外部","f","from","让","关系","__","循环","(","左边","姿态","buffer","这个","监听器","优先","对象","（","#","节点","对","挑战","py","监听","get","某","rotation","z","euler","程序","创建","海龟","示例","rclpy","super","名","console","了解","设置"," ","x","）","world","报告","to","com","www","lookup","/","两只","存储","transformlistener","中是","知道","time","0","utf","init","setup","需要","usr","完成","transform","destroy","learning","固定"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_9","text":"还是之前小海龟跟随的示例，我们自己通过代码来实现一下。","text_tokens":["小海","。","，","代码","的","海龟","我们","通过","来","实现","示例","自己","小海龟","之前","一下","还是","跟随"],"title":"海龟跟随功能解析","title_tokens":["海龟","功能","解析","跟随"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_10","text":"先看下实现的效果，启动终端后，通过如下命令启动例程： $ ros2 launch learning_tf turtle_following_demo.launch.py $ ros2 run turtlesim turtle_teleop_key 看到的效果和ROS自带的例程相同。","text_tokens":["相同","following","，","终端","通过","先看","例程","和","：",".","py","$","run","ros","下"," ","key","自带","ros2","。","turtlesim","命令","turtle","_","tf","效果","实现","teleop","看到","launch","的","启动","后","如下","learning","demo"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_11","text":"在两只海龟的仿真器中，我们可以定义三个坐标系，比如仿真器的全局参考系叫做world，turtle1和turtle2坐标系在两只海龟的中心点，这样，turtle1和world坐标系的相对位置，就可以表示海龟1的位置，海龟2也同理。 要实现海龟2向海龟1运动，我们在两者中间做一个连线，再加一个箭头，怎么样，是不是有想起高中时学习的向量计算？我们说坐标变换的描述方法就是向量，所以在这个跟随例程中，用TF就可以很好的解决。 向量的长度表示距离，方向表示角度，有了距离和角度，我们随便设置一个时间，不就可以计算得到速度了么，然后就是速度话题的封装和发布，海龟2也就可以动起来了。 所以这个例程的核心就是通过坐标系实现向量的计算，两只海龟还会不断运动，这个向量也得按照某一个周期计算，这就得用上TF的动态广播与监听了。 我们一起看下代码该如何实现。","text_tokens":["，","想起","高中","然后","通过","例程","和","1","描述","如何","封装","按照","方法","turtle2","时间","一起","表示","下","不是","角度","跟随","了","一个","中心点","加","三个","仿真器","有","还会","2","解决","定义","得到","怎么","的","我们","上","坐标系","么","时","在","怎么样","同理","坐标","？","两者","位置","方向","好","动态","做","得","可以","是不是","说","。","运动","长度","tf","用","参考系","距离","起来","就是","向量","要","核心","看","很","代码","不","不断","中间","真器","周期","与","随便","变换","中心","相对","这","该","中","turtle1","这样","速度","这个","发布","话题","动","广播","监听","某","海龟","向","全局","连线","设置"," ","world","箭头","两只","叫做","学习","再","仿真","也","实现","计算","参考","所以","就","比如"],"title":"原理解析","title_tokens":["解析","原理"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#launch","text":"先来看下刚才运行的launch文件，里边启动了四个节点，分别是： 小海龟仿真器 海龟1的坐标系广播 海龟2的坐标系广播 海龟跟随控制 其中，两个坐标系的广播复用了turtle_tf_broadcaster节点，通过传入的参数名修改维护的坐标系名称。 learning_tf/launch/turtle_following_demo.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster1' , parameters = [ { 'turtlename' : 'turtle1' } ] ), DeclareLaunchArgument ( 'target_frame' , default_value = 'turtle1' , description = 'Target frame name.' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster2' , parameters = [ { 'turtlename' : 'turtle2' } ] ), Node ( package = 'learning_tf' , executable = 'turtle_following' , name = 'listener' , parameters = [ { 'target_frame' : LaunchConfiguration ( 'target_frame' )} ] ), ])","text_tokens":["following","，","name","通过","1","来看","node","turtle2","broadcaster","executable","下","传入","了","分别","跟随","参数","先",",","import","turtlesim","仿真器","value",":","2","小海龟","_","=","里边","launch","运行","的","启动","frame","listener","坐标系","'","]","复用","demo","坐标","[","launchconfiguration","小海","维护","是","其中","turtlename","文件","。","两个","{","actions","}","tf","launchdescription","default","broadcaster1","substitutions","sim","控制","return","target","刚才","：","四个",".",")","ros","def","parameters","真器","turtle","declarelaunchargument","名称","description","from","turtle1","(","generate","节点","广播","broadcaster2","py","海龟","名"," ","/","package","仿真","修改","learning"],"title":"Launch文件解析","title_tokens":["launch","解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_12","text":"海龟1和海龟2在world坐标系下的坐标变换，在turtle_tf_broadcaster节点中实现，除了海龟坐标系的名字不同之外，针对两个海龟的功能是一样的。 learning_tf/turtle_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播动态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros import TransformBroadcaster # TF坐标变换广播器 from turtlesim.msg import Pose # turtlesim小海龟位置消息 class TurtleTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'turtlename' , 'turtle' ) # 创建一个海龟名称的参数 self . turtlename = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'turtlename' ) . get_parameter_value () . string_value self . tf_broadcaster = TransformBroadcaster ( self ) # 创建一个TF坐标变换的广播对象并初始化 self . subscription = self . create_subscription ( # 创建一个订阅者，订阅海龟的位置消息 Pose , f '/ { self . turtlename } /pose' , # 使用参数中获取到的海龟名称 self . turtle_pose_callback , 1 ) def turtle_pose_callback ( self , msg ): # 创建一个处理海龟位置消息的回调函数，将位置消息转变成坐标变换 transform = TransformStamped () # 创建一个坐标变换的消息对象 transform . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 transform . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 transform . child_frame_id = self . turtlename # 设置一个坐标变换的目标坐标系 transform . transform . translation . x = msg . x # 设置坐标变换中的X、Y、Z向的平移 transform . transform . translation . y = msg . y transform . transform . translation . z = 0.0 q = tf_transformations . quaternion_from_euler ( 0 , 0 , msg . theta ) # 将欧拉角转换为四元数（roll, pitch, yaw） transform . transform . rotation . x = q [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） transform . transform . rotation . y = q [ 1 ] transform . transform . rotation . z = q [ 2 ] transform . transform . rotation . w = q [ 3 ] # Send the transformation self . tf_broadcaster . sendTransform ( transform ) # 广播坐标变换，海龟位置变化后，将及时更新坐标变换信息 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TurtleTFBroadcaster ( \"turtle_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], },","text_tokens":["scripts","the","，","数","spin","name","和","1","数值","node","header","python3","说明","0.0","源","初始","包","到","broadcaster","时间","函数","*","加入","stamp","下","id","参数值","点","接口","pose","msg","一个","参数",",","import","sendtransform","目标","并","create","turtlesim","parameter","编译","value",":","2","小海龟","_","quaternion","作者","库","=","@","退出","订阅","callback","的","frame","listener","使用","坐标系","'","]","如下","bin","变化","在","消息","打开","坐标","不同","针对","位置","python","者","now","static","器","更新","y","[","欧拉角","动态","class","小海","transformbroadcaster","否则","等待","转变成","points","是","string","turtlename","main","变成","文件","。","declare","ros2","两个","处理","之外","{","古月","、","self","}","w","send","-","args","系统","tf","tf2","用","默认","!","信息","配置","entry","shutdown","后","进行","四元","及时","选项","旋转","\"","获取","功能","transformations","入口","：","transformstamped","subscription",".",")","coding","回调","代码","ros","关闭","销毁","geometry","初始化","戳","一样","def","默认值","父类","居","turtletfbroadcaster","编写","guyuehome","env","none","turtle","clock","8","transformation","pitch","translation","名称","类","child","roll","变换","外部","将","f","from","欧拉","让","为","__","中","平移","循环","(","q","优先","对象","（","#","除了","节点","转换","广播","yaw","py","msgs","get","z","rotation","海龟","向","创建","euler","程序","示例","rclpy","super","console","设置"," ","x","）","world","to","com","www","/","知道","转变","0","实现","utf","init","setup","需要","usr","完成","transform","theta","destroy","learning","3","名字"],"title":"坐标系动态广播","title_tokens":["坐标系","动态","广播","坐标"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_13","text":"坐标系都正常广播了，接下来我们就可以订阅两只海龟的位置关系，并且变换成速度指令进行控制啦。 learning_tf/turtle_following.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-通过坐标变化实现海龟跟随功能 \"\"\" import math import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 from geometry_msgs.msg import Twist # ROS2 速度控制消息 from turtlesim.srv import Spawn # 海龟生成的服务接口 class TurtleFollowing ( Node ) : def __init__ ( self, name ) : super () .__init__ ( name ) # ROS2节点父类初始化 self.declare_parameter ( 'source_frame' , 'turtle1' ) # 创建一个源坐标系名的参数 self.source_frame = self.get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) .get_parameter_value () .string_value self.tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self.tf_listener = TransformListener ( self.tf_buffer, self ) # 创建坐标变换的监听器 self.spawner = self.create_client ( Spawn, 'spawn' ) # 创建一个请求产生海龟的客户端 self.turtle_spawning_service_ready = False # 是否已经请求海龟生成服务的标志位 self.turtle_spawned = False # 海龟是否产生成功的标志位 self.publisher = self.create_publisher ( Twist, 'turtle2/cmd_vel' , 1 ) # 创建跟随运动海龟的速度话题 self.timer = self.create_timer ( 1 .0, self.on_timer ) # 创建一个固定周期的定时器，控制跟随海龟的运动 def on_timer ( self ) : from_frame_rel = self.source_frame # 源坐标系 to_frame_rel = 'turtle2' # 目标坐标系 if self.turtle_spawning_service_ready: # 如果已经请求海龟生成服务 if self.turtle_spawned: # 如果跟随海龟已经生成 try: now = rclpy.time.Time () # 获取ROS系统的当前时间 trans = self.tf_buffer.lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 to_frame_rel, from_frame_rel, now ) except TransformException as ex: # 如果坐标变换获取失败，进入异常报告 self.get_logger () .info ( f 'Could not transform {to_frame_rel} to {from_frame_rel}: {ex}' ) return msg = Twist () # 创建速度控制消息 scale_rotation_rate = 1 .0 # 根据海龟角度，计算角速度 msg.angular.z = scale_rotation_rate * math.atan2 ( trans.transform.translation.y, trans.transform.translation.x ) scale_forward_speed = 0 .5 # 根据海龟距离，计算线速度 msg.linear.x = scale_forward_speed * math.sqrt ( trans.transform.translation.x ** 2 + trans.transform.translation.y ** 2 ) self.publisher.publish ( msg ) # 发布速度指令，海龟跟随运动 else : # 如果跟随海龟没有生成 if self.result.done () : # 查看海龟是否生成 self.get_logger () .info ( f 'Successfully spawned {self.result.result().name}' ) self.turtle_spawned = True else : # 依然没有生成跟随海龟 self.get_logger () .info ( 'Spawn is not finished' ) else : # 如果没有请求海龟生成服务 if self.spawner.service_is_ready () : # 如果海龟生成服务器已经准备就绪 request = Spawn.Request () # 创建一个请求的数据 request.name = 'turtle2' # 设置请求数据的内容，包括海龟名、xy位置、姿态 request.x = float ( 4 ) request.y = float ( 2 ) request.theta = float ( 0 ) self.result = self.spawner.call_async ( request ) # 发送服务请求 self.turtle_spawning_service_ready = True # 设置标志位，表示已经发送请求 else : self.get_logger () .info ( 'Service is not ready' ) # 海龟生成服务器还没准备就绪的提示 def main ( args = None ) : rclpy.init ( args = args ) # ROS2 Python接口初始化 node = TurtleFollowing ( \"turtle_following\" ) # 创建ROS2节点对象并进行初始化 rclpy.spin ( node ) # 循环等待ROS2退出 node.destroy_node () # 销毁节点对象 rclpy.shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , 'turtle_following = learning_tf.turtle_following:main' , ], },","text_tokens":["scripts","following","，","spin","name","通过","定时器","source","产生","1","speed","logger","数值","node","python3","publisher","说明","接下来","源","cmd","not","初始","包","到","turtle2","broadcaster","时间","*","rate","加入","缓冲区","async","angular","表示","没有","vel","正常","参数值","角度","了","跟随","接口","msg","一个","参数",",","import","spawner","目标","create","依然","turtlesim","准备","并","parameter","as","result","编译","value","保存","是否","标志",":","2","spawn","except","_","math","作者","库","=","@","+","info","退出","订阅","的","我们","异常","listener","frame","srv","使用","坐标系","trans","4","ready","'","就绪","如下","]","bin","变化","rel","消息","定时","打开","坐标",".__","位置","python","now","static","y","[","还","服务器","接下","atan2","class","可以","否则","等待","spawned","points","当前","点","都","string","main","文件","。","declare","ros2","request","没","false","已经","{","古月","运动","self","ex","系统","}","-","角速度","、","args","tf","tf2","用","finished","transformexception","默认","!","请求","客户","信息","如果","配置","entry","shutdown","距离","后","is","进行","twist","client","选项","控制","包括","\"","成功","获取","return","功能","transformations","else","线速度","入口","：","进入",".","内容",")","coding","代码","ros","关闭","服务","销毁","啦","geometry","初始化","timer","def","linear","准备就绪","默认值","父类","居","on","编写","guyuehome","try","env","缓冲","turtlefollowing","true","失败","none","周期","turtle","务器","8","could","提示","并且","translation","类","时刻","if","变换","外部","spawning","f","from","service","让","关系","__","turtle1","循环","(","左边","速度","姿态","buffer","监听器","生成","优先","话题","发布","xy","call","#","对象","指令","节点","广播","py","监听","msgs","get","rotation","z","publish","海龟","程序","创建","float","示例","rclpy","super","名","scale","console","设置"," ","x","successfully","数据","发送","to","报告","com","www","lookup","位","/","两只","跟随运动","存储","transformlistener","done","查看","知道","time","0","实现","计算","sqrt","utf","init","setup","需要","usr","5","成","forward","完成","transform","theta","根据","下来","就","客户端","learning","destroy","固定"],"title":"海龟跟随","title_tokens":["海龟","跟随"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_14","text":"https://docs.ros.org/en/humble/Tutorials/Tf2/Tf2-Main.html","text_tokens":["html","docs","/","org","tutorials","ros","en","humble",":","-","tf2",".","https","main"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/","text":"URDF：机器人建模方法 ROS是机器人操作系统，当然要给机器人使用啦，不过在使用之前，还得让ROS认识下我们使用的机器人，如何把一个机器人介绍给ROS呢？ 为此，ROS专门提供了一种机器人建模方法—— URDF ，用来描述机器人外观、性能等各方面属性。 机器人的组成 建模描述机器人的过程中，我们自己需要先熟悉机器人的组成和参数，比如机器人一般是由 硬件结构、驱动系统、传感器系统、控制系统 四大部分组成，市面上一些常见的机器人，无论是移动机器人还是机械臂，我们都可以按照这四大组成部分进行分解。 硬件结构就是底盘、外壳、电机等实打实可以看到的设备； 驱动系统就是可以驱使这些设备正常使用的装置，比如电机的驱动器，电源管理系统等； 传感系统包括电机上的编码器、板载的IMU、安装的摄像头、雷达等等，便于机器人感知自己的状态和外部的环境； 控制系统就是我们开发过程的主要载体了，一般是树莓派、电脑等计算平台，以及里边的操作系统和应用软件。 机器人建模的过程，其实就是按照类似的思路，通过建模语言，把机器人每一个部分都描述清楚，再组合起来的过程。 URDF ROS中的建模方法叫做 URDF ，全称是 统一机器人描述格式 ，不仅可以清晰描述机器人自身的模型，还可以描述机器人的外部环境，比如这里的桌子，也可以算作一个模型。 URDF模型文件使用的是 XML格式 ，右侧就是一个机器人的URDF描述，乍看上去，有点像网页开发的源代码，都是由一系列尖括号包围的标签和其中的属性组合而成。 如何使用这样一个文件描述机器人呢？比如这个机械臂，大家可以看下自己的手臂，我们的手臂是由大臂和小臂组成，他们独自是无法运动的，必须通过一个手肘关节连接之后，才能通过肌肉驱动，产生相对运动。 在建模中，大臂和小臂就类似机器人的这些独立的刚体部分，称为 连杆Link ，手肘就类似于机器人电机驱动部分，称为 关节joint 。 所以在URDF建模过程中，关键任务就是通过这里的<link>和<joint>，理清楚每一个连杆和关节的描述信息。 连杆Link的描述 <link>标签用来描述机器人某个刚体部分的 外观和物理属性 ，外观包括尺寸、颜色、形状，物理属性包括质量、惯性矩阵、碰撞参数等。 以这个机械臂连杆为例，它的link描述如下： link标签中的name表示该连杆的名称，我们可以自定义，未来joint连接link的时候，会使用到这个名称。 link里边的<visual>部分用来描述机器人的外观，比如： <geometry>表示 几何形状 ，里边使用<mesh>调用了一个在三维软件中提前设计好的蓝色外观，就是这个stl文件，看上去和真实机器人是一致的 <origin>表示 坐标系相对初始位置的偏移 ，分别是x、y、z方向上的平移，和roll、pitch、raw旋转，不需要偏移的话，就全为0。 第二个部分<collision>，描述 碰撞参数 ，里边的内容似乎和<visual>一样，也有<geometry>和<origin>，看似相同，其实区别还是比较大的。 <visual>部分重在描述机器人看上去的状态，也就是视觉效果； <collision>部分则是描述机器人运动过程中的状态，比如机器人与外界如何接触算作碰撞。 在这个机器人模型中，蓝色部分是通过<visual>来描述的，在实际控制过程中，这样复杂的外观在计算碰撞检测时，要求的算力较高，为了简化计算，我们将碰撞检测用的模型简化为了绿色框的圆柱体，也就是<collision>里边<geometry>描述的形状。<origin>坐标系偏移也是类似，可以描述刚体质心的偏移。 如果是移动机器人的话，link也可以用来描述小车的车体、轮子等部分。 关节Joint描述 机器人模型中的刚体最终要通过关节joint连接之后，才能产生相对运动。 URDF中的关节有六种运动类型。 continuous，描述旋转运动，可以围绕某一个轴无限旋转，比如小车的轮子，就属于这种类型。 revolute，也是旋转关节，和continuous类型的区别在于不能无限旋转，而是带有角度限制，比如机械臂的两个连杆，就属于这种运动。 prismatic，是滑动关节，可以沿某一个轴平移，也带有位置的极限，一般直线电机就是这种运动方式。 fixed，固定关节，是唯一一种不允许运动的关节，不过使用还是比较频繁的，比如相机这个连杆，安装在机器人上，相对位置是不会变化的，此时使用的连接方式就是Fixed。 Floating是浮动关节，第六种planar是平面关节，这两种使用相对较少。 在URDF模型中，每一个link都使用这样一段xml内容描述，比如关节的名字叫什么，运动类型是哪一种。 parent标签：描述父连杆； child标签：描述子连杆，子连杆会相对父连杆发生运动； origin：表示两个连杆坐标系之间的关系，也就是图中红色的向量，可以理解为这两个连杆该如何安装到一起； axis表示关节运动轴的单位向量，比如z等于1，就表示这个旋转运动是围绕z轴的正方向进行的； limit就表示运动的一些限制了，比如最小位置，最大位置，和最大速度等。 Info ROS中关于平移的默认单位是m，旋转是弧度（不是度），所以这里的3.14就表示可以在-180度到180度之间运动，线速度是m/s，角速度是rad/s。 完整机器人模型 最终所有的link和joint标签完成了对机器人每个部分的描述和组合，全都放在一个robot标签中，就形成了完整的机器人模型。 所以大家在看某一个URDF模型时，先不着急看每一块代码的细节，先来找link和joint，看下这个机器人是由哪些部分组成的，了解完全局之后，再看细节。 创建机器人模型 好啦，讲了这么多，还是要看一个完整的示例。 我们以这款移动机器人模型为例，一起看下它的URDF建模过程。 功能包结构 机器人的模型放置在learning_urdf功能包中，功能包中包含的文件夹如下： urdf：存放机器人模型的URDF或xacro文件 meshes：放置URDF中引用的模型渲染文件 launch：保存相关启动文件 rviz：保存rviz的配置文件 模型可视化效果 我们先来看下这个模型的效果，尝试逆向分下一下机器人的结构。 $ ros2 launch learning_urdf display.launch.py 很快就可以看到Rviz中显示的机器人模型啦，大家可以使用鼠标拖拽观察。 从可视化的效果来看，这个机器人由五个link和4个joint组成。 查看URDF模型结构 我们分析的对不对呢，可以在模型文件的路径下，使用urdf_to_graphviz这个小工具来分析下。 $ urdf_to_graphviz mbot_base.urdf # 在模型文件夹下运行 运行成功后会产生一个pdf文件，打开之后就可以看到URDF模型分析的结果啦，是不是和我们的猜测完全相同呢！ 模型文件解析 具体URDF模型什么样的，还是要打开模型来研究。 learning_urdf/urdf/mbot_base.urdf <?xml version=\"1.0\" ?> <robot name= \"mbot\" > <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"0.16\" radius= \"0.20\" /> </geometry> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> </visual> </link> <joint name= \"left_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"left_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"left_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"right_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 -0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"right_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"right_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"front_caster_joint\" type= \"continuous\" > <origin xyz= \"0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"front_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"front_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> <joint name= \"back_caster_joint\" type= \"continuous\" > <origin xyz= \"-0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"back_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"back_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> </robot> 参考链接 https://docs.ros.org/en/humble/Tutorials/URDF/URDF-Main.html","text_tokens":["相同","哪些","上去","caster","频繁","旋转关节","方法","到","一致","尝试","0.015","驱动器","以","工具","下","正常","时候","角度","分别","限制","参数","先","传感","保存","猜测","允许",">","独自","info","平面","运行","left","无法","上","使用","坐标系","而是","三维","自定义","？","位置","好","单位","安装","看上去","柱体","六种","把","html","这些","最小","来","圆柱体","其实","是","父","外壳","不仅","标签","。","件夹","有点","系统","-","parent","惯性","第六","revolute","进行","类似","质量","很快","控制","yellow","为例","geometry","度到","这种","一些","fixed","这里","mbot","模型","渲染","组成部分","tutorials","大臂","比较","不会","一块","名称","m","大家","child","外部","这么","完全","从","连接","才能","该","高","此时","蓝色","摄像头","这样","prismatic","这个","0.18","sphere","算作","框","包中","不能","什么","弧度","全都","什么样","应用软件","车体","collision","x","哪","二个","完整","再","红色","wheel","设备","颜色","rviz","硬件","碰撞检测","关节","极限","树莓","关于","，","看似","！","name","过程","通过","产生","显示","专门","rad","实际","如何","的话","驱动","清晰","最大","找","mesh","material","简化","1.0","圆柱","任务","则","有","滑动","文件夹","launch","管理系","视觉","接触","如下","变化","唯一","y","一下","机器","?","复杂","docs","常见","编码器","两个","类型","、","运动","相机","两种","模型简化","视觉效果","会","0.06","配置","主要","后","起来","front","就是","放置","细节","环境","旋转","成功","功能","为了","：","看","正","检测","代码","带有","不","度","完全相同","相关","在于","org","桌子","type","与","0.4","1.5707","xyz","pitch","小臂","一种","感知","相对","让","电源","中","物理","无论是","外部环境","以及","理解","便于","市面","提前","对","可视","发生","version","某","先来","z","轮子","en","属于","部分","局","感器","—","源代码","to","路径","0.19","手肘","/","市面上","解析","black","分析","驱使","几何","180","参考","语言","单位向量","origin","0.095","摄像","描述","和","1","来看","xacro","按照","质心","四大","visual","多","转关","引用","存放","了","装置","https","一个","还","之后","各","外界","要求",":","自身","=","必须","重在","0.025","的","包含","0.20","4","之前","软件","建模语言","时","在","坐标","称为","方向","动机","形状","0.05","imu","s","围绕","机械","臂","或","得","全称","连杆","continuous","每个","color","可以","分解","看下","是不是","都","像头","limit","link","white","planar","graphviz","组成","效果","用","stl","信息","如果","属性","尺寸","着急","无限","向量","看上","要","沿某","radius","为此","较",".","内容","一系","$","真实","状态","啦","给","未来","相对运动","于","自定","乍","0.16","roll","将","第二个","个","第六种","电机","为","关系","平移","速度","它","他们","提供","性能","叫","示例"," ","区别","呢","叫做","pdf","humble","查看","axis","urdf","0","尖括号","看到","计算","底盘","管理","传感器","当然","完成","自己","floating","就","结果","learning","还是","用来","名字","一段","轴","形成","链接","初始","矩阵","包","joint","之间","面上","一起","管理系统","表示","不是","码器","display","rgba","分下","观察","手臂","所有","meshes","逆向","有点像","_","定义","似乎","里边","括号","格式","算力","启动","我们","介绍","移动","研究","刚体","统一","应用","打开","<","操作系统","raw","浮动","xml","设计","；","一系列","由","操作","一般","独立","其中","无论","right","派","清楚","文件","main","ros2","载体","碰撞","最终","0.9","back","角速度","某个","实打实","默认","移动机器人","方面","关键","系列","雷达","大","base","第二","包括","\"","绿色","不过","线速度","小","直线","length","等等","包围","ros","思路","理","一样","偏移","全为","配置文件","外观","少","肘关节","平台","调用","开发","组合而成","rpy","建模","放在","编码","子","这","右侧","电脑","cylinder","具体","手","（","#","结构","方式","网页","py","小车","创建","0.95","了解","讲","图中","）","可视化","拖拽","每","也","等于","控制系统","组合","认识","3.14","需要","板载","熟悉","肌肉","鼠标","robot","等","所以","这款","比如","机器人","固定","五个"],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf","text":"ROS是机器人操作系统，当然要给机器人使用啦，不过在使用之前，还得让ROS认识下我们使用的机器人，如何把一个机器人介绍给ROS呢？ 为此，ROS专门提供了一种机器人建模方法—— URDF ，用来描述机器人外观、性能等各方面属性。","text_tokens":["？","，","要","不过","描述","专门","提供","如何","机器","为此","得","把","方法","操作","性能","ros","啦","是","下"," ","给","了","呢","一个","还","—","。","外观","、","各","系统","urdf","认识","建模","一种","方面","属性","的","我们","让","介绍","当然","使用","等","之前","机器人","在","用来","操作系统"],"title":"URDF：机器人建模方法","title_tokens":["机器人","urdf","：","机器","建模","方法"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_1","text":"建模描述机器人的过程中，我们自己需要先熟悉机器人的组成和参数，比如机器人一般是由 硬件结构、驱动系统、传感器系统、控制系统 四大部分组成，市面上一些常见的机器人，无论是移动机器人还是机械臂，我们都可以按照这四大组成部分进行分解。 硬件结构就是底盘、外壳、电机等实打实可以看到的设备； 驱动系统就是可以驱使这些设备正常使用的装置，比如电机的驱动器，电源管理系统等； 传感系统包括电机上的编码器、板载的IMU、安装的摄像头、雷达等等，便于机器人感知自己的状态和外部的环境； 控制系统就是我们开发过程的主要载体了，一般是树莓派、电脑等计算平台，以及里边的操作系统和应用软件。 机器人建模的过程，其实就是按照类似的思路，通过建模语言，把机器人每一个部分都描述清楚，再组合起来的过程。","text_tokens":["树莓","，","过程","通过","摄像","描述","和","按照","四大","驱动","面上","管理系统","驱动器","正常","码器","装置","了","参数","一个","先","传感","里边","管理系","的","我们","移动","上","使用","软件","应用","建模语言","操作系统","动机","imu","安装","；","机械","臂","由","机器","把","一般","操作","可以","分解","这些","其实","是","外壳","无论","都","派","清楚","。","常见","编码器","载体","像头","、","系统","组成","实打实","移动机器人","主要","起来","进行","雷达","就是","类似","环境","控制","包括","等等","状态","思路","一些","组成部分","平台","开发","建模","外部","感知","编码","电机","这","电源","中","无论是","电脑","摄像头","以及","结构","便于","市面","应用软件","部分"," ","感器","市面上","再","每","控制系统","组合","看到","计算","驱使","底盘","需要","设备","管理","板载","熟悉","传感器","硬件","自己","等","语言","比如","机器人","还是"],"title":"机器人的组成","title_tokens":["机器","机器人","的","组成"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf_1","text":"ROS中的建模方法叫做 URDF ，全称是 统一机器人描述格式 ，不仅可以清晰描述机器人自身的模型，还可以描述机器人的外部环境，比如这里的桌子，也可以算作一个模型。 URDF模型文件使用的是 XML格式 ，右侧就是一个机器人的URDF描述，乍看上去，有点像网页开发的源代码，都是由一系列尖括号包围的标签和其中的属性组合而成。 如何使用这样一个文件描述机器人呢？比如这个机械臂，大家可以看下自己的手臂，我们的手臂是由大臂和小臂组成，他们独自是无法运动的，必须通过一个手肘关节连接之后，才能通过肌肉驱动，产生相对运动。 在建模中，大臂和小臂就类似机器人的这些独立的刚体部分，称为 连杆Link ，手肘就类似于机器人电机驱动部分，称为 关节joint 。 所以在URDF建模过程中，关键任务就是通过这里的<link>和<joint>，理清楚每一个连杆和关节的描述信息。","text_tokens":["，","通过","过程","产生","描述","上去","和","如何","方法","joint","驱动","清晰","下","一个","还","之后","手臂","任务","有点像","自身",">","独自","括号","必须","格式","无法","的","我们","使用","刚体","统一","在","<","？","称为","xml","一系列","机械","看上去","由","机器","臂","全称","连杆","独立","可以","这些","是","其中","不仅","都","标签","文件","清楚","。","有点","link","运动","组成","信息","属性","关键","系列","就是","类似","环境","看上","看","一系","代码","ros","包围","理","相对运动","这里","于","模型","桌子","大臂","肘关节","乍","开发","小臂","组合而成","大家","建模","外部","连接","相对","电机","右侧","才能","中","这样","外部环境","他们","这个","手","算作","网页","部分"," ","呢","源代码","手肘","叫做","也","每","urdf","尖括号","组合","肌肉","自己","所以","就","比如","机器人","关节"],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#link","text":"<link>标签用来描述机器人某个刚体部分的 外观和物理属性 ，外观包括尺寸、颜色、形状，物理属性包括质量、惯性矩阵、碰撞参数等。 以这个机械臂连杆为例，它的link描述如下： link标签中的name表示该连杆的名称，我们可以自定义，未来joint连接link的时候，会使用到这个名称。 link里边的<visual>部分用来描述机器人的外观，比如： <geometry>表示 几何形状 ，里边使用<mesh>调用了一个在三维软件中提前设计好的蓝色外观，就是这个stl文件，看上去和真实机器人是一致的 <origin>表示 坐标系相对初始位置的偏移 ，分别是x、y、z方向上的平移，和roll、pitch、raw旋转，不需要偏移的话，就全为0。 第二个部分<collision>，描述 碰撞参数 ，里边的内容似乎和<visual>一样，也有<geometry>和<origin>，看似相同，其实区别还是比较大的。 <visual>部分重在描述机器人看上去的状态，也就是视觉效果； <collision>部分则是描述机器人运动过程中的状态，比如机器人与外界如何接触算作碰撞。 在这个机器人模型中，蓝色部分是通过<visual>来描述的，在实际控制过程中，这样复杂的外观在计算碰撞检测时，要求的算力较高，为了简化计算，我们将碰撞检测用的模型简化为了绿色框的圆柱体，也就是<collision>里边<geometry>描述的形状。<origin>坐标系偏移也是类似，可以描述刚体质心的偏移。 如果是移动机器人的话，link也可以用来描述小车的车体、轮子等部分。","text_tokens":["相同","，","看似","name","过程","origin","通过","描述","和","上去","实际","如何","的话","质心","初始","矩阵","到","joint","visual","一致","表示","以","mesh","时候","简化","了","分别","参数","一个","圆柱","则","有","外界","要求",">","定义","似乎","里边","重在","算力","的","我们","移动","上","使用","坐标系","刚体","视觉","接触","软件","如下","三维","自定义","时","在","<","坐标","raw","位置","方向","设计","好","动机","形状","y","；","机械","臂","看上去","柱体","机器","连杆","复杂","可以","来","圆柱体","其实","是","标签","文件","。","碰撞","link","、","运动","某个","模型简化","效果","用","惯性","stl","视觉效果","会","如果","移动机器人","属性","尺寸","就是","大","类似","质量","看上","旋转","第二","包括","控制","绿色","为了","：","较","内容","检测","为例","不","真实","状态","geometry","一样","未来","偏移","全为","自定","模型","外观","比较","与","调用","pitch","名称","roll","将","第二个","连接","相对","该","高","中","物理","平移","蓝色","这样","它","这个","算作","框","提前","z","小车","轮子","车体","collision","部分","x"," ","区别","二个","也","0","计算","需要","颜色","几何","等","就","比如","碰撞检测","机器人","还是","用来"],"title":"连杆Link的描述","title_tokens":["的","link","描述","连杆"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#joint","text":"机器人模型中的刚体最终要通过关节joint连接之后，才能产生相对运动。 URDF中的关节有六种运动类型。 continuous，描述旋转运动，可以围绕某一个轴无限旋转，比如小车的轮子，就属于这种类型。 revolute，也是旋转关节，和continuous类型的区别在于不能无限旋转，而是带有角度限制，比如机械臂的两个连杆，就属于这种运动。 prismatic，是滑动关节，可以沿某一个轴平移，也带有位置的极限，一般直线电机就是这种运动方式。 fixed，固定关节，是唯一一种不允许运动的关节，不过使用还是比较频繁的，比如相机这个连杆，安装在机器人上，相对位置是不会变化的，此时使用的连接方式就是Fixed。 Floating是浮动关节，第六种planar是平面关节，这两种使用相对较少。 在URDF模型中，每一个link都使用这样一段xml内容描述，比如关节的名字叫什么，运动类型是哪一种。 parent标签：描述父连杆； child标签：描述子连杆，子连杆会相对父连杆发生运动； origin：表示两个连杆坐标系之间的关系，也就是图中红色的向量，可以理解为这两个连杆该如何安装到一起； axis表示关节运动轴的单位向量，比如z等于1，就表示这个旋转运动是围绕z轴的正方向进行的； limit就表示运动的一些限制了，比如最小位置，最大位置，和最大速度等。 Info ROS中关于平移的默认单位是m，旋转是弧度（不是度），所以这里的3.14就表示可以在-180度到180度之间运动，线速度是m/s，角速度是rad/s。","text_tokens":["一段","关于","，","通过","origin","轴","产生","描述","和","频繁","1","旋转关节","rad","如何","到","joint","之间","一起","转关","最大","表示","角度","不是","了","限制","一个","之后","有","滑动","允许","info","平面","的","而是","使用","上","刚体","坐标系","变化","在","唯一","浮动","坐标","位置","方向","xml","单位","安装","s","围绕","；","机械","臂","机器","六种","连杆","一般","continuous","可以","最小","是","父","都","标签","。","两个","类型","最终","limit","link","角速度","运动","planar","-","相机","两种","parent","默认","会","第六","revolute","进行","就是","无限","向量","要","旋转","沿某","不过","线速度","：","较","内容","直线","正","ros","带有","不","度到","这种","度","一些","fixed","相对运动","这里","模型","在于","少","比较","不会","m","child","一种","连接","第六种","相对","电机","这","子","才能","为","关系","该","中","此时","平移","这样","速度","prismatic","这个","理解","（","方式","不能","发生","什么","弧度","某","叫","z","小车","轮子","属于"," ","区别","哪","图中","单位向量","）","/","红色","也","每","axis","urdf","等于","3.14","180","等","floating","就","比如","所以","机器人","还是","固定","关节","极限","名字"],"title":"关节Joint描述","title_tokens":["joint","关节","描述"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_2","text":"最终所有的link和joint标签完成了对机器人每个部分的描述和组合，全都放在一个robot标签中，就形成了完整的机器人模型。 所以大家在看某一个URDF模型时，先不着急看每一块代码的细节，先来找link和joint，看下这个机器人是由哪些部分组成的，了解完全局之后，再看细节。","text_tokens":["，","这个","哪些","和","描述","看","形成","机器","对","由","joint","某","每个","先来","全都","代码","不","找","是","部分","下","了解","局"," ","标签","了","一个","先","模型","。","最终","完整","link","所有","之后","再","每","urdf","一块","组成","组合","大家","完全","的","放在","完成","robot","着急","所以","就","中","时","机器人","在","细节"],"title":"完整机器人模型","title_tokens":["机器","模型","完整","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_3","text":"好啦，讲了这么多，还是要看一个完整的示例。 我们以这款移动机器人模型为例，一起看下它的URDF建模过程。","text_tokens":["它","，","要","好","过程","动机","看","机器","为例","一起","看下","多","示例","啦","以","讲"," ","了","一个","。","模型","完整","urdf","建模","这么","移动机器人","的","我们","移动","这款","机器人","还是"],"title":"创建机器人模型","title_tokens":["机器","模型","机器人","创建"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_4","text":"机器人的模型放置在learning_urdf功能包中，功能包中包含的文件夹如下： urdf：存放机器人模型的URDF或xacro文件 meshes：放置URDF中引用的模型渲染文件 launch：保存相关启动文件 rviz：保存rviz的配置文件","text_tokens":["，","功能","包中","：","xacro","机器人","机器","或","引用","存放","相关"," ","配置文件","文件","模型","件夹","渲染","保存","meshes","urdf","_","文件夹","launch","配置","的","包含","启动","rviz","如下","中","learning","放置","在"],"title":"功能包结构","title_tokens":["包","结构","功能"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_5","text":"我们先来看下这个模型的效果，尝试逆向分下一下机器人的结构。 $ ros2 launch learning_urdf display.launch.py 很快就可以看到Rviz中显示的机器人模型啦，大家可以使用鼠标拖拽观察。 从可视化的效果来看，这个机器人由五个link和4个joint组成。","text_tokens":["，","很快","这个","和","显示","结构","来看","一下","可视","机器",".","由","py","joint","可以","$","尝试","啦","下"," ","display","先","模型","。","ros2","分下","learning","拖拽","观察","可视化","link","逆向","urdf","_","效果","组成","大家","看到","launch","个","从","的","我们","rviz","使用","鼠标","4","就","中","机器人","五个"],"title":"模型可视化效果","title_tokens":["效果","模型","可视化","可视"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf_2","text":"我们分析的对不对呢，可以在模型文件的路径下，使用urdf_to_graphviz这个小工具来分析下。 $ urdf_to_graphviz mbot_base.urdf # 在模型文件夹下运行 运行成功后会产生一个pdf文件，打开之后就可以看到URDF模型分析的结果啦，是不是和我们的猜测完全相同呢！","text_tokens":["相同","base","，","这个","！","成功","产生","#","和","小","对",".","可以","$","不","来","是不是","啦","工具","完全相同","下","不是"," ","呢","一个","to","文件","mbot","路径","模型","。","件夹","pdf","之后","猜测","分析","urdf","_","graphviz","看到","文件夹","会","运行","完全","的","我们","使用","后","就","结果","打开","在"],"title":"查看URDF模型结构","title_tokens":["模型","结构","urdf","查看"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_6","text":"具体URDF模型什么样的，还是要打开模型来研究。 learning_urdf/urdf/mbot_base.urdf <?xml version=\"1.0\" ?> <robot name= \"mbot\" > <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"0.16\" radius= \"0.20\" /> </geometry> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> </visual> </link> <joint name= \"left_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"left_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"left_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"right_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 -0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"right_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"right_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"front_caster_joint\" type= \"continuous\" > <origin xyz= \"0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"front_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"front_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> <joint name= \"back_caster_joint\" type= \"continuous\" > <origin xyz= \"-0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"back_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"back_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> </robot>","text_tokens":["cylinder","base","，","具体","要","xml","\"","name","0.18","origin","0.095","0.05","sphere","caster","1","radius",".","version","yellow","什么","?","length","joint","continuous","color","visual","什么样","来","0.015","geometry","0.95","material"," ","right","1.0","mbot","模型","。","rgba","0.19","/","0.9","type","link","打开","white","0.4","0.16","black","1.5707","xyz","-","urdf","0","_","axis",">","parent","=","rpy","child","wheel","0.06","left","0.025","的","0.20","研究","robot","back","front","learning","还是","<"],"title":"模型文件解析","title_tokens":["模型","解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_7","text":"https://docs.ros.org/en/humble/Tutorials/URDF/URDF-Main.html","text_tokens":["html","docs","/","org","tutorials","ros","en","humble",":","-","urdf",".","https","main"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/","text":"Gazebo：三维物理仿真平台 ROS机器人开发，机器人当然是主角，如果我们手边没有实物机器人，怎么办呢？没问题，机器人三维物理仿真平台 Gazebo ，了解一下。 Gazebo仿真平台 介绍 Gazebo是ROS系统中最为常用的 三维物理仿真平台 ，支持动力学引擎，可以实现高质量的图形渲染，不仅可以模拟机器人及周边环境，还可以加入摩擦力、弹性系数等物理属性。 比如我们要开发一个火星车，那就可以在Gazebo中模拟火星表面的环境，再比如我们做无人机，续航和限飞都导致我们没有办法频繁用实物做实验，此时不妨使用Gazebo先做仿真，等算法开发的差不多了，再部署到实物上来运行。 所以类似Gazebo这样的仿真平台，可以帮助我们验证机器人算法、优化机器人设计、测试机器人场景应用，为机器人开发提供更多可能。 安装 Gazebo如何使用呢？我们不妨先把它给跑起来，互相认识一下。 为了确保系统中已经完整安装了Gazebo相关的功能包，大家可以通过这样一个命令，简单直接的把和gazebo相关的包都给装上： $ sudo apt install ros-humble-gazebo-* 运行 通过这句命令就可以启动啦： $ ros2 launch gazebo_ros gazebo.launch.py Attention 为保证模型顺利加载，请将离线模型下载并放置到~/.gazebo/models路径下 ，下载链接如下： https://github.com/osrf/gazebo_models 认识了Gazebo，接下来是不是该试试机器人仿真啦？ 大家还记得之前课程中，我们设计的移动机器人模型么？我们一起尝试把它放到Gazebo中，还要控制它在仿真环境中运动。 XACRO机器人模型优化 我们之前设计好的URDF模型此时还不能直接放到Gazebo中，需要我们做一些优化。这里给大家介绍一个URDF文件格式的升级版本—— XACRO文件 。 同样也是对机器人URDF模型的创建，XACRO文件加入了更多编程化的实现方法，可以让模型创建更友好。 比如： 宏定义 ，一个小车有4个轮子，每个轮子都一样，我们就没必要创建4个一样的link，像函数定义一样，做一个可重复使用的模块就可以了。 文件包含 ，复杂机器人的模型文件可能会很长，为了切分不同的模块，比如底盘、传感器，我们还可以把不同模块的模型放置在不同的文件中，然后再用一个总体文件做包含调用。 可编程接口 ，比如在XACRO模型文件中，定义一些常量，描述机器人的尺寸，定义一些变量，在调用宏定义的时候传递数据，还可以在模型中做数据计算，甚至加入条件语句，比如你的机器人叫A，就有摄像头，如果叫B，就没有摄像头。 XACRO建模过程就像写代码一样，功能更为丰富了。 接下来，我们就通过XACRO文件对移动机器人的模型做一下优化，大家先要使用这句命令安装必要的功能包。 $ sudo apt install ros-humble-xacro 以下是一些常用的XACRO文件语法，大家了解下。 常量定义 <xacro:property>标签用来定义一些常量，比如这样定义一个PI的常量名为“M_PI”，值为“3.14159”，在调用的时候，通过$加大括号，里边就可以使用定义好的常量了。 针对原本移动机器人的URDF文件，我们就可以把底盘的质量、尺寸，轮子的质量、尺寸、安装位置，这些不会变化的数据，都通过常量定义，未来需要修改的时候也很方便，就不需要在模型文件中一行一行找了。 数学计算 如果需要做数学计算，同样是在“${}”中进行，比如某一个位置，我们可以通过这两个常量做运算得到，就加入了加法和除法运算。 在移动机器人的模型中，很多有相对关系的数据，我们尽量都改成公式计算，如果直接写结果的数值，未来修改的时候，可能根本想不起来这个数据是怎么来的。 Info 所有数学运算都会转换成浮点数进行，以保证运算精度 宏定义 机器人的轮子我们也做成宏定义，定义方式是通过这个<xacro:macro>标签描述的，还可以像函数一样，设置里边会用到的一些参数，比如这里的A、B、C。 当需要使用这个宏的时候，就可以像这样，通过宏名字的标签，来调用，同时要记得把几个参数设置好。 比如在模型中，轮子的宏定义是这样的，包含了link描述和joint关节设置，link的名称和关节的位置，是通过输入的参数来区分的，在使用的时候，通过这两句调用，两个轮子就出现了。 这里的1和-1，是设置关节位置的，刚好是一个镜像关系。 文件包含 宏定义是可以嵌套的，于是我们把机器人的底盘也做成了一个宏，然后使用另外一个模型文件，对底盘宏定义的文件做了一个包含，然后再调用。 这种流程是不是似曾相识，很像C语言中的include文件包含，然后再去调用里边的某些函数。 到这里为止，仿真使用的模型优化还没有结束，接下来我们还得加入一些仿真必备的模块和参数。 机器人仿真模型配置 完善物理参数 第一步是确保每一个link都有惯性参数和碰撞属性，因为Gazebo是物理仿真平台，必要的物理参数是一定需要的。 添加Gazebo标签 第二步是为link添加gazebo标签，主要是为了可以在gazebo中渲染每一个link的颜色，因为URDF中的颜色系统和gazebo中的不同，所以得做一步这样的冗余配置。 配置传动装置 第三步是要给运动的joint配置传动装置，可以理解为仿真了一个电机。 添加控制器插件 第四步，要添加一个gazebo的控制器插件，小车是差速控制的，那就添加差速控制器插件，这样在不同角度下两个电机的速度分配，就可以交给控制器插件来完成了。 构建仿真环境 接下来就考虑如何把模型加载到Gazebo中了，需要用到一个gazebo提供的功能节点spwan_entity。 learning_gazebo/launch/load_urdf_into_gazebo.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node def generate_launch_description (): # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled # !!! MAKE SURE YOU SET THE PACKAGE NAME CORRECTLY !!! package_name = 'learning_gazebo' #<--- CHANGE ME world_file_path = 'worlds/neighborhood.world' pkg_path = os . path . join ( get_package_share_directory ( package_name )) world_path = os . path . join ( pkg_path , world_file_path ) # Pose where we want to spawn the robot spawn_x_val = '0.0' spawn_y_val = '0.0' spawn_z_val = '0.0' spawn_yaw_val = '0.0' mbot = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( package_name ), 'launch' , 'mbot.launch.py' )]), launch_arguments = { 'use_sim_time' : 'true' , 'world' : world_path } . items () ) # Include the Gazebo launch file, provided by the gazebo_ros package gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'gazebo_ros' ), 'launch' , 'gazebo.launch.py' )]), ) # Run the spawner node from the gazebo_ros package. The entity name doesn't really matter if you only have a single robot. spawn_entity = Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , arguments = [ '-topic' , 'robot_description' , '-entity' , 'mbot' , '-x' , spawn_x_val , '-y' , spawn_y_val , '-z' , spawn_z_val , '-Y' , spawn_yaw_val ], output = 'screen' ) # Launch them all! return LaunchDescription ([ mbot , gazebo , spawn_entity , ]) 机器人运动仿真 万事俱备，接下来就是见证奇迹的时刻。 我们需要运行两句命令，第一句启动仿真环境，第二句启动键盘控制节点。 $ ros2 launch learning_gazebo load_urdf_into_gazebo.launch.py $ ros2 run teleop_twist_keyboard teleop_twist_keyboard Attention 虚拟机中运行时需要关闭硬件加速：echo \" export SVGA_VGPU10=0\" >> ~/.bashrc 通过键盘上的“i、j、，、l”几个按键，就可以控制机器人前后左右运动啦。 整个仿真有点像控制小海龟的过程，不过此时的机器人和仿真环境，已经比小海龟复杂很多了。 以上就是Gazebo机器人的仿真的基本流程。 Ignition：下一代Gazebo 随着技术的进步，Gazebo仿真平台也在不断迭代，新一代的Gazebo命名为 Ignition ，从渲染效果和仿真流畅度上都有较大的变化，我们不妨也来试一下。 $ sudo apt install ros-humble-ros-ign $ ros2 launch ros_ign_gazebo_demos rgbd_camera_bridge.launch.py 运行成功后，会打开Ignition的仿真界面和Rviz上位机，我们可以看到RGBD相机仿真后发布的图像数据。 更多新版本仿真器的信息，大家也可以参考官方网站: www.ignitionrobotics.org/ 附录：机器人完整模型 learning_gazebo/urdf/mbot_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:include filename= \"$(find learning_gazebo)/urdf/mbot_base_gazebo.xacro\" /> <xacro:mbot_base_gazebo/> </robot> learning_gazebo/urdf/mbot_base_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <!-- PROPERTY LIST --> <xacro:property name= \"M_PI\" value= \"3.1415926\" /> <xacro:property name= \"base_mass\" value= \"1\" /> <xacro:property name= \"base_radius\" value= \"0.20\" /> <xacro:property name= \"base_length\" value= \"0.16\" /> <xacro:property name= \"wheel_mass\" value= \"0.2\" /> <xacro:property name= \"wheel_radius\" value= \"0.06\" /> <xacro:property name= \"wheel_length\" value= \"0.025\" /> <xacro:property name= \"wheel_joint_y\" value= \"0.19\" /> <xacro:property name= \"wheel_joint_z\" value= \"0.05\" /> <xacro:property name= \"caster_mass\" value= \"0.2\" /> <xacro:property name= \"caster_radius\" value= \"0.015\" /> <!-- wheel_radius - ( base_length/2 - wheel_joint_z) --> <xacro:property name= \"caster_joint_x\" value= \"0.18\" /> <!-- Defining the colors used in this robot --> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> <material name= \"gray\" > <color rgba= \"0.75 0.75 0.75 1\" /> </material> <!-- Macro for inertia matrix --> <xacro:macro name= \"sphere_inertial_matrix\" params= \"m r\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${2*m*r*r/5}\" ixy= \"0\" ixz= \"0\" iyy= \"${2*m*r*r/5}\" iyz= \"0\" izz= \"${2*m*r*r/5}\" /> </inertial> </xacro:macro> <xacro:macro name= \"cylinder_inertial_matrix\" params= \"m r h\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${m*(3*r*r+h*h)/12}\" ixy = \"0\" ixz = \"0\" iyy= \"${m*(3*r*r+h*h)/12}\" iyz = \"0\" izz= \"${m*r*r/2}\" /> </inertial> </xacro:macro> <!-- Macro for robot wheel --> <xacro:macro name= \"wheel\" params= \"prefix reflect\" > <joint name= \"${prefix}_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 ${reflect*wheel_joint_y} ${-wheel_joint_z}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"${prefix}_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> <material name= \"gray\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${wheel_mass}\" r= \"${wheel_radius}\" h= \"${wheel_length}\" /> </link> <gazebo reference= \"${prefix}_wheel_link\" > <material> Gazebo/Gray </material> </gazebo> <!-- Transmission is important to link the joints and the controller --> <transmission name= \"${prefix}_wheel_joint_trans\" > <type> transmission_interface/SimpleTransmission </type> <joint name= \"${prefix}_wheel_joint\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> </joint> <actuator name= \"${prefix}_wheel_joint_motor\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> <mechanicalReduction> 1 </mechanicalReduction> </actuator> </transmission> </xacro:macro> <!-- Macro for robot caster --> <xacro:macro name= \"caster\" params= \"prefix reflect\" > <joint name= \"${prefix}_caster_joint\" type= \"fixed\" > <origin xyz= \"${reflect*caster_joint_x} 0 ${-(base_length/2 + caster_radius)}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_caster_link\" /> </joint> <link name= \"${prefix}_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> <material name= \"black\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> </collision> <xacro:sphere_inertial_matrix m= \"${caster_mass}\" r= \"${caster_radius}\" /> </link> <gazebo reference= \"${prefix}_caster_link\" > <material> Gazebo/Black </material> </gazebo> </xacro:macro> <xacro:macro name= \"mbot_base_gazebo\" > <link name= \"base_footprint\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"0.001 0.001 0.001\" /> </geometry> </visual> </link> <gazebo reference= \"base_footprint\" > <turnGravityOff> false </turnGravityOff> </gazebo> <joint name= \"base_footprint_joint\" type= \"fixed\" > <origin xyz= \"0 0 ${base_length/2 + caster_radius*2}\" rpy= \"0 0 0\" /> <parent link= \"base_footprint\" /> <child link= \"base_link\" /> </joint> <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> <material name= \"yellow\" /> </visual> <collision> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${base_mass}\" r= \"${base_radius}\" h= \"${base_length}\" /> </link> <gazebo reference= \"base_link\" > <material> Gazebo/Blue </material> </gazebo> <xacro:wheel prefix= \"left\" reflect= \"1\" /> <xacro:wheel prefix= \"right\" reflect= \"-1\" /> <xacro:caster prefix= \"front\" reflect= \"-1\" /> <xacro:caster prefix= \"back\" reflect= \"1\" /> <!-- controller --> <gazebo> <plugin name= \"differential_drive_controller\" filename= \"libgazebo_ros_diff_drive.so\" > <update_rate> 30 </update_rate> <left_joint> left_wheel_joint </left_joint> <right_joint> right_wheel_joint </right_joint> <wheel_separation> ${wheel_joint_y*2} </wheel_separation> <wheel_diameter> ${2*wheel_radius} </wheel_diameter> <max_wheel_torque> 20 </max_wheel_torque> <max_wheel_acceleration> 1.0 </max_wheel_acceleration> <command_topic> cmd_vel </command_topic> <publish_odom> true </publish_odom> <publish_odom_tf> true </publish_odom_tf> <publish_wheel_tf> true </publish_wheel_tf> <odometry_topic> odom </odometry_topic> <odometry_frame> odom </odometry_frame> <robot_base_frame> base_footprint </robot_base_frame> <odometry_source> 1 </odometry_source> </plugin> </gazebo> </xacro:macro> </robot>","text_tokens":["主角","第三步","某些","caster","source","频繁","数值","ixx","丰富","cmd","方法","更为","到","executable","函数","摩擦力","尝试","velocityjointinterface","0.015","加入","以","下","角度","时候","可能","参数","先","传感","30","our","camera","value","attention",">","万事","join","info","随着","怎么","运行","left","传动","按键","很多","上","使用","重复使用","三维","语句","“","想不起来","？","针对","位置","python","好","进步","安装","常量","浮点","部署","数学计算","把","加大","pythonlaunchdescriptionsource","这些","来","mechanicalreduction","表面","可","是","俱备","不仅","标签","inertial","b","。","有点","插件","系统","人机","-","模块","property","第一句","parent","惯性","值为","上来","bashrc","不妨","同样","odom","them","进行","可编","enabled","类似","twist","ign","似曾","质量","控制","为止","keyboard","像","yellow","box","geometry","这种","def","周边","一些","fixed","下载","似曾相识","blue","这里","mbot","官方网站","模型","渲染","加速","请","不会","m","名称","大家","if","child","hardware","from","从","install","支持","第一","第二步","动力学","该","写","见证","macro","此时","osrf","这样","摄像头","运算","这个","帮助","发布","0.18","sphere","除法","不能","use","转换","simpletransmission","前后左右","list","mass","rgbd","get","publish","collision","续航","neighborhood","x","保证","数据","world","iyz","完整","再","切分","time","动力","odometry","wheel","区分","颜色","force","rviz","可编程","single","硬件","5","you","关节","used","简单","，","params","相识","name","通过","过程","想不起","c语言","so","items","node","如何","publisher","screen","很长","接下来","0.0","l","make","直接","界面","变量","上位","官方","separation","高质量","实验","找","升级","sure","bridge","material","弹性","index","加载","办法","1.0",",","matter","有","参数设置","2","小海龟","基本","provided","launch","http","--","set","如下","]","确保","变化","刚好","max","me","不同","demos","y","一下","size","机器","?","matrix","复杂","plugin","方便","两个","已经","一句","、","colors","运动","includelaunchdescription","}","actuator","arguments","相机","launchdescription","motor","!","会","0.06","另外","配置","奇迹","主要","后","起来","be","front","就是","放置","点数","this","环境","成功","周边环境","图像","功能","为了","：","名为",")","export","代码","不","spwan","file","度","output","相关","不断","h","总体","验证","path","org","true","系数","type","0.4","xyz","更","important","where","时刻","description","新一代","导致","相对","让","完善","以上","want","换成","only","中","物理","command","试试","理解","对","version","必备","yaw","因为","某","z","by","放到","轮子","xmlns","ignition","结束","装上","diff","感器","sources","—","to","路径","0.19","3.1415926","/","新","black","限飞","网站","inertia","all","第四","t","hardwareinterface","teleop","你","图形","场景","一定","参考","语言","find","火星车","前后","3","然后","第一步","origin","摄像","---","和","记得","描述","1","xacro","官方网","visual","*","rate","多","一代","share","二步","vel","了","装置","https","一个","还","spawner","import","doesn","手边","二句",":","spawn","directory","流畅","=","甚至","state","得到","还要","0.025","的","包含","frame","最为","0.20","4","trans","之前","编程","'","时","语法","在","joints","虚拟机","根本","再用","引擎","动机","附录","0.05","diameter","update","[","接下","0.2","~","得","加法","continuous","每个","color","可以","run","是不是","一行","都","j","没","像头","false","link","{","entity","以下","无人机","packages","用","效果","分配","优化","ixz","0.75","如果","信息","属性","当","turngravityoff","尺寸","做成","化","必要","要","添加","return","键盘","radius","公式","那","gray","机",".","虚拟","用到","一步","$","啦","change","给","未来","摩擦","20","无人","考虑","correctly","友好","0.16","比","reference","将","个","四步","电机","冗余","为","关系","顺利","interface","echo","r","速度","它","流程","提供","differential","万事俱备","sudo","into","几个","叫","defining","海龟","include","浮点数","i","及","认识一下","设置"," ","高质","呢","load","控制器","www","prefix","humble","输入","数学","文件格式","这句","axis","urdf","0","实现","计算","看到","own","底盘","修改","传感器","当然","完成","构建","footprint","就","差不多","下来","结果","learning","用来","名字","怎么办","the","弹性系数","for","3.14159","链接","改成","包","两句","joint","pi","一起","没有","不是","转换成","接口","pose","整个","models","并","下一代","rgba","出现","所有","仿真器","wiki","传递","有点像","topic","in","drive","_","定义","里边","+","括号","格式","第三","不多","启动","我们","pkg","介绍","移动","么","应用","打开","于是","reflect","<","libgazebo","xml","硬件加速","设计","传动装置","做","acceleration","小海","左右","ignitionrobotics","izz","0.001","”","跑","实物","transmission","right","文件","ros2","碰撞","back","gazebo","问题","actions","tf","重复","第四步","移动机器人","互相","is","sim","filename","常用","base","第二","同时","三步","\"","不过","很","离线","length","ros","精度","关闭","命名","尽量","一样","技术","命令","真器","传递数据","平台","调用","开发","have","worlds","rpy","建模","试一下","课程","版本","and","这","算法","镜像","12","(","torque","cylinder","火星","力学","宏","条件","generate","controller","#","交给","方式","val","节点","py","github","第二句","小车","ament","创建","迭代","iyy","vgpu10","0.95","了解","svga","com","去","package","really","模拟","仿真","apt","测试","也","每","较大","嵌套","认识","需要","a","原本","差速","robot","we","c","等","所以","比如","机器人","ixy","os"],"title":"Gazebo","title_tokens":["gazebo"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo","text":"ROS机器人开发，机器人当然是主角，如果我们手边没有实物机器人，怎么办呢？没问题，机器人三维物理仿真平台 Gazebo ，了解一下。","text_tokens":["怎么办","？","，","主角","一下","机器","ros","是","没有","实物","了解"," ","呢","。","手边","没","平台","gazebo","问题","仿真","开发","如果","怎么","我们","当然","三维","物理","机器人"],"title":"Gazebo：三维物理仿真平台","title_tokens":["平台","gazebo","仿真","：","三维","物理"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo_1","text":"","text_tokens":[],"title":"Gazebo仿真平台","title_tokens":["仿真","平台","gazebo"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_1","text":"Gazebo是ROS系统中最为常用的 三维物理仿真平台 ，支持动力学引擎，可以实现高质量的图形渲染，不仅可以模拟机器人及周边环境，还可以加入摩擦力、弹性系数等物理属性。 比如我们要开发一个火星车，那就可以在Gazebo中模拟火星表面的环境，再比如我们做无人机，续航和限飞都导致我们没有办法频繁用实物做实验，此时不妨使用Gazebo先做仿真，等算法开发的差不多了，再部署到实物上来运行。 所以类似Gazebo这样的仿真平台，可以帮助我们验证机器人算法、优化机器人设计、测试机器人场景应用，为机器人开发提供更多可能。","text_tokens":["，","弹性系数","和","频繁","到","高质量","摩擦力","实验","多","加入","没有","弹性","了","可能","一个","还","办法","先","不多","运行","的","我们","最为","使用","应用","三维","在","设计","引擎","机器","部署","做","可以","表面","是","实物","不仅","都","。","、","gazebo","系统","人机","无人机","用","优化","上来","不妨","属性","类似","常用","环境","质量","要","周边环境","那","ros","周边","验证","摩擦","渲染","无人","系数","平台","开发","更","导致","支持","动力学","算法","为","中","物理","此时","这样","火星","力学","帮助","提供","及","续航"," ","高质","再","模拟","限飞","仿真","测试","动力","实现","图形","场景","等","所以","就","比如","火星车","机器人","差不多"],"title":"介绍","title_tokens":["介绍"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_2","text":"Gazebo如何使用呢？我们不妨先把它给跑起来，互相认识一下。 为了确保系统中已经完整安装了Gazebo相关的功能包，大家可以通过这样一个命令，简单直接的把和gazebo相关的包都给装上： $ sudo apt install ros-humble-gazebo-*","text_tokens":["？","它","，","通过","功能","和","安装","为了","一下","：","如何","sudo","把","包","直接","可以","$","ros","*","跑","认识一下","相关"," ","给","了","呢","一个","都","先","装上","。","命令","已经","完整","humble","gazebo","系统","apt","-","大家","认识","不妨","的","我们","install","使用","互相","起来","中","确保","这样","简单"],"title":"安装","title_tokens":["安装"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_3","text":"通过这句命令就可以启动啦： $ ros2 launch gazebo_ros gazebo.launch.py Attention 为保证模型顺利加载，请将离线模型下载并放置到~/.gazebo/models路径下 ，下载链接如下： https://github.com/osrf/gazebo_models 认识了Gazebo，接下来是不是该试试机器人仿真啦？ 大家还记得之前课程中，我们设计的移动机器人模型么？我们一起尝试把它放到Gazebo中，还要控制它在仿真环境中运动。","text_tokens":["，","通过","记得","接下来","链接","到","一起","尝试","下","不是","了","加载","https","还","models","并",":","attention","_","launch","还要","启动","我们","的","移动","么","之前","如下","在","？","设计","动机","接下","机器","~","把","可以","是不是","。","ros2","gazebo","运动","移动机器人","放置","环境","控制","：",".","离线","$","ros","啦","下载","模型","命令","请","大家","将","课程","为","该","顺利","中","osrf","它","试试","py","github","放到"," ","保证","com","路径","/","这句","仿真","认识","就","下来","机器人"],"title":"运行","title_tokens":["运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#xacro","text":"我们之前设计好的URDF模型此时还不能直接放到Gazebo中，需要我们做一些优化。这里给大家介绍一个URDF文件格式的升级版本—— XACRO文件 。 同样也是对机器人URDF模型的创建，XACRO文件加入了更多编程化的实现方法，可以让模型创建更友好。 比如： 宏定义 ，一个小车有4个轮子，每个轮子都一样，我们就没必要创建4个一样的link，像函数定义一样，做一个可重复使用的模块就可以了。 文件包含 ，复杂机器人的模型文件可能会很长，为了切分不同的模块，比如底盘、传感器，我们还可以把不同模块的模型放置在不同的文件中，然后再用一个总体文件做包含调用。 可编程接口 ，比如在XACRO模型文件中，定义一些常量，描述机器人的尺寸，定义一些变量，在调用宏定义的时候传递数据，还可以在模型中做数据计算，甚至加入条件语句，比如你的机器人叫A，就有摄像头，如果叫B，就没有摄像头。 XACRO建模过程就像写代码一样，功能更为丰富了。 接下来，我们就通过XACRO文件对移动机器人的模型做一下优化，大家先要使用这句命令安装必要的功能包。 $ sudo apt install ros-humble-xacro 以下是一些常用的XACRO文件语法，大家了解下。","text_tokens":["，","然后","过程","通过","摄像","描述","xacro","丰富","很长","接下来","方法","更为","包","直接","变量","函数","多","加入","升级","没有","下","时候","可能","了","接口","一个","还","先","传感","有","传递","定义","甚至","格式","的","我们","包含","介绍","移动","使用","4","之前","编程","重复使用","语句","语法","在","不同","再用","设计","好","动机","常量","安装","一下","接下","机器","做","把","复杂","每个","可以","可","是","都","b","文件","。","没","像头","link","、","gazebo","-","模块","以下","重复","优化","会","如果","移动机器人","同样","尺寸","化","可编","放置","常用","必要","要","功能","为了","像","：","代码","$","ros","一样","一些","给","总体","这里","模型","命令","传递数据","友好","调用","更","大家","建模","版本","个","install","让","写","中","此时","摄像头","宏","条件","不能","对","sudo","叫","放到","小车","创建","轮子","了解"," ","感器","数据","—","humble","文件格式","切分","也","这句","apt","urdf","实现","计算","你","底盘","需要","a","传感器","可编程","就","比如","下来","机器人"],"title":"XACRO机器人模型优化","title_tokens":["模型","机器人","xacro","机器","优化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_4","text":"<xacro:property>标签用来定义一些常量，比如这样定义一个PI的常量名为“M_PI”，值为“3.14159”，在调用的时候，通过$加大括号，里边就可以使用定义好的常量了。 针对原本移动机器人的URDF文件，我们就可以把底盘的质量、尺寸，轮子的质量、尺寸、安装位置，这些不会变化的数据，都通过常量定义，未来需要修改的时候也很方便，就不需要在模型文件中一行一行找了。","text_tokens":["针对","，","质量","位置","好","通过","动机","常量","安装","3.14159","xacro","名为","机器","很","加大","把","pi","可以","$","”","轮子","这些","变化","方便","不","找","一行","一些","时候","标签","了"," ","一个","数据","文件","都","未来","。","模型","、","调用",":","也","不会","property","urdf","_","m","定义",">","里边","值为","括号","移动机器人","底盘","需要","原本","的","我们","<","尺寸","移动","修改","使用","就","比如","中","机器人","在","这样","用来","“"],"title":"常量定义","title_tokens":["常量","定义"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_5","text":"如果需要做数学计算，同样是在“${}”中进行，比如某一个位置，我们可以通过这两个常量做运算得到，就加入了加法和除法运算。 在移动机器人的模型中，很多有相对关系的数据，我们尽量都改成公式计算，如果直接写结果的数值，未来修改的时候，可能根本想不起来这个数据是怎么来的。 Info 所有数学运算都会转换成浮点数进行，以保证运算精度","text_tokens":["，","通过","和","想不起","数值","改成","直接","加入","以","时候","可能","了","转换成","一个","有","所有","info","得到","怎么","的","我们","很多","移动","在","想不起来","“","根本","位置","动机","常量","浮点","机器","数学计算","做","加法","可以","”","来","是","都","。","两个","{","}","移动机器人","如果","会","同样","起来","进行","点数","公式","$","精度","尽量","未来","模型","相对","这","换成","写","关系","中","运算","这个","除法","转换","某","浮点数"," ","保证","数据","数学","计算","需要","修改","就","比如","结果","机器人"],"title":"数学计算","title_tokens":["数学计算","计算","数学"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_6","text":"机器人的轮子我们也做成宏定义，定义方式是通过这个<xacro:macro>标签描述的，还可以像函数一样，设置里边会用到的一些参数，比如这里的A、B、C。 当需要使用这个宏的时候，就可以像这样，通过宏名字的标签，来调用，同时要记得把几个参数设置好。 比如在模型中，轮子的宏定义是这样的，包含了link描述和joint关节设置，link的名称和关节的位置，是通过输入的参数来区分的，在使用的时候，通过这两句调用，两个轮子就出现了。 这里的1和-1，是设置关节位置的，刚好是一个镜像关系。","text_tokens":["，","通过","描述","记得","和","1","xacro","两句","joint","函数","时候","了","参数","还","一个","出现","参数设置",":",">","定义","里边","的","我们","包含","使用","刚好","在","<","位置","好","机器","把","可以","来","是","标签","b","。","两个","、","link","-","会","当","做成","要","同时","像","用到","一样","一些","这里","模型","调用","名称","这","关系","中","macro","镜像","这样","这个","宏","方式","几个","轮子","设置"," ","输入","也","需要","区分","a","c","就","比如","机器人","关节","名字"],"title":"宏定义","title_tokens":["定义","宏"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_7","text":"宏定义是可以嵌套的，于是我们把机器人的底盘也做成了一个宏，然后使用另外一个模型文件，对底盘宏定义的文件做了一个包含，然后再调用。 这种流程是不是似曾相识，很像C语言中的include文件包含，然后再去调用里边的某些函数。 到这里为止，仿真使用的模型优化还没有结束，接下来我们还得加入一些仿真必备的模块和参数。","text_tokens":["似曾","，","流程","相识","然后","宏","某些","为止","和","像","c语言","接下","机器","对","很","做","接下来","得","必备","把","到","可以","函数","是不是","include","加入","这种","是","没有","结束","不是","一些"," ","了","似曾相识","一个","还","文件","这里","去","模型","。","参数","再","调用","也","仿真","模块","定义","嵌套","里边","优化","底盘","另外","的","我们","包含","做成","使用","语言","下来","中","机器人","于是"],"title":"文件包含","title_tokens":["包含","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_8","text":"","text_tokens":[],"title":"机器人仿真模型配置","title_tokens":["模型","配置","仿真","机器人","机器"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_9","text":"第一步是确保每一个link都有惯性参数和碰撞属性，因为Gazebo是物理仿真平台，必要的物理参数是一定需要的。","text_tokens":["必要","，","第一步","和","因为","一步","是","都","参数","一个","。","碰撞","link","有","gazebo","平台","每","仿真","惯性","需要","属性","的","第一","一定","物理","确保"],"title":"完善物理参数","title_tokens":["完善","参数","物理"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo_2","text":"第二步是为link添加gazebo标签，主要是为了可以在gazebo中渲染每一个link的颜色，因为URDF中的颜色系统和gazebo中的不同，所以得做一步这样的冗余配置。","text_tokens":["不同","第二","，","添加","和","为了","做","得","因为","一步","可以","是","二步","标签","一个","。","渲染","link","gazebo","每","系统","urdf","颜色","配置","的","主要","冗余","第二步","为","所以","中","在","这样"],"title":"添加Gazebo标签","title_tokens":["gazebo","标签","添加"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_10","text":"第三步是要给运动的joint配置传动装置，可以理解为仿真了一个电机。","text_tokens":["，","要","第三步","理解","三步","传动装置","joint","可以","是","了","给","装置","一个","。","运动","仿真","第三","配置","的","传动","电机","为"],"title":"配置传动装置","title_tokens":["传动","装置","传动装置","配置"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_11","text":"第四步，要添加一个gazebo的控制器插件，小车是差速控制的，那就添加差速控制器插件，这样在不同角度下两个电机的速度分配，就可以交给控制器插件来完成了。","text_tokens":["不同","速度","，","要","添加","控制","交给","那","可以","小车","来","是","下","角度","了","一个","控制器","。","两个","插件","gazebo","第四","第四步","分配","四步","的","电机","差速","完成","就","在","这样"],"title":"添加控制器插件","title_tokens":["控制器","插件","控制","添加"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_12","text":"接下来就考虑如何把模型加载到Gazebo中了，需要用到一个gazebo提供的功能节点spwan_entity。 learning_gazebo/launch/load_urdf_into_gazebo.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node def generate_launch_description (): # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled # !!! MAKE SURE YOU SET THE PACKAGE NAME CORRECTLY !!! package_name = 'learning_gazebo' #<--- CHANGE ME world_file_path = 'worlds/neighborhood.world' pkg_path = os . path . join ( get_package_share_directory ( package_name )) world_path = os . path . join ( pkg_path , world_file_path ) # Pose where we want to spawn the robot spawn_x_val = '0.0' spawn_y_val = '0.0' spawn_z_val = '0.0' spawn_yaw_val = '0.0' mbot = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( package_name ), 'launch' , 'mbot.launch.py' )]), launch_arguments = { 'use_sim_time' : 'true' , 'world' : world_path } . items () ) # Include the Gazebo launch file, provided by the gazebo_ros package gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'gazebo_ros' ), 'launch' , 'gazebo.launch.py' )]), ) # Run the spawner node from the gazebo_ros package. The entity name doesn't really matter if you only have a single robot. spawn_entity = Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , arguments = [ '-topic' , 'robot_description' , '-entity' , 'mbot' , '-x' , spawn_x_val , '-y' , spawn_y_val , '-z' , spawn_z_val , '-Y' , spawn_yaw_val ], output = 'screen' ) # Launch them all! return LaunchDescription ([ mbot , gazebo , spawn_entity , ])","text_tokens":["the","，","name","---","items","node","如何","publisher","screen","0.0","接下来","到","make","executable","sure","share","了","加载","index","一个","pose","spawner",",","import","doesn","matter","our",":","spawn","topic","directory","_","=","provided","join","state","launch","的","pkg","set","'","]","<","me","python","y","[","接下","把","pythonlaunchdescriptionsource","run","you","。","{","gazebo","entity","actions","includelaunchdescription","}","-","arguments","packages","launchdescription","!","them","be","sim","enabled","return","功能",".",")","用到","ros","spwan","file","def","output","change","mbot","模型","path","true","考虑","correctly","where","have","description","worlds","if","from","want","only","中","(","generate","#","提供","use","val","节点","into","yaw","py","get","z","by","ament","include","neighborhood","x"," ","sources","world","to","load","/","package","really","time","urdf","all","t","own","需要","a","force","robot","we","single","就","下来","learning","os"],"title":"构建仿真环境","title_tokens":["仿真","环境","构建"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_13","text":"万事俱备，接下来就是见证奇迹的时刻。 我们需要运行两句命令，第一句启动仿真环境，第二句启动键盘控制节点。 $ ros2 launch learning_gazebo load_urdf_into_gazebo.launch.py $ ros2 run teleop_twist_keyboard teleop_twist_keyboard Attention 虚拟机中运行时需要关闭硬件加速：echo \" export SVGA_VGPU10=0\" >> ~/.bashrc 通过键盘上的“i、j、，、l”几个按键，就可以控制机器人前后左右运动啦。 整个仿真有点像控制小海龟的过程，不过此时的机器人和仿真环境，已经比小海龟复杂很多了。 以上就是Gazebo机器人的仿真的基本流程。","text_tokens":["，","通过","过程","和","l","接下来","两句","了","整个","二句","有点像","attention","小海龟","基本","_",">","万事","=","launch","运行","的","我们","启动","按键","很多","上","时","虚拟机","“","硬件加速","接下","机器","~","小海","左右","复杂","可以","run","”","俱备","j","。","ros2","有点","已经","一句","、","gazebo","运动","第一句","bashrc","奇迹","就是","twist","环境","第二","控制","\"","不过","键盘","keyboard","：","机器人",".","虚拟","export","$","关闭","啦","命令","加速","比","时刻","以上","第一","见证","中","此时","echo","流程","万事俱备","节点","into","前后左右","py","几个","第二句","海龟","vgpu10","i"," ","load","svga","/","仿真","urdf","0","teleop","需要","硬件","下来","就","learning","前后"],"title":"机器人运动仿真","title_tokens":["机器","机器人","运动","仿真"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#ignitiongazebo","text":"随着技术的进步，Gazebo仿真平台也在不断迭代，新一代的Gazebo命名为 Ignition ，从渲染效果和仿真流畅度上都有较大的变化，我们不妨也来试一下。 $ sudo apt install ros-humble-ros-ign $ ros2 launch ros_ign_gazebo_demos rgbd_camera_bridge.launch.py 运行成功后，会打开Ignition的仿真界面和Rviz上位机，我们可以看到RGBD相机仿真后发布的图像数据。 更多新版本仿真器的信息，大家也可以参考官方网站: www.ignitionrobotics.org/","text_tokens":["，","和","官方网","界面","上位","官方","多","一代","bridge","仿真器","有","camera",":","_","流畅","随着","launch","运行","的","我们","上","打开","变化","在","demos","进步","一下","ignitionrobotics","可以","来","都","。","ros2","gazebo","-","相机","效果","会","信息","不妨","后","ign","成功","图像","机",".","$","命名","ros","度","不断","官方网站","渲染","技术","真器","org","平台","更","大家","新一代","试一下","版本","从","install","为","发布","sudo","rgbd","py","迭代","ignition"," ","数据","www","新","/","humble","网站","仿真","也","apt","较大","看到","rviz","参考"],"title":"Ignition：下一代Gazebo","title_tokens":["下一代","ignition","gazebo","一代","："]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_14","text":"learning_gazebo/urdf/mbot_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:include filename= \"$(find learning_gazebo)/urdf/mbot_base_gazebo.xacro\" /> <xacro:mbot_base_gazebo/> </robot> learning_gazebo/urdf/mbot_base_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <!-- PROPERTY LIST --> <xacro:property name= \"M_PI\" value= \"3.1415926\" /> <xacro:property name= \"base_mass\" value= \"1\" /> <xacro:property name= \"base_radius\" value= \"0.20\" /> <xacro:property name= \"base_length\" value= \"0.16\" /> <xacro:property name= \"wheel_mass\" value= \"0.2\" /> <xacro:property name= \"wheel_radius\" value= \"0.06\" /> <xacro:property name= \"wheel_length\" value= \"0.025\" /> <xacro:property name= \"wheel_joint_y\" value= \"0.19\" /> <xacro:property name= \"wheel_joint_z\" value= \"0.05\" /> <xacro:property name= \"caster_mass\" value= \"0.2\" /> <xacro:property name= \"caster_radius\" value= \"0.015\" /> <!-- wheel_radius - ( base_length/2 - wheel_joint_z) --> <xacro:property name= \"caster_joint_x\" value= \"0.18\" /> <!-- Defining the colors used in this robot --> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> <material name= \"gray\" > <color rgba= \"0.75 0.75 0.75 1\" /> </material> <!-- Macro for inertia matrix --> <xacro:macro name= \"sphere_inertial_matrix\" params= \"m r\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${2*m*r*r/5}\" ixy= \"0\" ixz= \"0\" iyy= \"${2*m*r*r/5}\" iyz= \"0\" izz= \"${2*m*r*r/5}\" /> </inertial> </xacro:macro> <xacro:macro name= \"cylinder_inertial_matrix\" params= \"m r h\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${m*(3*r*r+h*h)/12}\" ixy = \"0\" ixz = \"0\" iyy= \"${m*(3*r*r+h*h)/12}\" iyz = \"0\" izz= \"${m*r*r/2}\" /> </inertial> </xacro:macro> <!-- Macro for robot wheel --> <xacro:macro name= \"wheel\" params= \"prefix reflect\" > <joint name= \"${prefix}_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 ${reflect*wheel_joint_y} ${-wheel_joint_z}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"${prefix}_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> <material name= \"gray\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${wheel_mass}\" r= \"${wheel_radius}\" h= \"${wheel_length}\" /> </link> <gazebo reference= \"${prefix}_wheel_link\" > <material> Gazebo/Gray </material> </gazebo> <!-- Transmission is important to link the joints and the controller --> <transmission name= \"${prefix}_wheel_joint_trans\" > <type> transmission_interface/SimpleTransmission </type> <joint name= \"${prefix}_wheel_joint\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> </joint> <actuator name= \"${prefix}_wheel_joint_motor\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> <mechanicalReduction> 1 </mechanicalReduction> </actuator> </transmission> </xacro:macro> <!-- Macro for robot caster --> <xacro:macro name= \"caster\" params= \"prefix reflect\" > <joint name= \"${prefix}_caster_joint\" type= \"fixed\" > <origin xyz= \"${reflect*caster_joint_x} 0 ${-(base_length/2 + caster_radius)}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_caster_link\" /> </joint> <link name= \"${prefix}_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> <material name= \"black\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> </collision> <xacro:sphere_inertial_matrix m= \"${caster_mass}\" r= \"${caster_radius}\" /> </link> <gazebo reference= \"${prefix}_caster_link\" > <material> Gazebo/Black </material> </gazebo> </xacro:macro> <xacro:macro name= \"mbot_base_gazebo\" > <link name= \"base_footprint\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"0.001 0.001 0.001\" /> </geometry> </visual> </link> <gazebo reference= \"base_footprint\" > <turnGravityOff> false </turnGravityOff> </gazebo> <joint name= \"base_footprint_joint\" type= \"fixed\" > <origin xyz= \"0 0 ${base_length/2 + caster_radius*2}\" rpy= \"0 0 0\" /> <parent link= \"base_footprint\" /> <child link= \"base_link\" /> </joint> <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> <material name= \"yellow\" /> </visual> <collision> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${base_mass}\" r= \"${base_radius}\" h= \"${base_length}\" /> </link> <gazebo reference= \"base_link\" > <material> Gazebo/Blue </material> </gazebo> <xacro:wheel prefix= \"left\" reflect= \"1\" /> <xacro:wheel prefix= \"right\" reflect= \"-1\" /> <xacro:caster prefix= \"front\" reflect= \"-1\" /> <xacro:caster prefix= \"back\" reflect= \"1\" /> <!-- controller --> <gazebo> <plugin name= \"differential_drive_controller\" filename= \"libgazebo_ros_diff_drive.so\" > <update_rate> 30 </update_rate> <left_joint> left_wheel_joint </left_joint> <right_joint> right_wheel_joint </right_joint> <wheel_separation> ${wheel_joint_y*2} </wheel_separation> <wheel_diameter> ${2*wheel_radius} </wheel_diameter> <max_wheel_torque> 20 </max_wheel_torque> <max_wheel_acceleration> 1.0 </max_wheel_acceleration> <command_topic> cmd_vel </command_topic> <publish_odom> true </publish_odom> <publish_odom_tf> true </publish_odom_tf> <publish_wheel_tf> true </publish_wheel_tf> <odometry_topic> odom </odometry_topic> <odometry_frame> odom </odometry_frame> <robot_base_frame> base_footprint </robot_base_frame> <odometry_source> 1 </odometry_source> </plugin> </gazebo> </xacro:macro> </robot>","text_tokens":["the","params","name","origin","for","source","caster","1","so","ixx","xacro","cmd","joint","pi","separation","visual","*","velocityjointinterface","rate","0.015","vel","material","1.0","rgba","30","wiki","value",":","2","in","topic","drive","_",">","=","+","0.025","left","http","frame","0.20","--","trans","reflect","joints","max","<","libgazebo","xml","diameter","0.05","y","update","size","0.2","acceleration","?","matrix","izz","continuous","0.001","color","plugin","mechanicalreduction","transmission","inertial","right","false","colors","{","gazebo","link","}","actuator","back","-","property","tf","parent","motor","!","ixz","0.75","0.06","turngravityoff","odom","is","front","filename","this","base","\"","radius","gray",".","yellow",")","length","box","ros","$","geometry","fixed","h","blue","mbot","20","org","true","type","0.4","0.16","xyz","important","m","reference","rpy","child","hardware","and","macro","interface","12","(","r","torque","cylinder","command","0.18","sphere","controller","simpletransmission","differential","version","list","mass","z","defining","publish","iyy","xmlns","include","collision","0.95","diff","x"," ","to","iyz","www","0.19","3.1415926","/","prefix","black","inertia","axis","urdf","0","hardwareinterface","odometry","wheel","5","robot","footprint","find","learning","ixy","used","3"],"title":"附录：机器人完整模型","title_tokens":["模型","完整","附录","机器人","：","机器"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/","text":"Rviz：三维可视化显示平台 大家有没有畅想过一个问题，机器人眼中的世界是什么样的呢？如何能够看到机器人摄像头拍摄到的图像？ 这就涉及到可视化显示的范畴了，本讲我们介绍一位ROS中的重量级嘉宾—— Rviz ，一款 三维可视化显示 的神器。 Rviz三维可视化平台 机器人开发过程中，各种各样的功能，如果我们只是从数据层面去做分析，很难快速理解数据的效果，比如给你一堆0到255的数字，问这幅图像描述的内容是什么？你肯定一脸懵。但如果我们把这些数字通过颜色渲染出来，岂不就一目了然么？ 类似的场景还有很多，比如机器人模型，我们需要知道自己设计的模型长啥样，还有模型内部众多坐标系在运动过程中都在哪些位置。 再比如机械臂运动规划和移动机器人自主导航，我们希望可以看到机器人周边的环境、规划的路径，当然还有传感器的信息，摄像头、三维相机、激光雷达等等，数据是用来做计算的，可视化的效果才是给人看的。 所以，数据可视化可以大大提高开发效率，Rviz就是这样一款机器人开发过程中的数据可视化软件，机器人模型、传感器信息、环境信息等等，全都可以在这里搞定。 Rviz介绍 一句话说明Rviz的功能，只要有数据，它就可以可视化，只有我们想不到的，没有Rviz做不到的。 Rviz的核心框架是基于 Qt可视化工具 打造的一个开放式平台，官方出厂就自带了很多机器人常用的可视化显示插件，只要我们按照ROS中的消息发布对应的话题，就可以看到图形化的效果了。如果我们对显示的效果不满意，或者想添加某些新的显示项，也可以在Rviz这个平台中，开发更多可视化效果，方便打造我们自己的上位机。 运行方法 启动一个终端，使用如下命令即可启动： $ ros2 run rviz2 rviz2 彩色相机仿真与可视化 摄像头肯定是最为常用的一种传感器了，我们先来给机器人装上摄像头。 仿真插件配置 关于传感器的仿真，都需要使用Gazebo提供的插件，摄像头对应的插件叫做libgazebo_ros_camera.so，我们对照模型的代码给大家介绍这个插件的使用方法。 learning_gazebo/urdf/sensers/camera_gazebo.xacro <gazebo reference= \"${prefix}_link\" > <sensor type= \"camera\" name= \"camera_node\" > <update_rate> 30.0 </update_rate> <camera name= \"head\" > <horizontal_fov> 1.3962634 </horizontal_fov> <image> <width> 1280 </width> <height> 720 </height> <format> R8G8B8 </format> </image> <clip> <near> 0.02 </near> <far> 300 </far> </clip> <noise> <type> gaussian </type> <mean> 0.0 </mean> <stddev> 0.007 </stddev> </noise> </camera> <plugin name= \"gazebo_camera\" filename= \"libgazebo_ros_camera.so\" > <ros> <!-- <namespace>stereo</namespace> --> <remapping> ~/image_raw:=image_raw </remapping> <remapping> ~/camera_info:=camera_info </remapping> </ros> <camera_name> ${prefix} </camera_name> <frame_name> ${prefix}_link </frame_name> <hack_baseline> 0.2 </hack_baseline> </plugin> </sensor> </gazebo> 主要配置项如下： <sensor>标签：描述传感器 type：传感器类型，camera name：摄像头命名，自由设置 <camera>标签：描述摄像头参数 分辨率，编码格式，图像范围，噪音参数等 <plugin>标签：加载摄像头仿真插件 运行仿真环境 模型已经配置好啦，能不能把摄像头成功仿真出来，并且在Rviz中看到图像信息，我们拭目以待。 $ ros2 launch learning_gazebo load_mbot_camera_into_gazebo.launch.py 可以使用命令行看下仿真出来的图像话题： 图像数据可视化 我们使用Rviz可视化显示图像信息，先来启动Rviz： $ ros2 run rviz2 rviz2 启动成功后，在左侧Displays窗口中点击“Add”，找到Image显示项，OK确认后就可以加入显示列表啦，然后配置好该显示项订阅的图像话题，就可以顺利看到机器人的摄像头图像啦。 三维相机仿真与可视化 二维摄像头不过瘾，想不想试试三维相机，比如我们常用的Kinect体感传感器，或者Intel的Realsense，可以获取外部环境的点云数据。这种相机的价格比usb摄像头可贵不少，不过我们也可以通过仿真，一分钱不用，就可以玩起来。 仿真插件配置 三维相机使用的Gazebo插件也是libgazebo_ros_camera.so，配置方法如下： learning_gazebo/urdf/sensers/kinect_gazebo.xacro <gazebo reference= \"${prefix}_link\" > <sensor type= \"depth\" name= \"${prefix}\" > <always_on> true </always_on> <update_rate> 15.0 </update_rate> <pose> 0 0 0 0 0 0 </pose> <camera name= \"kinect\" > <horizontal_fov> ${60.0*M_PI/180.0} </horizontal_fov> <image> <format> R8G8B8 </format> <width> 640 </width> <height> 480 </height> </image> <clip> <near> 0.05 </near> <far> 8.0 </far> </clip> </camera> <plugin name= \"${prefix}_controller\" filename= \"libgazebo_ros_camera.so\" > <ros> <!-- <namespace>${prefix}</namespace> --> <remapping> ${prefix}/image_raw:=rgb/image_raw </remapping> <remapping> ${prefix}/image_depth:=depth/image_raw </remapping> <remapping> ${prefix}/camera_info:=rgb/camera_info </remapping> <remapping> ${prefix}/camera_info_depth:=depth/camera_info </remapping> <remapping> ${prefix}/points:=depth/points </remapping> </ros> <camera_name> ${prefix} </camera_name> <frame_name> ${prefix}_frame_optical </frame_name> <hack_baseline> 0.07 </hack_baseline> <min_depth> 0.001 </min_depth> <max_depth> 300.0 </max_depth> </plugin> </sensor> </gazebo> 运行仿真环境 使用如下命令启动仿真环境： $ ros2 launch learning_gazebo load_mbot_rgbd_into_gazebo.launch.py 启动成功后，可以看下当前的话题列表，已经产生了三维相机的相关话题。 点云数据可视化 运行Rviz： $ ros2 run rviz2 rviz2 同样的流程，点击Add，添加PointCloud2，设置订阅的点云话题，还要配置Rviz的参考系是odom，就可以看到点云数据啦，每一个点都是由xyz位置和rgb颜色组成。 激光雷达仿真与可视化 除了摄像头和三维相机，激光雷达也是很多移动机器人常备的传感器，包括自动驾驶汽车，我们也来试一试。 仿真插件配置 雷达使用的Gazebo插件是libgazebo_ros_ray_sensor.so，配置方法如下： learning_gazebo/urdf/sensers/lidar_gazebo.xacro <gazebo reference= \"${prefix}_link\" > <sensor type= \"ray\" name= \"rplidar\" > <update_rate> 20 </update_rate> <ray> <scan> <horizontal> <samples> 360 </samples> <resolution> 1 </resolution> <min_angle> -3 </min_angle> <max_angle> 3 </max_angle> </horizontal> </scan> <range> <min> 0.10 </min> <max> 30.0 </max> <resolution> 0.01 </resolution> </range> <noise> <type> gaussian </type> <mean> 0.0 </mean> <stddev> 0.01 </stddev> </noise> </ray> <plugin name= \"gazebo_rplidar\" filename= \"libgazebo_ros_ray_sensor.so\" > <ros> <namespace> / </namespace> <remapping> ~/out:=scan </remapping> </ros> <output_type> sensor_msgs/LaserScan </output_type> </plugin> </sensor> </gazebo> 运行仿真环境 使用如下命令启动仿真环境： $ ros2 launch learning_gazebo load_mbot_laser_into_gazebo.launch.py 在话题列表中也可以看到激光雷达啦。 点云数据可视化 启动Rviz： $ ros2 run rviz2 rviz2 点击Add，选择Laserscan，然后配置订阅的话题名，rviz的固定坐标系依然是odom，此时就可以看到激光点啦。 Rviz vs Gazebo 好啦，通过这几个案例，相信大家对Rviz可视化平台的使用流程已经非常熟悉了，也了解了常用传感器的仿真方法。 讲到这里，Gazebo和Rviz这两个软件的具体功能，大家是不是会有一些混淆。 我们再来强调下： Gazebo是 仿真平台 ，核心功能是 创造数据 ，我们没有机器人或者传感器，它可以帮我们做一个虚拟的； Rviz是 可视化平台 ，核心功能是 显示数据 ，如果没有数据，它也巧妇难为无米之炊。 所以在很多时候，我们使用Gazebo做机器人仿真的时候，也会启动Rviz来显示仿真环境的信息，如果自己手上有真实机器人的话，Gazebo就用不到了，不过还是会用Rviz显示真实机器人传感器的信息。 参考链接 https://github.com/ros2/rviz https://www.stereolabs.com/docs/ros2/rviz2/","text_tokens":["终端","哪些","某些","能够","hack","namespace","方法","到","加入","工具","不用","下","选择","时候","手上","参数","先","传感","激光雷达","camera","涉及","rgb","一款",">","分钱","info","30.0","运行","很多","上","使用","坐标系","有没有","三维","点云","640","“","？","位置","好","0.07","把","汽车","这些","来","当前","是","一脸","标签","。","自带","插件","360","range","装","-","horizontal","stereo","min","会用","分辨率","过瘾","同样","odom","rviz2","300","混淆","类似","resolution","想","问","mean","核心","这种","周边","一些","on","这里","mbot","模型","开放","渲染","嘉宾","intel","m","大家","外部","head","从","15.0","8.0","此时","摄像头","这样","这个","发布","找到","不能","数字","啥","什么","rgbd","全都","什么样","数据","再","知道","能","颜色","rviz","laser","层面","samples","关于","out","，","name","过程","通过","产生","300.0","显示","范畴","so","node","如何","说明","不到","0.0","的话","以待","上位","官方","案例","0.007","加载","laserscan","有","价格比","不少","launch","订阅","还有","一堆","--","辨率","如下","max","命令行","彩色","机器","image","人","1.3962634","plugin","255","强调","方便","窗口","points","docs","两个","类型","已经","一句","、","运动","}","点击","相机","巧妇难为无米之炊","!","会","配置","左侧","主要","后","或者","起来","很难","就是","环境","成功","图像","获取","功能","：","看","岂","巧妇","代码","不","displays","output","相关","kinect","true","type","与","一目了然","xyz","更","众多","想不到","一种","0.02","玩起来","中","外部环境","试试","理解","60.0","效率","除了","可视","对","msgs","format","先来","clip","基于","vs","懵","感器","sensers","—","相信","路径","新","/","remapping","分析","0.10","你","图形","神器","场景","width","参考","噪音","lidar","3","然后","摄像","描述","和","1","导航","只是","xacro","按照","qt","开放式","*","重量","多","rate","列表","了","点","https","一个","baseline","规划","stddev",":","=","畅想","height","拍摄","还要","的","frame","最为","重量级","软件","在","坐标","rplidar","动机","一分钱","0.05","一位","才","update","帮","机械","臂","0.2","~","量级","可以","run","是不是","长","都","自动","像头","{","link","各种","效果","组成","用","如果","信息","好该","大大","添加","stereolabs","可贵","机","常备",".","内容","ray","虚拟","$","真实","啦","一个点","给","20","并且","提高","只要","reference","pointcloud2","sensor","fov","180.0","顺利","它","流程","满意","自主","r8g8b8","提供","into","几个","noise","名","设置"," ","即可","呢","ok","load","创造","www","depth","叫做","prefix","urdf","0","看到","计算","near","传感器","内部","当然","但","自己","就","驾驶","learning","还是","一目","本","用来","far","720","链接","二维","pi","出厂","过","没有","不是","图形化","pose","话","依然","了然","_","realsense","一分","只有","480","格式","启动","我们","大大提高","介绍","移动","么","消息","<","raw","libgazebo","设计","分辨","optical","；","由","做","世界","always","0.001","范围","usb","”","快速","试一试","ros2","自由","gazebo","问题","这幅","1280","移动机器人","参考系","angle","雷达","filename","非常","常用","包括","\"","不过","样","各种各样","add","等等","ros","搞定","命名","对应","命令","0.01","平台","开发","对照","打造","各样","项","拭目","编码","这","体感","眼中","具体","不想","话题","controller","难为","py","github","拭目以待","希望","了解","讲","gaussian","com","去","可视化","也","仿真","每","玩起","确认","出来","激光","价格","需要","肯定","熟悉","scan","所以","框架","等","比如","机器人","固定"],"title":"Rviz","title_tokens":["rviz"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz","text":"大家有没有畅想过一个问题，机器人眼中的世界是什么样的呢？如何能够看到机器人摄像头拍摄到的图像？ 这就涉及到可视化显示的范畴了，本讲我们介绍一位ROS中的重量级嘉宾—— Rviz ，一款 三维可视化显示 的神器。","text_tokens":["眼中","？","，","图像","摄像","一位","能够","显示","范畴","如何","机器","可视","本","什么","世界","到","量级","ros","什么样","重量","过","是","没有","讲"," ","了","呢","一个","—","。","可视化","像头","问题","涉及","嘉宾","一款","大家","看到","畅想","拍摄","神器","的","我们","rviz","这","介绍","重量级","有没有","就","中","三维","机器人","摄像头"],"title":"Rviz：三维可视化显示平台","title_tokens":["可视化","rviz","平台","显示","：","三维","可视"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz_1","text":"机器人开发过程中，各种各样的功能，如果我们只是从数据层面去做分析，很难快速理解数据的效果，比如给你一堆0到255的数字，问这幅图像描述的内容是什么？你肯定一脸懵。但如果我们把这些数字通过颜色渲染出来，岂不就一目了然么？ 类似的场景还有很多，比如机器人模型，我们需要知道自己设计的模型长啥样，还有模型内部众多坐标系在运动过程中都在哪些位置。 再比如机械臂运动规划和移动机器人自主导航，我们希望可以看到机器人周边的环境、规划的路径，当然还有传感器的信息，摄像头、三维相机、激光雷达等等，数据是用来做计算的，可视化的效果才是给人看的。 所以，数据可视化可以大大提高开发效率，Rviz就是这样一款机器人开发过程中的数据可视化软件，机器人模型、传感器信息、环境信息等等，全都可以在这里搞定。","text_tokens":["，","过程","通过","哪些","摄像","描述","和","导航","只是","到","传感","了然","激光雷达","规划","一款","还有","一堆","的","我们","很多","大大提高","移动","坐标系","么","软件","三维","在","坐标","？","位置","设计","动机","才","机械","臂","机器","做","人","把","255","这些","可以","长","是","一脸","都","快速","。","像头","、","运动","各种","相机","效果","这幅","移动机器人","如果","信息","很难","雷达","就是","类似","环境","大大","图像","功能","问","看","内容","样","各种各样","岂","等等","搞定","不","周边","给","这里","模型","渲染","一目了然","开发","提高","各样","众多","从","中","摄像头","这样","理解","自主","效率","数字","啥","可视","什么","全都","希望","懵"," ","感器","数据","去","路径","可视化","再","知道","分析","0","看到","计算","出来","激光","你","需要","颜色","肯定","场景","rviz","传感器","内部","当然","但","自己","所以","就","层面","比如","机器人","一目","用来"],"title":"Rviz三维可视化平台","title_tokens":["可视化","rviz","平台","三维","可视"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz_2","text":"一句话说明Rviz的功能，只要有数据，它就可以可视化，只有我们想不到的，没有Rviz做不到的。 Rviz的核心框架是基于 Qt可视化工具 打造的一个开放式平台，官方出厂就自带了很多机器人常用的可视化显示插件，只要我们按照ROS中的消息发布对应的话题，就可以看到图形化的效果了。如果我们对显示的效果不满意，或者想添加某些新的显示项，也可以在Rviz这个平台中，开发更多可视化效果，方便打造我们自己的上位机。","text_tokens":["它","，","添加","想","发布","满意","这个","话题","功能","某些","显示","核心","机","可视","机器","对","不到","说明","做","按照","qt","上位","官方","可以","出厂","开放式","ros","不","基于","多","方便","是","没有","工具"," ","了","数据","图形化","一个","对应","话","。","开放","自带","新","可视化","插件","一句","有","平台","也","开发","更","效果","只要","看到","只有","打造","想不到","图形","如果","项","的","我们","rviz","很多","或者","自己","框架","就","中","机器人","在","消息","常用"],"title":"Rviz介绍","title_tokens":["rviz","介绍"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_1","text":"启动一个终端，使用如下命令即可启动： $ ros2 run rviz2 rviz2","text_tokens":["，","ros2","命令","启动","终端","$","run","使用","：","如下","rviz2"," ","即可","一个"],"title":"运行方法","title_tokens":["运行","方法"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_2","text":"摄像头肯定是最为常用的一种传感器了，我们先来给机器人装上摄像头。","text_tokens":["，","摄像","机器","先来","是","给","了","感器","。","传感","像头","装","一种","肯定","的","我们","最为","传感器","上","机器人","摄像头","常用"],"title":"彩色相机仿真与可视化","title_tokens":["可视化","与","仿真","彩色","相机","可视"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_3","text":"关于传感器的仿真，都需要使用Gazebo提供的插件，摄像头对应的插件叫做libgazebo_ros_camera.so，我们对照模型的代码给大家介绍这个插件的使用方法。 learning_gazebo/urdf/sensers/camera_gazebo.xacro <gazebo reference= \"${prefix}_link\" > <sensor type= \"camera\" name= \"camera_node\" > <update_rate> 30.0 </update_rate> <camera name= \"head\" > <horizontal_fov> 1.3962634 </horizontal_fov> <image> <width> 1280 </width> <height> 720 </height> <format> R8G8B8 </format> </image> <clip> <near> 0.02 </near> <far> 300 </far> </clip> <noise> <type> gaussian </type> <mean> 0.0 </mean> <stddev> 0.007 </stddev> </noise> </camera> <plugin name= \"gazebo_camera\" filename= \"libgazebo_ros_camera.so\" > <ros> <!-- <namespace>stereo</namespace> --> <remapping> ~/image_raw:=image_raw </remapping> <remapping> ~/camera_info:=camera_info </remapping> </ros> <camera_name> ${prefix} </camera_name> <frame_name> ${prefix}_link </frame_name> <hack_baseline> 0.2 </hack_baseline> </plugin> </sensor> </gazebo> 主要配置项如下： <sensor>标签：描述传感器 type：传感器类型，camera name：摄像头命名，自由设置 <camera>标签：描述摄像头参数 分辨率，编码格式，图像范围，噪音参数等 <plugin>标签：加载摄像头仿真插件","text_tokens":["关于","，","name","far","摄像","描述","so","720","xacro","node","0.0","hack","namespace","方法","rate","0.007","加载","参数","传感","baseline","stddev","camera",":","_",">","=","info","30.0","格式","height","的","我们","frame","介绍","使用","--","辨率","如下","<","raw","libgazebo","分辨","update","0.2","~","image","1.3962634","plugin","范围","都","标签","。","类型","像头","插件","自由","{","link","gazebo","}","horizontal","stereo","1280","!","分辨率","配置","主要","filename","300","\"","图像","mean","：",".","代码","ros","$","命名","给","对应","模型","type","对照","大家","reference","sensor","head","项","fov","编码","0.02","摄像头","这个","r8g8b8","提供","format","noise","clip","设置"," ","感器","gaussian","sensers","/","remapping","叫做","prefix","仿真","urdf","需要","near","传感器","width","噪音","等","learning"],"title":"仿真插件配置","title_tokens":["仿真","插件","配置"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_4","text":"模型已经配置好啦，能不能把摄像头成功仿真出来，并且在Rviz中看到图像信息，我们拭目以待。 $ ros2 launch learning_gazebo load_mbot_camera_into_gazebo.launch.py 可以使用命令行看下仿真出来的图像话题：","text_tokens":["，","好","成功","图像","命令行","摄像","话题","不能","看","：",".","into","把","以待","py","可以","$","拭目以待","啦","下"," ","load","mbot","模型","。","ros2","命令","像头","已经","camera","gazebo","能","仿真","并且","_","看到","出来","launch","信息","拭目","配置","的","我们","rviz","使用","中","learning","在","摄像头"],"title":"运行仿真环境","title_tokens":["仿真","环境","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_5","text":"我们使用Rviz可视化显示图像信息，先来启动Rviz： $ ros2 run rviz2 rviz2 启动成功后，在左侧Displays窗口中点击“Add”，找到Image显示项，OK确认后就可以加入显示列表啦，然后配置好该显示项订阅的图像话题，就可以顺利看到机器人的摄像头图像啦。","text_tokens":["，","然后","成功","图像","找到","话题","摄像","显示","：","可视","机器","image","add","可以","$","run","”","来","列表","窗口","加入","啦","displays"," ","ok","先","。","ros2","可视化","像头","点击","确认","看到","订阅","信息","项","配置","启动","我们","rviz","左侧","的","使用","后","好该","顺利","就","rviz2","中","机器人","在","摄像头","“"],"title":"图像数据可视化","title_tokens":["数据","图像","可视化","可视"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_6","text":"二维摄像头不过瘾，想不想试试三维相机，比如我们常用的Kinect体感传感器，或者Intel的Realsense，可以获取外部环境的点云数据。这种相机的价格比usb摄像头可贵不少，不过我们也可以通过仿真，一分钱不用，就可以玩起来。","text_tokens":["环境","，","试试","想","不想","获取","通过","不过","摄像","一分钱","可贵","二维","usb","可以","不","点云","这种","不用","kinect","感器","数据","。","传感","像头","外部环境","intel","价格比","也","仿真","相机","玩起","分钱","realsense","一分","不少","外部","价格","过瘾","的","我们","传感器","或者","起来","玩起来","就","三维","比如","摄像头","体感","常用"],"title":"三维相机仿真与可视化","title_tokens":["可视化","与","仿真","相机","三维","可视"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_7","text":"三维相机使用的Gazebo插件也是libgazebo_ros_camera.so，配置方法如下： learning_gazebo/urdf/sensers/kinect_gazebo.xacro <gazebo reference= \"${prefix}_link\" > <sensor type= \"depth\" name= \"${prefix}\" > <always_on> true </always_on> <update_rate> 15.0 </update_rate> <pose> 0 0 0 0 0 0 </pose> <camera name= \"kinect\" > <horizontal_fov> ${60.0*M_PI/180.0} </horizontal_fov> <image> <format> R8G8B8 </format> <width> 640 </width> <height> 480 </height> </image> <clip> <near> 0.05 </near> <far> 8.0 </far> </clip> </camera> <plugin name= \"${prefix}_controller\" filename= \"libgazebo_ros_camera.so\" > <ros> <!-- <namespace>${prefix}</namespace> --> <remapping> ${prefix}/image_raw:=rgb/image_raw </remapping> <remapping> ${prefix}/image_depth:=depth/image_raw </remapping> <remapping> ${prefix}/camera_info:=rgb/camera_info </remapping> <remapping> ${prefix}/camera_info_depth:=depth/camera_info </remapping> <remapping> ${prefix}/points:=depth/points </remapping> </ros> <camera_name> ${prefix} </camera_name> <frame_name> ${prefix}_frame_optical </frame_name> <hack_baseline> 0.07 </hack_baseline> <min_depth> 0.001 </min_depth> <max_depth> 300.0 </max_depth> </plugin> </sensor> </gazebo>","text_tokens":["，","name","far","300.0","so","xacro","hack","namespace","方法","pi","*","rate","pose","baseline","camera","rgb",":","_",">","=","480","info","height","的","frame","使用","--","如下","三维","max","640","<","raw","libgazebo","0.05","0.07","optical","update","image","always","plugin","0.001","points","是","插件","{","link","gazebo","}","相机","horizontal","min","!","配置","filename","\"","：",".","ros","$","on","kinect","true","type","m","reference","sensor","fov","180.0","15.0","8.0","controller","60.0","r8g8b8","format","clip"," ","sensers","depth","/","remapping","prefix","也","urdf","0","near","width","learning"],"title":"仿真插件配置","title_tokens":["仿真","插件","配置"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_8","text":"使用如下命令启动仿真环境： $ ros2 launch learning_gazebo load_mbot_rgbd_into_gazebo.launch.py 启动成功后，可以看下当前的话题列表，已经产生了三维相机的相关话题。","text_tokens":["环境","，","成功","话题","产生","：","看",".","into","rgbd","py","可以","$","列表","当前","下","相关"," ","了","load","mbot","。","ros2","命令","已经","gazebo","仿真","相机","_","launch","启动","的","使用","后","如下","三维","learning"],"title":"运行仿真环境","title_tokens":["仿真","环境","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_9","text":"运行Rviz： $ ros2 run rviz2 rviz2 同样的流程，点击Add，添加PointCloud2，设置订阅的点云话题，还要配置Rviz的参考系是odom，就可以看到点云数据啦，每一个点都是由xyz位置和rgb颜色组成。","text_tokens":["，","位置","流程","添加","话题","和","：","由","add","可以","$","run","啦","是","一个点","设置"," ","都","数据","一个","。","ros2","rgb","每","xyz","点击","组成","pointcloud2","看到","订阅","运行","还要","颜色","配置","的","参考系","rviz","同样","odom","参考","就","rviz2","点云"],"title":"点云数据可视化","title_tokens":["数据","点云","可视化","可视"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_10","text":"除了摄像头和三维相机，激光雷达也是很多移动机器人常备的传感器，包括自动驾驶汽车，我们也来试一试。","text_tokens":["，","包括","动机","摄像","和","除了","常备","机器","汽车","来","是","感器","自动","试一试","。","传感","激光雷达","像头","也","相机","激光","移动机器人","的","我们","很多","移动","传感器","雷达","三维","驾驶","机器人","摄像头"],"title":"激光雷达仿真与可视化","title_tokens":["激光雷达","可视化","与","仿真","雷达","可视","激光"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_11","text":"雷达使用的Gazebo插件是libgazebo_ros_ray_sensor.so，配置方法如下： learning_gazebo/urdf/sensers/lidar_gazebo.xacro <gazebo reference= \"${prefix}_link\" > <sensor type= \"ray\" name= \"rplidar\" > <update_rate> 20 </update_rate> <ray> <scan> <horizontal> <samples> 360 </samples> <resolution> 1 </resolution> <min_angle> -3 </min_angle> <max_angle> 3 </max_angle> </horizontal> </scan> <range> <min> 0.10 </min> <max> 30.0 </max> <resolution> 0.01 </resolution> </range> <noise> <type> gaussian </type> <mean> 0.0 </mean> <stddev> 0.01 </stddev> </noise> </ray> <plugin name= \"gazebo_rplidar\" filename= \"libgazebo_ros_ray_sensor.so\" > <ros> <namespace> / </namespace> <remapping> ~/out:=scan </remapping> </ros> <output_type> sensor_msgs/LaserScan </output_type> </plugin> </sensor> </gazebo>","text_tokens":["out","libgazebo","，","rplidar","resolution","\"","name","update","1","so","mean","：","xacro","3",".","0.0","~","namespace","方法","msgs","ray","plugin","ros","$","noise","rate","是","output"," ","gaussian","sensers","20","laserscan","/","remapping","0.01","插件","prefix","{","link","gazebo","type","}","360","range","-","stddev","urdf",":","_","0.10",">","horizontal","reference","=","min","sensor","30.0","配置","的","angle","使用","scan","雷达","如下","filename","learning","samples","max","lidar","<"],"title":"仿真插件配置","title_tokens":["仿真","插件","配置"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_12","text":"使用如下命令启动仿真环境： $ ros2 launch learning_gazebo load_mbot_laser_into_gazebo.launch.py 在话题列表中也可以看到激光雷达啦。","text_tokens":["环境","话题","：",".","into","py","可以","$","列表","啦"," ","load","mbot","。","ros2","命令","激光雷达","gazebo","仿真","也","_","看到","激光","launch","启动","使用","laser","雷达","如下","中","learning","在"],"title":"运行仿真环境","title_tokens":["仿真","环境","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_13","text":"启动Rviz： $ ros2 run rviz2 rviz2 点击Add，选择Laserscan，然后配置订阅的话题名，rviz的固定坐标系依然是odom，此时就可以看到激光点啦。","text_tokens":["，","然后","话题","：","add","可以","$","run","名","啦","是","选择"," ","点","依然","。","laserscan","ros2","点击","看到","激光","订阅","配置","启动","的","rviz","坐标系","odom","就","rviz2","此时","固定","坐标"],"title":"点云数据可视化","title_tokens":["数据","点云","可视化","可视"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz-vs-gazebo","text":"好啦，通过这几个案例，相信大家对Rviz可视化平台的使用流程已经非常熟悉了，也了解了常用传感器的仿真方法。 讲到这里，Gazebo和Rviz这两个软件的具体功能，大家是不是会有一些混淆。 我们再来强调下： Gazebo是 仿真平台 ，核心功能是 创造数据 ，我们没有机器人或者传感器，它可以帮我们做一个虚拟的； Rviz是 可视化平台 ，核心功能是 显示数据 ，如果没有数据，它也巧妇难为无米之炊。 所以在很多时候，我们使用Gazebo做机器人仿真的时候，也会启动Rviz来显示仿真环境的信息，如果自己手上有真实机器人的话，Gazebo就用不到了，不过还是会用Rviz显示真实机器人传感器的信息。","text_tokens":["，","通过","和","显示","不到","的话","方法","到","案例","没有","下","不是","时候","了","手上","一个","传感","有","的","我们","很多","启动","使用","软件","在","好","帮","；","机器","做","可以","强调","来","是不是","是","。","两个","已经","gazebo","用","巧妇难为无米之炊","会用","会","如果","信息","或者","非常","混淆","常用","环境","功能","不过","：","核心","虚拟","巧妇","真实","啦","一些","这里","平台","大家","这","它","流程","具体","难为","可视","对","几个","了解","讲"," ","感器","数据","相信","创造","可视化","再","也","仿真","rviz","熟悉","传感器","自己","所以","就","机器人","还是"],"title":"Rviz vs Gazebo","title_tokens":[" ","rviz","vs","gazebo"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_14","text":"https://github.com/ros2/rviz https://www.stereolabs.com/docs/ros2/rviz2/","text_tokens":["www","github","ros2","docs","/","rviz","stereolabs",":","rviz2"," ",".","https","com"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/","text":"RQT：模块化可视化工具 ROS中的Rviz功能已经很强大了，不过有些场景下，我们可能更需要一些简单的模块化的可视化工具，比如只显示一个摄像头的图像，使用Rviz的话，难免会觉得操作有点麻烦。 此时，我们就会用到ROS提供的另外一种模块化可视化工具—— rqt 。 rqt介绍 正如RQT的命名，它和Rviz一样，也是基于QT可视化工具开发而来，在使用前，我们需要通过这样一句指令进行安装，然后就可以通过rqt这个命令启动使用了。 $ sudo apt install ros-humble-rqt $ rqt 类似这个界面一样，里边可以加载很多小模块，每个模块都可以实现一个具体的小功能，一些常用的功能如下： 日志显示 图像显示 发布话题数据/调用服务请求 绘制数据曲线 数据包管理 节点可视化 参考资料 https://docs.ros.org/en/humble/Concepts/About-RQt.html https://docs.ros.org/en/humble/Tutorials/Rqt-Console/Using-Rqt-Console.html","text_tokens":["，","然后","通过","摄像","和","显示","的话","难免","qt","界面","rqt","数据包","工具","下","曲线","about","可能","了","加载","https","一个",":","里边","的","我们","启动","很多","介绍","使用","如下","在","安装","操作","日志","html","觉得","每个","可以","来","模块化","是","都","只","。","麻烦","docs","有点","而","像头","已经","一句","-","模块","正如","前","请求","会","另外","进行","绘制","类似","常用","参考资料","图像","功能","不过","：","小","concepts",".","很","用到","ros","命名","$","服务","一样","一些","资料","命令","org","tutorials","调用","更","开发","一种","install","有些","中","此时","这样","摄像头","它","具体","这个","发布","话题","提供","可视","指令","sudo","节点","en","基于","console"," ","数据","—","/","可视化","humble","也","apt","实现","using","需要","管理","场景","rviz","强大","参考","就","比如","难免会","简单"],"title":"Rqt","title_tokens":["rqt"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#rqt","text":"ROS中的Rviz功能已经很强大了，不过有些场景下，我们可能更需要一些简单的模块化的可视化工具，比如只显示一个摄像头的图像，使用Rviz的话，难免会觉得操作有点麻烦。 此时，我们就会用到ROS提供的另外一种模块化可视化工具—— rqt 。","text_tokens":["，","图像","功能","不过","摄像","显示","提供","可视","很","的话","难免","操作","觉得","用到","rqt","ros","模块化","工具","下","一些","可能","了","只"," ","一个","—","。","麻烦","有点","可视化","像头","已经","模块","更","会","需要","另外","一种","的","场景","rviz","强大","有些","我们","使用","就","中","比如","此时","难免会","摄像头","简单"],"title":"RQT：模块化可视化工具","title_tokens":["rqt","可视化","模块化","模块","：","工具","可视"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#rqt_1","text":"正如RQT的命名，它和Rviz一样，也是基于QT可视化工具开发而来，在使用前，我们需要通过这样一句指令进行安装，然后就可以通过rqt这个命令启动使用了。 $ sudo apt install ros-humble-rqt $ rqt 类似这个界面一样，里边可以加载很多小模块，每个模块都可以实现一个具体的小功能，一些常用的功能如下：","text_tokens":["它","，","具体","然后","这个","通过","功能","和","安装","：","小","可视","指令","sudo","qt","界面","每个","rqt","可以","$","命名","ros","来","基于","一样","是","工具","类似","一些"," ","了","加载","都","一个","。","而","命令","可视化","一句","humble","也","apt","-","模块","开发","正如","实现","里边","前","需要","的","我们","rviz","启动","install","很多","使用","进行","就","如下","在","这样","常用"],"title":"rqt介绍","title_tokens":["介绍","rqt"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_1","text":"","text_tokens":[],"title":"日志显示","title_tokens":["显示","日志"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_2","text":"","text_tokens":[],"title":"图像显示","title_tokens":["显示","图像"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_3","text":"","text_tokens":[],"title":"发布话题数据/调用服务请求","title_tokens":["/","发布","话题","服务","调用","数据","请求"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_4","text":"","text_tokens":[],"title":"绘制数据曲线","title_tokens":["数据","绘制","曲线"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_5","text":"","text_tokens":[],"title":"数据包管理","title_tokens":["数据","数据包","管理"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_6","text":"","text_tokens":[],"title":"节点可视化","title_tokens":["可视","可视化","节点"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_7","text":"https://docs.ros.org/en/humble/Concepts/About-RQt.html https://docs.ros.org/en/humble/Tutorials/Rqt-Console/Using-Rqt-Console.html","text_tokens":["using","html","docs","/","org","rqt","ros","tutorials","en","humble",":","console","-","concepts","about"," ",".","https"],"title":"参考资料","title_tokens":["资料","参考","参考资料"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/","text":"资源汇总 常用框架 自主导航 比如移动机器人基本都会具备的自主导航功能，ROS2提供了完整的自主导航系统框架和各种实现好的算法，即便我们不开发任何代码，也可以在自己的机器人上，使用这套系统，快速实现自主导航的基本功能。 大家如果要进行相关的应用开发，可以参考这个链接中的内容： https://navigation.ros.org/ 自动驾驶 自动驾驶是当今最为热门的行业之一，也是一种典型的机器人应用。 在ROS社区中，有一个著名的自动驾驶框架——Autoware，包含了自动驾驶中的感知、规划、控制等模块和实现，功能非常丰富，很多商业化的自动驾驶系统，也参考了这个框架。 大家如果对自动驾驶感兴趣，可以参考这几个链接： https://www.autoware.org/ https://autowarefoundation.gitlab.io/autoware.auto/AutowareAuto/ 路径规划 此外还有机械臂相关的运动规划、碰撞检测、视觉分拣等功能，也都可以使用ROS中的MoveIt框架。 这也是ROS中非常经典的功能，大家可以在这个链接中找到更多内容: https://moveit.ros.org/ 机器人学 ROS是机器人开发的工具，重在学习实操技能。至于内功的修炼，就得学习机器人学相关的理论知识，比如《机器人学导论》，被称为机器人工程师人手必备的一本理论书籍，推荐大家仔细阅读。 除此之外，这些都是机器人学的经典著作，每一本书都有对应的中文版本，大家可以结合自身的情况选择。 视频课程 斯坦福大学公开课 —— 机器人学 (https://www.bilibili.com/video/av4506104/){:target=\"_blank\"} 台大机器人学之运动学 (https://www.bilibili.com/video/BV1v4411H7ez){:target=\"_blank\"} Self-Driving Cars with ROS2 & Autoware (https://www.youtube.com/watch?v=XTmlhvlmcf8&list=PLL57Sz4fhxLpCXgN0lvCF7aHAlRA5FoFr){:target=\"_blank\"} 古月学院 (https://class.guyuehome.com/){:target=\"_blank\"} 常用链接 ROS： https://www.ros.org ROS 2 Documentation： https://docs.ros.org/en/humble/index.html 古月居： https://www.guyuehome.com/ ROS : https://www.ros.org ROS Wiki : http://wiki.ros.org/ ROSCon : https://roscon.ros.org ROS Robots : https://robots.ros.org/ Ubuntu Wiki ： https://wiki.ubuntu.org.cn ROS2 Github ： https://github.com/ros2 Gazebo : https://classic.gazebosim.org","text_tokens":["av4506104","，","修炼","人手","和","导航","driving","丰富","链接","机器人学","http","理论","cn","这套","gitlab","多","除此","开课","工具","选择","ubuntu","了","index","https","一个","每一","autoware","规划","著作","有","wiki",":","2","基本","_","自身","商业化","=","blank","基本功能","还有","重在","的","我们","包含","最为","移动","上","使用","很多","视觉","知识","推荐","仔细","结合","应用","在","社区","热门","此外","auto","理论知识","称为","公开","gazebosim","好","动机","youtube","一本","机械","臂","工程","机器","得","class","?","html","工程师","可以","这些","with","navigation","是","documentation","都","人学","快速","斯坦福","学院","自动","。","ros2","docs","感兴趣","碰撞","之外","本书","、","技能","运动","{","}","系统","情况","video","模块","self","各种","-","移动机器人","会","如果","经典","导论","进行","非常","仔细阅读","著名","常用","中文","要","控制","大学","\"","autowareauto","功能","target","pll57sz4fhxlpcxgn0lvcf7ahalra5fofr","阅读","：","moveit","至于","》","视频",".","内容",")","bv1v4411h7ez","&","roscon","检测","《","代码","ros","被","不","书籍","相关","居","即便","对应","guyuehome","org","classic","开发","更","大家","之一","课程","碰撞检测","一种","版本","感知","公开课","典型","这","行业","汇总","算法","io","当今","中","导航系统","之","(","基本功","v","robots","这个","找到","运动学","内功","自主","具备","实操","提供","商业","对","资源","兴趣","必备","list","几个","github","en","福大","斯坦福大学","watch","古月","台大"," ","gazebo","任何","—","除此之外","分拣","www","路径","经典著作","com","/","学习","完整","humble","也","autowarefoundation","实现","xtmlhvlmcf8","bilibili","感兴","cars","参考","自己","等","框架","就","比如","驾驶","机器人"],"title":"资源汇总","title_tokens":["汇总","资源"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_1","text":"","text_tokens":[],"title":"资源汇总","title_tokens":["汇总","资源"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_2","text":"","text_tokens":[],"title":"常用框架","title_tokens":["框架","常用"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_3","text":"比如移动机器人基本都会具备的自主导航功能，ROS2提供了完整的自主导航系统框架和各种实现好的算法，即便我们不开发任何代码，也可以在自己的机器人上，使用这套系统，快速实现自主导航的基本功能。 大家如果要进行相关的应用开发，可以参考这个链接中的内容： https://navigation.ros.org/","text_tokens":["，","要","这个","好","动机","功能","具备","自主","和","导航","提供","：","机器",".","内容","链接","代码","可以","ros","不","这套","navigation","相关","都","了"," ","任何","快速","即便","https","。","ros2","/","org","完整","系统","也",":","导航系统","基本","各种","开发","实现","大家","基本功能","移动机器人","会","如果","的","我们","移动","上","使用","参考","算法","自己","框架","进行","比如","应用","机器人","中","在","基本功"],"title":"自主导航","title_tokens":["导航","自主"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_4","text":"自动驾驶是当今最为热门的行业之一，也是一种典型的机器人应用。 在ROS社区中，有一个著名的自动驾驶框架——Autoware，包含了自动驾驶中的感知、规划、控制等模块和实现，功能非常丰富，很多商业化的自动驾驶系统，也参考了这个框架。 大家如果对自动驾驶感兴趣，可以参考这几个链接： https://www.autoware.org/ https://autowarefoundation.gitlab.io/autoware.auto/AutowareAuto/","text_tokens":["，","控制","这个","autowareauto","功能","和","：","社区","商业","机器","丰富","对","兴趣",".","链接","几个","可以","ros","io","gitlab","是"," ","了","auto","https","一个","—","自动","www","。","autoware","/","org","感兴趣","规划","、","有","也","系统",":","模块","autowarefoundation","实现","商业化","大家","之一","如果","一种","感知","的","包含","典型","最为","很多","这","感兴","行业","参考","等","框架","当今","应用","驾驶","机器人","中","在","非常","热门","著名"],"title":"自动驾驶","title_tokens":["驾驶","自动"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_5","text":"此外还有机械臂相关的运动规划、碰撞检测、视觉分拣等功能，也都可以使用ROS中的MoveIt框架。 这也是ROS中非常经典的功能，大家可以在这个链接中找到更多内容: https://moveit.ros.org/","text_tokens":["，","这个","找到","功能","机械","臂","moveit",".","内容","链接","检测","可以","ros","多","是","相关","都"," ","https","分拣","。","/","org","规划","碰撞","、","运动","也",":","更","大家","经典","还有","的","这","使用","视觉","等","框架","非常","中","碰撞检测","在","此外"],"title":"路径规划","title_tokens":["路径","规划"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_6","text":"ROS是机器人开发的工具，重在学习实操技能。至于内功的修炼，就得学习机器人学相关的理论知识，比如《机器人学导论》，被称为机器人工程师人手必备的一本理论书籍，推荐大家仔细阅读。 除此之外，这些都是机器人学的经典著作，每一本书都有对应的中文版本，大家可以结合自身的情况选择。","text_tokens":["理论知识","，","修炼","称为","人手","内功","实操","阅读","一本","至于","工程","》","机器","必备","得","机器人学","《","理论","工程师","被","ros","这些","可以","除此","书籍","是","工具","相关","选择","人学"," ","都","对应","除此之外","经典著作","。","每一","之外","学习","著作","本书","技能","有","情况","开发","自身","大家","导论","经典","版本","重在","的","知识","推荐","仔细","结合","就","比如","仔细阅读","机器人","中文"],"title":"机器人学","title_tokens":["机器","机器人","人学","机器人学"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_7","text":"斯坦福大学公开课 —— 机器人学 (https://www.bilibili.com/video/av4506104/){:target=\"_blank\"} 台大机器人学之运动学 (https://www.bilibili.com/video/BV1v4411H7ez){:target=\"_blank\"} Self-Driving Cars with ROS2 & Autoware (https://www.youtube.com/watch?v=XTmlhvlmcf8&list=PLL57Sz4fhxLpCXgN0lvCF7aHAlRA5FoFr){:target=\"_blank\"} 古月学院 (https://class.guyuehome.com/){:target=\"_blank\"}","text_tokens":["v","av4506104","大学","公开","\"","运动学","target","youtube","pll57sz4fhxlpcxgn0lvcf7ahalra5fofr","driving","机器",".",")","list","bv1v4411h7ez","机器人学","&","?","class","with","斯坦福大学","福大","开课","watch","台大"," ","人学","https","斯坦福","—","学院","com","www","guyuehome","ros2","autoware","/","{","古月","运动","self","}",":","video","-","_","=","xtmlhvlmcf8","公开课","blank","bilibili","cars","机器人","之","("],"title":"视频课程","title_tokens":["课程","视频"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_8","text":"ROS： https://www.ros.org ROS 2 Documentation： https://docs.ros.org/en/humble/index.html 古月居： https://www.guyuehome.com/ ROS : https://www.ros.org ROS Wiki : http://wiki.ros.org/ ROSCon : https://roscon.ros.org ROS Robots : https://robots.ros.org/ Ubuntu Wiki ： https://wiki.ubuntu.org.cn ROS2 Github ： https://github.com/ros2 Gazebo : https://classic.gazebosim.org","text_tokens":["robots","gazebosim","：",".","roscon","html","github","cn","ros","en","documentation","ubuntu","居","index"," ","https","guyuehome","com","www","docs","ros2","/","org","humble","古月","wiki","gazebo",":","2","classic","http"],"title":"常用链接","title_tokens":["链接","常用"]}]}